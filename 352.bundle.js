(self.webpackChunkcbunt_portfolio=self.webpackChunkcbunt_portfolio||[]).push([[352],{7638:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ cubemapGuassianPyramid)\n/* harmony export */ });\n/* harmony import */ var _shaders_cubemap_sampling_shader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(423);\n/* harmony import */ var _utils_data_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6182);\n/* harmony import */ var _utils_general__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(80);\n/* eslint @stylistic/max-len: \"error\" */\n\n\n\nconst createMipBlurCode = (groups, format) => /* wgsl */ `\r\n    ${_shaders_cubemap_sampling_shader__WEBPACK_IMPORTED_MODULE_1__/* .cubemapSampleConversions */ .X}\r\n    ${_shaders_cubemap_sampling_shader__WEBPACK_IMPORTED_MODULE_1__/* .toWorldDir */ .V}\r\n\r\n    override STEPS: i32 = 4;\r\n\r\n    struct Params {\r\n        offset: u32,\r\n        sigmas: array<f32>,\r\n    }\r\n\r\n    @group(0) @binding(0) var previousMip: texture_2d_array<f32>;\r\n\r\n    @group(0) @binding(1) \r\n    var outputTexture: texture_storage_2d_array<${format}, write>;\r\n\r\n    // sigma[0] reserved for work offset\r\n    @group(0) @binding(2) var<storage> params: Params;\r\n    \r\n    @compute @workgroup_size(${groups}, 1, 1)\r\n    fn main(@builtin(global_invocation_id) gid: vec3u) {\r\n        let mipSize = textureDimensions(outputTexture).x;\r\n\r\n        let idx = gid.x + params.offset;\r\n        let faceSize = mipSize * mipSize;\r\n        let faceIdx = idx % faceSize;\r\n        let coord = vec3u(\r\n            faceIdx % mipSize, \r\n            faceIdx / mipSize, \r\n            idx / faceSize,\r\n        ); \r\n\r\n        if (coord.x >= mipSize || coord.y >= mipSize || coord.z >= 6) { \r\n            return; \r\n        }\r\n\r\n        let previousSize = textureDimensions(previousMip).x;\r\n        let baseCoord = vec3i(vec3u(coord.x * 2, coord.y * 2, coord.z));\r\n        let pos = toWorldDir(vec3u(coord), mipSize);\r\n\r\n        let size = arrayLength(&params.sigmas);\r\n        let level = size - u32(ceil(log2(f32(previousSize))));\r\n        let sigma = params.sigmas[level];\r\n        let guassian_factor = -0.5 / (sigma * sigma);\r\n\r\n        var weight = 0.0;\r\n        var res = vec3(0.0);\r\n\r\n        for (var u = -STEPS; u <= STEPS + 1; u += 1) {\r\n            for (var v = -STEPS; v <= STEPS + 1; v += 1) {\r\n                let offsetCoord = baseCoord + vec3i(u, v, 0);\r\n                let sample = cubeSampleCoord(offsetCoord, previousSize);\r\n                if (sample.z == INVALID_FACE) { continue; }\r\n\r\n                let samplePos = toWorldDir(sample, previousSize);\r\n                let x = max(0.0, acos(dot(samplePos, pos)));\r\n                let w = exp(x * x * guassian_factor);\r\n                let color = textureLoad(previousMip, sample.xy, sample.z, 0);\r\n\r\n                res += color.rgb * w;\r\n                weight += w;\r\n            }\r\n        }\r\n\r\n        textureStore(outputTexture, coord.xy, coord.z, vec4(res / weight, 1));\r\n    }\r\n`;\n/**\n *  the minimum angular distance between any pixel on a cubemap\n *  of the given face width and any pixel lying on a perimeter\n *  the given number of steps away\n */\nfunction minStepDistance(steps, width) {\n    // the angular distance\n    // from the uvf: face = 0, u = 0, and v = width - Math.floor(steps / 2) - 1\n    // to the uvf: face = 3, u = 2 * width - baseV - steps - 2, and v = 0 or 1\n    // It's likely possible to programmatically determine whether the\n    // destination pixel should be v = 0 or v = 1, but checking both works fine\n    const nextMipWidth = width >> 1;\n    const baseV = nextMipWidth - Math.floor(steps / 4) - 1;\n    const baseVN = (2 / nextMipWidth) * (baseV + 0.5) - 1;\n    const baseUN = (1 / nextMipWidth) - 1;\n    const baseMag2 = 1 + baseVN * baseVN + baseUN * baseUN;\n    const sampU = 2 * width - (baseV * 2) - steps - 2;\n    const sampUN = (2 / width) * (sampU + 0.5) - 1;\n    const samp0VN = (1 / width) - 1;\n    const samp0Mag2 = 1 + sampUN * sampUN + samp0VN * samp0VN;\n    const samp1VN = (3 / width) - 1;\n    const samp1Mag2 = 1 + sampUN * sampUN + samp1VN * samp1VN;\n    const dot0 = (sampUN + baseVN + samp0VN * baseUN)\n        / Math.sqrt(samp0Mag2 * baseMag2);\n    const dot1 = (sampUN + baseVN + samp1VN * baseUN)\n        / Math.sqrt(samp1Mag2 * baseMag2);\n    return Math.min(1 - dot0, 1 - dot1);\n}\nasync function cubemapGuassianPyramid({ device, texture, outputTextureLabel, inPlace = false, minWidth = 8, steps = 4, maxOpsPerPass = 6 * ((17 * 256) ** 2), label = cubemapGuassianPyramid.name, delayWork, }) {\n    const { width, format } = texture;\n    const mipLevelCount = inPlace\n        ? texture.mipLevelCount\n        : (Math.log2(width) - Math.log2(minWidth) + 1);\n    if (mipLevelCount <= 1)\n        return texture;\n    const groups = Math.min(device.limits.maxComputeWorkgroupSizeX, device.limits.maxComputeInvocationsPerWorkgroup);\n    const shader = device.createShaderModule({\n        label,\n        code: createMipBlurCode(groups, format),\n    });\n    const bindgroupLayout = device.createBindGroupLayout({\n        label,\n        entries: [\n            {\n                binding: 0,\n                texture: { viewDimension: '2d-array' },\n                visibility: GPUShaderStage.COMPUTE,\n            },\n            {\n                binding: 1,\n                storageTexture: {\n                    access: 'write-only',\n                    viewDimension: '2d-array',\n                    format,\n                },\n                visibility: GPUShaderStage.COMPUTE,\n            },\n            {\n                binding: 2,\n                buffer: { type: 'read-only-storage' },\n                visibility: GPUShaderStage.COMPUTE,\n            },\n        ],\n    });\n    const pipeline = device.createComputePipeline({\n        label,\n        layout: device.createPipelineLayout({\n            label,\n            bindGroupLayouts: [bindgroupLayout],\n        }),\n        compute: {\n            module: shader,\n            entryPoint: 'main',\n            constants: { STEPS: Math.ceil(steps) },\n        },\n    });\n    let gaussianPyramid = texture;\n    if (!inPlace) {\n        const size = { width, height: width, depthOrArrayLayers: 6 };\n        gaussianPyramid = device.createTexture({\n            label: outputTextureLabel,\n            usage: GPUTextureUsage.STORAGE_BINDING\n                | GPUTextureUsage.TEXTURE_BINDING\n                | GPUTextureUsage.COPY_SRC\n                | GPUTextureUsage.COPY_DST,\n            dimension: '2d',\n            format,\n            mipLevelCount,\n            size,\n        });\n        const copyEncoder = device.createCommandEncoder({\n            label: `${label} copy encoder`,\n        });\n        copyEncoder.copyTextureToTexture({ texture, mipLevel: 0 }, { texture: gaussianPyramid, mipLevel: 0 }, size);\n        device.queue.submit([copyEncoder.finish()]);\n        await device.queue.onSubmittedWorkDone();\n    }\n    const mipViews = (0,_utils_general__WEBPACK_IMPORTED_MODULE_2__/* .mapRange */ ._b)(mipLevelCount, (i) => gaussianPyramid.createView({\n        label: `${label} mip view ${i}`,\n        dimension: '2d-array',\n        baseMipLevel: i,\n        mipLevelCount: 1,\n    }));\n    const maxWorkgroups = device.limits.maxComputeWorkgroupsPerDimension;\n    const maxLayers = Math.ceil(Math.log2(width));\n    const maxDispatches = Math.max((maxOpsPerPass / (((1 + (steps * 2)) ** 2) * groups)) | 0, 1);\n    const propertyArray = new ArrayBuffer((maxLayers + 1) * 4);\n    const offset = new Uint32Array(propertyArray, 0, 1);\n    const simgas = new Float32Array(propertyArray, 4, maxLayers);\n    simgas.set((0,_utils_general__WEBPACK_IMPORTED_MODULE_2__/* .mapRange */ ._b)(maxLayers, (i) => {\n        const w = width >> i;\n        return Math.acos(1 - minStepDistance(Math.min(w, steps), w)) / 3;\n    }));\n    const propertyBuffer = (0,_utils_data_copy__WEBPACK_IMPORTED_MODULE_0__/* .createAndCopyBuffer */ .Lr)(propertyArray, GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST, device);\n    await new Promise((resolve) => {\n        let mipLevel = 0;\n        let mipPasses = 0;\n        let requiredMipDispatches = 0;\n        let currentMipDispatches = 0;\n        let batchDispatches = 0;\n        let bindgroup;\n        async function runPass() {\n            if (currentMipDispatches >= requiredMipDispatches) {\n                mipLevel += 1;\n                currentMipDispatches = 0;\n                mipPasses = 0;\n                if (mipLevel >= mipLevelCount) {\n                    resolve();\n                    return;\n                }\n                const mipPixels = 6 * ((width >> mipLevel) ** 2);\n                requiredMipDispatches = Math.ceil(mipPixels / groups);\n                bindgroup = device.createBindGroup({\n                    layout: bindgroupLayout,\n                    entries: [\n                        {\n                            binding: 0,\n                            resource: mipViews[mipLevel - 1],\n                        },\n                        {\n                            binding: 1,\n                            resource: mipViews[mipLevel],\n                        },\n                        {\n                            binding: 2,\n                            resource: { buffer: propertyBuffer },\n                        },\n                    ],\n                });\n            }\n            offset[0] = currentMipDispatches * groups;\n            device.queue.writeBuffer(propertyBuffer, 0, offset);\n            const passDispatches = Math.min(requiredMipDispatches - currentMipDispatches, maxDispatches - batchDispatches, maxWorkgroups);\n            const passLabel = `${label} mip ${mipLevel}, pass ${mipPasses}`;\n            const encoder = device.createCommandEncoder({ label: passLabel });\n            const pass = encoder.beginComputePass({ label: passLabel });\n            pass.setPipeline(pipeline);\n            pass.setBindGroup(0, bindgroup);\n            pass.dispatchWorkgroups(passDispatches, 1, 1);\n            pass.end();\n            device.queue.submit([encoder.finish()]);\n            currentMipDispatches += passDispatches;\n            batchDispatches += passDispatches;\n            mipPasses += 1;\n            if (delayWork != null && batchDispatches >= maxDispatches) {\n                batchDispatches = 0;\n                await device.queue.onSubmittedWorkDone();\n                delayWork(runPass);\n            }\n            else {\n                void runPass();\n            }\n        }\n        void runPass();\n    });\n    return gaussianPyramid;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7638\n")},8545:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ getSkyboxOptions)\n/* harmony export */ });\n/* unused harmony export hdrs */\n/* harmony import */ var _utils_texture_importing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2253);\n/* harmony import */ var _utils_texture_processing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7335);\n/* harmony import */ var _property_listener__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1058);\n\n\n\nconst hdrPromises = ["Cannon_Exterior","Colorful_Studio","Wide_Street","doge2","ennis","field","footprint_court","helipad","neutral","papermill","pisa"].map(async (path) => {\n    const module = await __webpack_require__(1775)(`./${path}.hdr`);\n    if (typeof module !== \'object\' || module == null || !(\'default\' in module))\n        return undefined;\n    if (typeof module.default !== \'string\')\n        return undefined;\n    return [path, module.default];\n});\nconst hdrs = Object.fromEntries((await Promise.all(hdrPromises)).filter((val) => val != null));\nasync function processSkybox(device, file) {\n    let buffer;\n    if (file instanceof ArrayBuffer) {\n        buffer = file;\n    }\n    else if (file instanceof File) {\n        buffer = await file.arrayBuffer();\n    }\n    else {\n        const res = await fetch(file);\n        buffer = await res.arrayBuffer();\n    }\n    const hdr = (0,_utils_texture_importing__WEBPACK_IMPORTED_MODULE_0__/* .parseHDR */ .y)(buffer);\n    return (0,_utils_texture_processing__WEBPACK_IMPORTED_MODULE_1__/* .equirectangularToCubemap */ .l3)(device, hdr, {\n        format: \'rgba16float\',\n        usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.COPY_SRC,\n    });\n}\nfunction getSkyboxOptions(target) {\n    return {\n        [_property_listener__WEBPACK_IMPORTED_MODULE_2__/* .ListenerSyms */ .t.$type]: \'file\',\n        [_property_listener__WEBPACK_IMPORTED_MODULE_2__/* .ListenerSyms */ .t.$callback]: async (val, key) => {\n            if (key !== \'value\' || val == null)\n                return;\n            if (typeof val === \'string\' || val instanceof File) {\n                const texture = await processSkybox(target.device, val);\n                const res = target.setSkybox(texture);\n                if (res instanceof Promise)\n                    await res;\n            }\n        },\n        accept: \'.hdr\',\n        selection: {\n            value: Object.keys(hdrs)[0],\n            initialValues: hdrs,\n        },\n        process: (file) => file,\n    };\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QztBQUNOLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYnVudC1wb3J0Zm9saW8vLi9zcmMvc2FtcGxlcy9zZXR0aW5ncy9za3lib3gtb3B0aW9ucy50cz9lMTAyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhcnNlSERSIH0gZnJvbSAnLi4vLi4vdXRpbHMvdGV4dHVyZS1pbXBvcnRpbmcnO1xuaW1wb3J0IHsgZXF1aXJlY3Rhbmd1bGFyVG9DdWJlbWFwIH0gZnJvbSAnLi4vLi4vdXRpbHMvdGV4dHVyZS1wcm9jZXNzaW5nJztcbmltcG9ydCB7IExpc3RlbmVyU3ltcyB9IGZyb20gJy4vcHJvcGVydHktbGlzdGVuZXInO1xuXG5jb25zdCBoZHJQcm9taXNlcyA9IEhEUlNfXy5tYXAoXG4gICAgYXN5bmMgKHBhdGg6IHN0cmluZykgPT4ge1xuICAgICAgICBjb25zdCBtb2R1bGUgPSBhd2FpdCBpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqL2BwdWJsaWMvZ2xURi1TYW1wbGUtRW52aXJvbm1lbnRzLyR7cGF0aH0uaGRyYCkgYXMgdW5rbm93bjtcbiAgICAgICAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICdvYmplY3QnIHx8IG1vZHVsZSA9PSBudWxsIHx8ICEoJ2RlZmF1bHQnIGluIG1vZHVsZSkpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIGlmICh0eXBlb2YgbW9kdWxlLmRlZmF1bHQgIT09ICdzdHJpbmcnKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gW3BhdGgsIG1vZHVsZS5kZWZhdWx0XTtcbiAgICB9KTtcblxuZXhwb3J0IGNvbnN0IGhkcnMgPSBPYmplY3QuZnJvbUVudHJpZXMoKGF3YWl0IFByb21pc2UuYWxsKGhkclByb21pc2VzKSkuZmlsdGVyKCh2YWwpID0+IHZhbCAhPSBudWxsKSBhcyBbc3RyaW5nLCBzdHJpbmddW10pIGFzIFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG5cbmFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NTa3lib3goZGV2aWNlOiBHUFVEZXZpY2UsIGZpbGU6IHN0cmluZyB8IFVSTCB8IEZpbGUgfCBBcnJheUJ1ZmZlcikge1xuICAgIGxldCBidWZmZXI6IEFycmF5QnVmZmVyO1xuICAgIGlmIChmaWxlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgYnVmZmVyID0gZmlsZTtcbiAgICB9IGVsc2UgaWYgKGZpbGUgaW5zdGFuY2VvZiBGaWxlKSB7XG4gICAgICAgIGJ1ZmZlciA9IGF3YWl0IGZpbGUuYXJyYXlCdWZmZXIoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChmaWxlKTtcbiAgICAgICAgYnVmZmVyID0gYXdhaXQgcmVzLmFycmF5QnVmZmVyKCk7XG4gICAgfVxuXG4gICAgY29uc3QgaGRyID0gcGFyc2VIRFIoYnVmZmVyKTtcblxuICAgIHJldHVybiBlcXVpcmVjdGFuZ3VsYXJUb0N1YmVtYXAoXG4gICAgICAgIGRldmljZSxcbiAgICAgICAgaGRyLFxuICAgICAgICB7XG4gICAgICAgICAgICBmb3JtYXQ6ICdyZ2JhMTZmbG9hdCcsXG4gICAgICAgICAgICB1c2FnZTogR1BVVGV4dHVyZVVzYWdlLlRFWFRVUkVfQklORElORyB8IEdQVVRleHR1cmVVc2FnZS5TVE9SQUdFX0JJTkRJTkcgfCBHUFVUZXh0dXJlVXNhZ2UuQ09QWV9TUkMsXG4gICAgICAgIH0sXG4gICAgKTtcbn1cblxuZXhwb3J0IHR5cGUgU2t5Ym94VGFyZ2V0ID0geyBkZXZpY2U6IEdQVURldmljZSwgc2V0U2t5Ym94OiAocmVzb3VyY2U6IEdQVVRleHR1cmUpID0+IHVua25vd24gfTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U2t5Ym94T3B0aW9ucyh0YXJnZXQ6IFNreWJveFRhcmdldCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIFtMaXN0ZW5lclN5bXMuJHR5cGVdOiAnZmlsZScgYXMgY29uc3QsXG4gICAgICAgIFtMaXN0ZW5lclN5bXMuJGNhbGxiYWNrXTogYXN5bmMgKHZhbDogdW5rbm93biwga2V5OiBQcm9wZXJ0eUtleSkgPT4ge1xuICAgICAgICAgICAgaWYgKGtleSAhPT0gJ3ZhbHVlJyB8fCB2YWwgPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnIHx8IHZhbCBpbnN0YW5jZW9mIEZpbGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0dXJlID0gYXdhaXQgcHJvY2Vzc1NreWJveCh0YXJnZXQuZGV2aWNlLCB2YWwpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IHRhcmdldC5zZXRTa3lib3godGV4dHVyZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlcyBpbnN0YW5jZW9mIFByb21pc2UpIGF3YWl0IHJlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYWNjZXB0OiAnLmhkcicsXG4gICAgICAgIHNlbGVjdGlvbjoge1xuICAgICAgICAgICAgdmFsdWU6IE9iamVjdC5rZXlzKGhkcnMpWzBdLFxuICAgICAgICAgICAgaW5pdGlhbFZhbHVlczogaGRycyxcbiAgICAgICAgfSxcbiAgICAgICAgcHJvY2VzczogKGZpbGU6IEZpbGUpID0+IGZpbGUsXG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8545\n')},7959:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/* wgsl */`\r\n    struct VertOut {\r\n        @builtin(position) pos: vec4f,\r\n        @location(0) uv: vec2f,\r\n    }\r\n\r\n    @vertex\r\n    fn vs(@builtin(vertex_index) idx: u32) -> VertOut {\r\n        const pos = array(\r\n            vec2f(-1,  3),\r\n            vec2f(3, -1),\r\n            vec2f(-1, -1),\r\n        );\r\n        var res: VertOut;\r\n        res.pos = vec4f(pos[idx], 0.0, 1.0);\r\n        res.uv = pos[idx] * vec2f(0.5, -0.5) + 0.5;\r\n        return res;\r\n    }\r\n`);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzk1OS5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQSwyRUFBeUI7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQWtCeEIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NidW50LXBvcnRmb2xpby8uL3NyYy9zaGFkZXJzL2JsaXQtdmVydC5zaGFkZXIudHM/YTUxOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAvKiB3Z3NsICovYFxyXG4gICAgc3RydWN0IFZlcnRPdXQge1xyXG4gICAgICAgIEBidWlsdGluKHBvc2l0aW9uKSBwb3M6IHZlYzRmLFxyXG4gICAgICAgIEBsb2NhdGlvbigwKSB1djogdmVjMmYsXHJcbiAgICB9XHJcblxyXG4gICAgQHZlcnRleFxyXG4gICAgZm4gdnMoQGJ1aWx0aW4odmVydGV4X2luZGV4KSBpZHg6IHUzMikgLT4gVmVydE91dCB7XHJcbiAgICAgICAgY29uc3QgcG9zID0gYXJyYXkoXHJcbiAgICAgICAgICAgIHZlYzJmKC0xLCAgMyksXHJcbiAgICAgICAgICAgIHZlYzJmKDMsIC0xKSxcclxuICAgICAgICAgICAgdmVjMmYoLTEsIC0xKSxcclxuICAgICAgICApO1xyXG4gICAgICAgIHZhciByZXM6IFZlcnRPdXQ7XHJcbiAgICAgICAgcmVzLnBvcyA9IHZlYzRmKHBvc1tpZHhdLCAwLjAsIDEuMCk7XHJcbiAgICAgICAgcmVzLnV2ID0gcG9zW2lkeF0gKiB2ZWMyZigwLjUsIC0wLjUpICsgMC41O1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcbmA7XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7959\n")},423:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   V: () => (/* binding */ toWorldDir),\n/* harmony export */   X: () => (/* binding */ cubemapSampleConversions)\n/* harmony export */ });\nconst toWorldDir = /* wgsl */ `\n    fn toWorldDir(coord: vec3u, size: u32) -> vec3f {\n        let uv = (2.0 / f32(size)) * (vec2f(coord.xy) + 0.5) - 1.0;\n\n        var pos: vec3f;\n        switch (coord.z) {\n            case 0  { pos = vec3(  1.0, -uv.y, -uv.x); }\n            case 1  { pos = vec3( -1.0, -uv.y,  uv.x); }\n            case 2  { pos = vec3( uv.x,   1.0,  uv.y); }\n            case 3  { pos = vec3( uv.x,  -1.0, -uv.y); }\n            case 4  { pos = vec3( uv.x, -uv.y,   1.0); }\n            default { pos = vec3(-uv.x, -uv.y,  -1.0); }\n        }\n\n        return normalize(pos);\n    }\n\n    fn toWorldDirF32(coord: vec2f, face: u32) -> vec3f {\n        let uv = 2.0 * coord - 1.0;\n\n        var pos: vec3f;\n        switch (face) {\n            case 0  { pos = vec3(  1.0, -uv.y, -uv.x); }\n            case 1  { pos = vec3( -1.0, -uv.y,  uv.x); }\n            case 2  { pos = vec3( uv.x,   1.0,  uv.y); }\n            case 3  { pos = vec3( uv.x,  -1.0, -uv.y); }\n            case 4  { pos = vec3( uv.x, -uv.y,   1.0); }\n            default { pos = vec3(-uv.x, -uv.y,  -1.0); }\n        }\n\n        return normalize(pos);\n    }\n`;\n/**\n *  WGSL functions for sampling across adjacent faces of a cubemap\n */\nconst cubemapSampleConversions = /* wgsl */ `\n    const INVALID_FACE = 6;\n    const INVALID_IDX = 4294967295u; // max u32\n\n    fn cubeSampleCoord(coord: vec3i, w: u32) -> vec3u {\n        // a flattened matrix of destination faces based on\n        // starting face and direction\n        const dfaces = array(\n            //                               I  Up Down Left Right Invalid\n            0, 2, 3, 4, 5, INVALID_FACE, // +X  +Y   -Y   +Z   -Z   \n            1, 2, 3, 5, 4, INVALID_FACE, // -X  +Y   -Y   -Z   +Z \n            2, 5, 4, 1, 0, INVALID_FACE, // +Y  -Z   +Z   -X   +X \n            3, 4, 5, 1, 0, INVALID_FACE, // -Y  +Z   -Z   -X   +X \n            4, 2, 3, 1, 0, INVALID_FACE, // +Z  +Y   -Y   -X   +X \n            5, 2, 3, 0, 1, INVALID_FACE, // -Z  +Y   -Y   +X   -X \n        );\n\n        // a flattened matrix in the same form as dfaces\n        // giving the index of the dmat array containing \n        // the transformation from the starting face to \n        // the destination face\n        const dindices = array(\n            0, 1,  2,  3,  4,  0,\n            0, 5,  6,  3,  4,  0,\n            0, 7,  8,  9,  10, 0,\n            0, 11, 12, 13, 14, 0,\n            0, 11, 8,  3,  4,  0,\n            0, 7,  12, 3,  4,  0,\n        );\n\n        // 2x4 matrices transforming a coordinate vector <u, v, w, 1>\n        // from one face to another\n        const dmats = array(\n            array(// 0\n                vec4(1, 0, 0, 0),   // u = u\n                vec4(0, 1, 0, 0),   // v = v\n            ),\n            array(// 1\n                vec4(0, 1, 1, 0),   // u = v + w\n                vec4(-1, 0, 1, -1), // v = w - u - 1\n            ),\n            array(// 2\n                vec4(0, -1, 2, -1), // u = 2w - v - 1\n                vec4(1, 0, 0, 0),   // v = u\n            ),\n            array(// 3\n                vec4(1, 0, 1, 0),   // u = u + w\n                vec4(0, 1, 0, 0),   // v = v\n            ),\n            array(// 4\n                vec4(1, 0, -1, 0),  // u = u - w\n                vec4(0, 1, 0, 0),   // v = v\n            ),\n            array(// 5\n                vec4(0, -1, 0, -1), // u = -v - 1\n                vec4(1, 0, 0, 0),   // v = u\n            ),\n            array(// 6\n                vec4(0, 1, -1, 0),  // u = v - w\n                vec4(-1, 0, 1, -1), // v = w - u - 1\n            ),\n            array(// 7\n                vec4(-1, 0, 1, -1), // u = w - u - 1\n                vec4(0, -1, 0, -1), // v = -v - 1\n            ),\n            array(// 8\n                vec4(1, 0, 0, 0),   // u = u\n                vec4(0, 1, -1, 0),  // v = v - w\n            ),\n            array(// 9\n                vec4(0, 1, 0, 0),   // u = v\n                vec4(-1, 0, 0, -1), // v = -u - 1\n            ),\n            array(// 10\n                vec4(0, -1, 1, -1), // u = w - v - 1\n                vec4(1, 0, -1, 0),  // v = u - w\n            ),\n            array(// 11\n                vec4(1, 0, 0, 0),   // u = u\n                vec4(0, 1, 1, 0),   // v = v + w\n            ),\n            array(// 12\n                vec4(-1, 0, 1, -1), // u = w - u - 1\n                vec4(0, -1, 2, -1), // v = 2w - v - 1\n            ),\n            array(// 13\n                vec4(0, -1, 1, -1), // u = w - v - 1\n                vec4(1, 0, 1, 0),   // v = u + w\n            ),\n            array(// 14\n                vec4(0, 1, 0, 0),   // u = v\n                vec4(-1, 0, 2, -1), // v = 2w - u - 1\n            ),\n        );\n\n        let iw = i32(w);\n\n        var dir = 0;\n        if (\n            coord.y >= iw * 2 - 1 \n            || coord.y <= -iw \n            || coord.x >= iw * 2 - 1 \n            || coord.x <= -iw\n        ) {\n            dir = 5;\n        } else {\n            if (coord.y < 0) {\n                dir = 1;\n            } else if (coord.y >= iw) {\n                dir = 2;\n            }\n            if (coord.x < 0) {\n                dir = select(5, 3, dir == 0);\n            } else if (coord.x >= iw) {\n                dir = select(5, 4, dir == 0);\n            }\n        }\n\n        let idx = coord.z * 6 + dir;\n        let samp = vec4(coord.xy, iw, 1);\n        let dmat = dmats[dindices[idx]];\n        return vec3u(vec3(dot(dmat[0], samp), dot(dmat[1], samp), dfaces[idx]));\n    }\n\n    fn cubeCoordToIdx(coord: vec3u, w: u32) -> u32 {\n        return coord.x + coord.y * w + coord.z * w * w;\n    }\n\n    fn cubeIdxToCoord(idx: u32, w: u32) -> vec3u {\n        let w2 = w * w;\n        let fidx = idx % w2;\n        return vec3u(fidx % w, fidx / w, idx / w2);\n    }\n\n    fn cubeSampleIdx(uvf: vec3i, w: u32) -> u32 {\n        let coord = cubeSampleCoord(uvf, w);\n        return select(\n            cubeCoordToIdx(coord, w), \n            INVALID_IDX, \n            coord.z == INVALID_FACE,\n        );\n    }\n`;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///423\n")},4955:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Q: () => (/* binding */ toFloat16Bytes)\n/* harmony export */ });\nconst { baseTable, shiftTable } = (() => {\n    const baseTable = new Uint32Array(256);\n    const shiftTable = new Uint32Array(256);\n    for (let i = 0; i < 255; ++i) {\n        const e = i - 127;\n        if (e < -27) { // very small number (0, -0)\n            baseTable[i] = 0x0000;\n            shiftTable[i] = 24;\n        }\n        else if (e < -14) { // small number (denorm)\n            baseTable[i] = 0x0400 >> (-e - 14);\n            shiftTable[i] = -e - 1;\n        }\n        else if (e <= 15) { // normal number\n            baseTable[i] = (e + 15) << 10;\n            shiftTable[i] = 13;\n        }\n        else { // e < 128, large number (Infinity, -Infinity)\n            baseTable[i] = 0x7c00;\n            shiftTable[i] = 24;\n        }\n    }\n    // e == 128, stay (NaN, Infinity, -Infinity)\n    baseTable[255] = 0x7c00;\n    shiftTable[255] = 13;\n    return { baseTable, shiftTable };\n})();\nconst conversionBuffer = new ArrayBuffer(4);\nconst floatView = new Float32Array(conversionBuffer);\nconst uintView = new Uint32Array(conversionBuffer);\nfunction toFloat16Bytes(val) {\n    floatView[0] = val;\n    const f = uintView[0];\n    const e = (f >> 23) & 0x1ff;\n    const idx = e & 0xff;\n    return baseTable[idx] + ((f & 0x007fffff) >> shiftTable[idx]) + ((e & 0x100) << 7);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDk1NS5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxNQUFNLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFO0lBQ3BDLE1BQU0sU0FBUyxHQUFHLElBQUksV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sVUFBVSxHQUFHLElBQUksV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXhDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUMzQixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyw0QkFBNEI7WUFDdkMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztZQUN0QixVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLENBQUM7YUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsd0JBQXdCO1lBQzFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUNuQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLENBQUM7YUFBTSxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLGdCQUFnQjtZQUNsQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzlCLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDdkIsQ0FBQzthQUFNLENBQUMsQ0FBQyw4Q0FBOEM7WUFDbkQsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztZQUN0QixVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLENBQUM7SUFDTCxDQUFDO0lBRUQsNENBQTRDO0lBQzVDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUM7SUFDeEIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUVyQixPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxDQUFDO0FBQ3JDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFFTCxNQUFNLGdCQUFnQixHQUFHLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVDLE1BQU0sU0FBUyxHQUFHLElBQUksWUFBWSxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDckQsTUFBTSxRQUFRLEdBQUcsSUFBSSxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUU1QyxTQUFTLGNBQWMsQ0FBQyxHQUFXO0lBQ3RDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDbkIsTUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUM1QixNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQ3JCLE9BQU8sU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUN2RixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2J1bnQtcG9ydGZvbGlvLy4vc3JjL3V0aWxzL2RhdGEtY29udmVyc2lvbi50cz82MGMxIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgYmFzZVRhYmxlLCBzaGlmdFRhYmxlIH0gPSAoKCkgPT4ge1xuICAgIGNvbnN0IGJhc2VUYWJsZSA9IG5ldyBVaW50MzJBcnJheSgyNTYpO1xuICAgIGNvbnN0IHNoaWZ0VGFibGUgPSBuZXcgVWludDMyQXJyYXkoMjU2KTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjU1OyArK2kpIHtcbiAgICAgICAgY29uc3QgZSA9IGkgLSAxMjc7XG4gICAgICAgIGlmIChlIDwgLTI3KSB7IC8vIHZlcnkgc21hbGwgbnVtYmVyICgwLCAtMClcbiAgICAgICAgICAgIGJhc2VUYWJsZVtpXSA9IDB4MDAwMDtcbiAgICAgICAgICAgIHNoaWZ0VGFibGVbaV0gPSAyNDtcbiAgICAgICAgfSBlbHNlIGlmIChlIDwgLTE0KSB7IC8vIHNtYWxsIG51bWJlciAoZGVub3JtKVxuICAgICAgICAgICAgYmFzZVRhYmxlW2ldID0gMHgwNDAwID4+ICgtZSAtIDE0KTtcbiAgICAgICAgICAgIHNoaWZ0VGFibGVbaV0gPSAtZSAtIDE7XG4gICAgICAgIH0gZWxzZSBpZiAoZSA8PSAxNSkgeyAvLyBub3JtYWwgbnVtYmVyXG4gICAgICAgICAgICBiYXNlVGFibGVbaV0gPSAoZSArIDE1KSA8PCAxMDtcbiAgICAgICAgICAgIHNoaWZ0VGFibGVbaV0gPSAxMztcbiAgICAgICAgfSBlbHNlIHsgLy8gZSA8IDEyOCwgbGFyZ2UgbnVtYmVyIChJbmZpbml0eSwgLUluZmluaXR5KVxuICAgICAgICAgICAgYmFzZVRhYmxlW2ldID0gMHg3YzAwO1xuICAgICAgICAgICAgc2hpZnRUYWJsZVtpXSA9IDI0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZSA9PSAxMjgsIHN0YXkgKE5hTiwgSW5maW5pdHksIC1JbmZpbml0eSlcbiAgICBiYXNlVGFibGVbMjU1XSA9IDB4N2MwMDtcbiAgICBzaGlmdFRhYmxlWzI1NV0gPSAxMztcblxuICAgIHJldHVybiB7IGJhc2VUYWJsZSwgc2hpZnRUYWJsZSB9O1xufSkoKTtcblxuY29uc3QgY29udmVyc2lvbkJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcig0KTtcbmNvbnN0IGZsb2F0VmlldyA9IG5ldyBGbG9hdDMyQXJyYXkoY29udmVyc2lvbkJ1ZmZlcik7XG5jb25zdCB1aW50VmlldyA9IG5ldyBVaW50MzJBcnJheShjb252ZXJzaW9uQnVmZmVyKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRvRmxvYXQxNkJ5dGVzKHZhbDogbnVtYmVyKSB7XG4gICAgZmxvYXRWaWV3WzBdID0gdmFsO1xuICAgIGNvbnN0IGYgPSB1aW50Vmlld1swXTtcbiAgICBjb25zdCBlID0gKGYgPj4gMjMpICYgMHgxZmY7XG4gICAgY29uc3QgaWR4ID0gZSAmIDB4ZmY7XG4gICAgcmV0dXJuIGJhc2VUYWJsZVtpZHhdICsgKChmICYgMHgwMDdmZmZmZikgPj4gc2hpZnRUYWJsZVtpZHhdKSArICgoZSAmIDB4MTAwKSA8PCA3KTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4955\n")},1775:(I,g,C)=>{var A={"./Cannon_Exterior.hdr":3881,"./Colorful_Studio.hdr":3190,"./Wide_Street.hdr":8600,"./doge2.hdr":3686,"./ennis.hdr":3868,"./field.hdr":9041,"./footprint_court.hdr":2836,"./helipad.hdr":6086,"./neutral.hdr":392,"./papermill.hdr":5769,"./pisa.hdr":3258};function Q(I){return B(I).then((I=>C.t(I,17)))}function B(I){return Promise.resolve().then((()=>{if(!C.o(A,I)){var g=new Error("Cannot find module '"+I+"'");throw g.code="MODULE_NOT_FOUND",g}return A[I]}))}Q.keys=()=>Object.keys(A),Q.resolve=B,Q.id=1775,I.exports=Q},3881:(I,g,C)=>{"use strict";I.exports=C.p+"e8e26e65e00cffdd970e.hdr"},3190:(I,g,C)=>{"use strict";I.exports=C.p+"b9f39755aa908bfb2421.hdr"},8600:(I,g,C)=>{"use strict";I.exports=C.p+"075acae89a5c36b5208a.hdr"},3686:(I,g,C)=>{"use strict";I.exports=C.p+"1c1e0d0a1ebbdafe15b8.hdr"},3868:(I,g,C)=>{"use strict";I.exports=C.p+"aea4476b72e1d8daf9c4.hdr"},9041:(I,g,C)=>{"use strict";I.exports=C.p+"78ea6b5dbe17a28b9c87.hdr"},2836:(I,g,C)=>{"use strict";I.exports=C.p+"14739bc77ddd78a4449a.hdr"},6086:(I,g,C)=>{"use strict";I.exports=C.p+"5c7adc80a9054278b530.hdr"},392:(I,g,C)=>{"use strict";I.exports=C.p+"e380b86d26bcf2e8902d.hdr"},5769:(I,g,C)=>{"use strict";I.exports=C.p+"b3c4bef6722b5759b9cc.hdr"},3258:(I,g,C)=>{"use strict";I.exports=C.p+"5946f1f10ad1df26357a.hdr"}}]);