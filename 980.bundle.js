"use strict";(self.webpackChunkcbunt_portfolio=self.webpackChunkcbunt_portfolio||[]).push([[980],{992:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _camera_camera__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3048);\n\nconst label = 'global uniforms';\nclass GlobalUniforms {\n    constructor(device) {\n        this.deviceBuffer = device.createBuffer(GlobalUniforms.bufferDescriptor);\n        this.bindGroupLayout = device.createBindGroupLayout(GlobalUniforms.layoutDescriptor);\n        this.bindGroupDescriptor = {\n            label,\n            layout: this.bindGroupLayout,\n            entries: [\n                {\n                    binding: 0,\n                    resource: {\n                        buffer: this.deviceBuffer,\n                        offset: 0,\n                        size: GlobalUniforms.bufferSize,\n                    },\n                },\n            ],\n        };\n        this.bindgroup = device.createBindGroup(this.bindGroupDescriptor);\n    }\n    updateDeviceBuffer(queue, camera) {\n        camera.cacheView();\n        queue.writeBuffer(this.deviceBuffer, 0, camera.buffer);\n    }\n}\nGlobalUniforms.code = (group) => /* wgsl */ `\r\n        struct GlobalUniforms {\r\n            worldToView: mat4x4f,\r\n            viewToClip: mat4x4f,\r\n            worldToClip: mat4x4f,\r\n            inverseWorldToView: mat4x4f,\r\n            inverseViewToClip: mat4x4f,\r\n            inverseWorldToClip: mat4x4f,\r\n        }\r\n\r\n        @group(${group}) @binding(0) var<uniform> globals: GlobalUniforms;\r\n    `;\nGlobalUniforms.bufferSize = _camera_camera__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .A.bufferLength;\nGlobalUniforms.layoutDescriptor = {\n    label,\n    entries: [\n        {\n            binding: 0,\n            buffer: { minBindingSize: GlobalUniforms.bufferSize },\n            visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,\n        },\n    ],\n};\nGlobalUniforms.bufferDescriptor = {\n    label,\n    size: GlobalUniforms.bufferSize,\n    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GlobalUniforms);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTkyLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBcUM7QUFFckMsTUFBTSxLQUFLLEdBQUcsaUJBQWlCLENBQUM7QUFFaEMsTUFBcUIsY0FBYztJQXNDL0IsWUFBWSxNQUFpQjtRQUN6QixJQUFJLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDekUsSUFBSSxDQUFDLGVBQWUsR0FBRyxNQUFNLENBQUMscUJBQXFCLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFckYsSUFBSSxDQUFDLG1CQUFtQixHQUFHO1lBQ3ZCLEtBQUs7WUFDTCxNQUFNLEVBQUUsSUFBSSxDQUFDLGVBQWU7WUFDNUIsT0FBTyxFQUFFO2dCQUNMO29CQUNJLE9BQU8sRUFBRSxDQUFDO29CQUNWLFFBQVEsRUFBRTt3QkFDTixNQUFNLEVBQUUsSUFBSSxDQUFDLFlBQVk7d0JBQ3pCLE1BQU0sRUFBRSxDQUFDO3dCQUNULElBQUksRUFBRSxjQUFjLENBQUMsVUFBVTtxQkFDbEM7aUJBQ0o7YUFDSjtTQUNKLENBQUM7UUFFRixJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVELGtCQUFrQixDQUFDLEtBQWUsRUFBRSxNQUFjO1FBQzlDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNuQixLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzRCxDQUFDOztBQTlEZSxtQkFBSSxHQUFHLENBQUMsS0FBYSxFQUFFLEVBQUUsQ0FBQyxVQUFVOzs7Ozs7Ozs7O2lCQVV2QyxLQUFLO0tBQ2pCLENBQUM7QUFFYyx5QkFBVSxHQUFHLCtEQUFNLENBQUMsWUFBWSxDQUFDO0FBRWpDLCtCQUFnQixHQUFpQztJQUM3RCxLQUFLO0lBQ0wsT0FBTyxFQUFFO1FBQ0w7WUFDSSxPQUFPLEVBQUUsQ0FBQztZQUNWLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxjQUFjLENBQUMsVUFBVSxFQUFFO1lBQ3JELFVBQVUsRUFBRSxjQUFjLENBQUMsTUFBTSxHQUFHLGNBQWMsQ0FBQyxRQUFRO1NBQzlEO0tBQ0o7Q0FDSixDQUFDO0FBRWMsK0JBQWdCLEdBQXdCO0lBQ3BELEtBQUs7SUFDTCxJQUFJLEVBQUUsY0FBYyxDQUFDLFVBQVU7SUFDL0IsS0FBSyxFQUFFLGNBQWMsQ0FBQyxPQUFPLEdBQUcsY0FBYyxDQUFDLFFBQVE7Q0FDMUQsQ0FBQztpRUEvQmUsY0FBYyIsInNvdXJjZXMiOlsid2VicGFjazovL2NidW50LXBvcnRmb2xpby8uL3NyYy9yZW5kZXJpbmcvZ2xvYmFsLXVuaWZvcm1zLnRzPzZlNjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENhbWVyYSBmcm9tICcuL2NhbWVyYS9jYW1lcmEnO1xyXG5cclxuY29uc3QgbGFiZWwgPSAnZ2xvYmFsIHVuaWZvcm1zJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdsb2JhbFVuaWZvcm1zIHtcclxuICAgIHN0YXRpYyByZWFkb25seSBjb2RlID0gKGdyb3VwOiBudW1iZXIpID0+IC8qIHdnc2wgKi9gXHJcbiAgICAgICAgc3RydWN0IEdsb2JhbFVuaWZvcm1zIHtcclxuICAgICAgICAgICAgd29ybGRUb1ZpZXc6IG1hdDR4NGYsXHJcbiAgICAgICAgICAgIHZpZXdUb0NsaXA6IG1hdDR4NGYsXHJcbiAgICAgICAgICAgIHdvcmxkVG9DbGlwOiBtYXQ0eDRmLFxyXG4gICAgICAgICAgICBpbnZlcnNlV29ybGRUb1ZpZXc6IG1hdDR4NGYsXHJcbiAgICAgICAgICAgIGludmVyc2VWaWV3VG9DbGlwOiBtYXQ0eDRmLFxyXG4gICAgICAgICAgICBpbnZlcnNlV29ybGRUb0NsaXA6IG1hdDR4NGYsXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBAZ3JvdXAoJHtncm91cH0pIEBiaW5kaW5nKDApIHZhcjx1bmlmb3JtPiBnbG9iYWxzOiBHbG9iYWxVbmlmb3JtcztcclxuICAgIGA7XHJcblxyXG4gICAgc3RhdGljIHJlYWRvbmx5IGJ1ZmZlclNpemUgPSBDYW1lcmEuYnVmZmVyTGVuZ3RoO1xyXG5cclxuICAgIHN0YXRpYyByZWFkb25seSBsYXlvdXREZXNjcmlwdG9yOiBHUFVCaW5kR3JvdXBMYXlvdXREZXNjcmlwdG9yID0ge1xyXG4gICAgICAgIGxhYmVsLFxyXG4gICAgICAgIGVudHJpZXM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYmluZGluZzogMCxcclxuICAgICAgICAgICAgICAgIGJ1ZmZlcjogeyBtaW5CaW5kaW5nU2l6ZTogR2xvYmFsVW5pZm9ybXMuYnVmZmVyU2l6ZSB9LFxyXG4gICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogR1BVU2hhZGVyU3RhZ2UuVkVSVEVYIHwgR1BVU2hhZGVyU3RhZ2UuRlJBR01FTlQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXSxcclxuICAgIH07XHJcblxyXG4gICAgc3RhdGljIHJlYWRvbmx5IGJ1ZmZlckRlc2NyaXB0b3I6IEdQVUJ1ZmZlckRlc2NyaXB0b3IgPSB7XHJcbiAgICAgICAgbGFiZWwsXHJcbiAgICAgICAgc2l6ZTogR2xvYmFsVW5pZm9ybXMuYnVmZmVyU2l6ZSxcclxuICAgICAgICB1c2FnZTogR1BVQnVmZmVyVXNhZ2UuVU5JRk9STSB8IEdQVUJ1ZmZlclVzYWdlLkNPUFlfRFNULFxyXG4gICAgfTtcclxuXHJcbiAgICBkZXZpY2VCdWZmZXI6IEdQVUJ1ZmZlcjtcclxuICAgIGJpbmRHcm91cExheW91dDogR1BVQmluZEdyb3VwTGF5b3V0O1xyXG4gICAgYmluZEdyb3VwRGVzY3JpcHRvciE6IEdQVUJpbmRHcm91cERlc2NyaXB0b3I7XHJcbiAgICBiaW5kZ3JvdXAhOiBHUFVCaW5kR3JvdXA7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZGV2aWNlOiBHUFVEZXZpY2UpIHtcclxuICAgICAgICB0aGlzLmRldmljZUJ1ZmZlciA9IGRldmljZS5jcmVhdGVCdWZmZXIoR2xvYmFsVW5pZm9ybXMuYnVmZmVyRGVzY3JpcHRvcik7XHJcbiAgICAgICAgdGhpcy5iaW5kR3JvdXBMYXlvdXQgPSBkZXZpY2UuY3JlYXRlQmluZEdyb3VwTGF5b3V0KEdsb2JhbFVuaWZvcm1zLmxheW91dERlc2NyaXB0b3IpO1xyXG5cclxuICAgICAgICB0aGlzLmJpbmRHcm91cERlc2NyaXB0b3IgPSB7XHJcbiAgICAgICAgICAgIGxhYmVsLFxyXG4gICAgICAgICAgICBsYXlvdXQ6IHRoaXMuYmluZEdyb3VwTGF5b3V0LFxyXG4gICAgICAgICAgICBlbnRyaWVzOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmluZGluZzogMCxcclxuICAgICAgICAgICAgICAgICAgICByZXNvdXJjZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXI6IHRoaXMuZGV2aWNlQnVmZmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IEdsb2JhbFVuaWZvcm1zLmJ1ZmZlclNpemUsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5iaW5kZ3JvdXAgPSBkZXZpY2UuY3JlYXRlQmluZEdyb3VwKHRoaXMuYmluZEdyb3VwRGVzY3JpcHRvcik7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlRGV2aWNlQnVmZmVyKHF1ZXVlOiBHUFVRdWV1ZSwgY2FtZXJhOiBDYW1lcmEpIHtcclxuICAgICAgICBjYW1lcmEuY2FjaGVWaWV3KCk7XHJcbiAgICAgICAgcXVldWUud3JpdGVCdWZmZXIodGhpcy5kZXZpY2VCdWZmZXIsIDAsIGNhbWVyYS5idWZmZXIpO1xyXG4gICAgfVxyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///992\n")},3980:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ renderer)\n});\n\n// EXTERNAL MODULE: ./src/rendering/camera/camera.ts\nvar camera = __webpack_require__(3048);\n// EXTERNAL MODULE: ./src/rendering/global-uniforms.ts\nvar global_uniforms = __webpack_require__(992);\n// EXTERNAL MODULE: ./src/shaders/blit-vert.shader.ts\nvar blit_vert_shader = __webpack_require__(157);\n;// ./src/rendering/tonemap-pass.ts\n\nconst label = 'tonemap pass';\nclass TonemapPass {\n    constructor(device, format) {\n        this.device = device;\n        this.colorAttachment = {\n            loadOp: 'load',\n            storeOp: 'store',\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            view: undefined,\n        };\n        this.passDescriptor = {\n            label,\n            colorAttachments: [this.colorAttachment],\n        };\n        this.renderTarget = { format };\n        this.bindgroupLayout = device.createBindGroupLayout(TonemapPass.bindGroupLayoutDescriptor);\n        const module = device.createShaderModule({ label, code: TonemapPass.code });\n        this.pipelineDescriptor = {\n            label,\n            layout: device.createPipelineLayout({\n                label,\n                bindGroupLayouts: [this.bindgroupLayout],\n            }),\n            vertex: {\n                module,\n                entryPoint: 'vs',\n            },\n            fragment: {\n                module,\n                entryPoint: 'fs',\n                targets: [this.renderTarget],\n            },\n        };\n        this.pipeline = device.createRenderPipeline(this.pipelineDescriptor);\n    }\n    updateInput(input) {\n        this.bindgroup = this.device.createBindGroup({\n            label,\n            layout: this.bindgroupLayout,\n            entries: [{\n                    binding: 0,\n                    resource: input,\n                }],\n        });\n    }\n    render(encoder, output) {\n        if (this.bindgroup == null)\n            return;\n        if (this.renderTarget.format !== output.format) {\n            this.renderTarget.format = output.format;\n            this.pipeline = this.device.createRenderPipeline(this.pipelineDescriptor);\n        }\n        this.colorAttachment.view = output.createView({ dimension: '2d' });\n        const pass = encoder.beginRenderPass(this.passDescriptor);\n        pass.setPipeline(this.pipeline);\n        pass.setBindGroup(0, this.bindgroup);\n        pass.draw(3);\n        pass.end();\n    }\n}\nTonemapPass.code = `\r\n        @group(0) @binding(0) var colorTexture: texture_2d<f32>;\r\n\r\n        ${blit_vert_shader/* default */.A}\r\n\r\n        fn fitRRTAndODT(color: vec3f) -> vec3f {\r\n            let a = color * (color + 0.0245786) - 0.000090537;\r\n            let b = color * (0.983729 * color + 0.4329510) + 0.238081;\r\n            return a / b;\r\n        }\r\n\r\n        fn aces_tone_map(hdr: vec3f) -> vec3f {\r\n            const inputMat = mat3x3(\r\n                0.59719, 0.07600, 0.02840,\r\n                0.35458, 0.90834, 0.13383,\r\n                0.04823, 0.01566, 0.83777,\r\n            );\r\n            const outputMat = mat3x3(\r\n                1.60475, -0.10208, -0.00327,\r\n                -0.53108, 1.10813, -0.07276,\r\n                -0.07367, -0.00605, 1.07602,\r\n            );\r\n            const boost = 1.0 / 0.6;\r\n\r\n            var color = hdr * boost;\r\n            color = inputMat * color;\r\n            color = fitRRTAndODT(color);\r\n            color = outputMat * color;\r\n            return saturate(color);\r\n        }\r\n\r\n        fn linear_to_srgb(color: vec3f) -> vec3f {\r\n            return pow(color, vec3(1.0/2.2));\r\n        }\r\n\r\n        @fragment\r\n        fn fs(@builtin(position) pos: vec4f) -> @location(0) vec4f {\r\n            let uv = vec2<i32>(floor(pos.xy));\r\n\r\n            var color = textureLoad(colorTexture, uv, 0).rgb;\r\n            color = aces_tone_map(color);\r\n            color = linear_to_srgb(color);\r\n            return vec4f(color, 1.0);\r\n        }\r\n    `;\nTonemapPass.bindGroupLayoutDescriptor = {\n    label,\n    entries: [{\n            binding: 0,\n            texture: { sampleType: 'float', viewDimension: '2d' },\n            visibility: GPUShaderStage.FRAGMENT,\n        }],\n};\n/* harmony default export */ const tonemap_pass = (TonemapPass);\n\n;// ./src/rendering/skybox-pass.ts\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _SkyboxPass_instances, _SkyboxPass_skyTexture, _SkyboxPass_depthTexture, _SkyboxPass_targetFormat, _SkyboxPass_useNearestSample, _SkyboxPass_updateBindgroup;\n\nconst skybox_pass_label = 'skybox pass';\nclass SkyboxPass {\n    get mipLevel() { return this.uniformArray[0]; }\n    set mipLevel(val) {\n        if (val === this.uniformArray[0])\n            return;\n        this.uniformArray[0] = val;\n        this.device.queue.writeBuffer(this.uniformBuffer, 0, this.uniformArray, 0, 1);\n    }\n    get useNearestSample() { return __classPrivateFieldGet(this, _SkyboxPass_useNearestSample, \"f\"); }\n    set useNearestSample(val) {\n        if (val === __classPrivateFieldGet(this, _SkyboxPass_useNearestSample, \"f\"))\n            return;\n        __classPrivateFieldSet(this, _SkyboxPass_useNearestSample, val, \"f\");\n        __classPrivateFieldGet(this, _SkyboxPass_instances, \"m\", _SkyboxPass_updateBindgroup).call(this);\n    }\n    get targetFormat() { return __classPrivateFieldGet(this, _SkyboxPass_targetFormat, \"f\"); }\n    set targetFormat(format) {\n        if (format === __classPrivateFieldGet(this, _SkyboxPass_targetFormat, \"f\"))\n            return;\n        __classPrivateFieldSet(this, _SkyboxPass_targetFormat, format, \"f\");\n        this.pipeline = this.device.createRenderPipeline({\n            label: skybox_pass_label,\n            layout: this.pipelineLayout,\n            vertex: {\n                entryPoint: 'vs',\n                module: this.shader,\n            },\n            fragment: {\n                entryPoint: 'fs',\n                targets: [{ format }],\n                module: this.shader,\n            },\n        });\n    }\n    set skyTexture(skybox) {\n        if (skybox === __classPrivateFieldGet(this, _SkyboxPass_skyTexture, \"f\"))\n            return;\n        __classPrivateFieldSet(this, _SkyboxPass_skyTexture, skybox, \"f\");\n        __classPrivateFieldGet(this, _SkyboxPass_instances, \"m\", _SkyboxPass_updateBindgroup).call(this);\n    }\n    set depthTexture(depthTexture) {\n        if (depthTexture === __classPrivateFieldGet(this, _SkyboxPass_depthTexture, \"f\"))\n            return;\n        __classPrivateFieldSet(this, _SkyboxPass_depthTexture, depthTexture, \"f\");\n        __classPrivateFieldGet(this, _SkyboxPass_instances, \"m\", _SkyboxPass_updateBindgroup).call(this);\n    }\n    constructor(device, globals, targetFormat, skybox) {\n        _SkyboxPass_instances.add(this);\n        this.device = device;\n        this.globals = globals;\n        this.uniformArray = new Float32Array(8);\n        _SkyboxPass_skyTexture.set(this, void 0);\n        _SkyboxPass_depthTexture.set(this, void 0);\n        _SkyboxPass_targetFormat.set(this, void 0);\n        _SkyboxPass_useNearestSample.set(this, false);\n        this.target = {\n            clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            view: undefined,\n        };\n        this.passDescriptor = { colorAttachments: [this.target] };\n        this.bindgroupLayout = device.createBindGroupLayout({\n            label: skybox_pass_label,\n            entries: [\n                {\n                    binding: 0,\n                    texture: { viewDimension: 'cube' },\n                    visibility: GPUShaderStage.FRAGMENT | GPUShaderStage.VERTEX,\n                },\n                {\n                    binding: 1,\n                    texture: {\n                        viewDimension: '2d',\n                        sampleType: 'depth',\n                    },\n                    visibility: GPUShaderStage.FRAGMENT,\n                },\n                {\n                    binding: 2,\n                    visibility: GPUShaderStage.FRAGMENT,\n                    sampler: {},\n                },\n                {\n                    binding: 3,\n                    visibility: GPUShaderStage.VERTEX,\n                    buffer: { type: 'uniform' },\n                },\n            ],\n        });\n        this.linearSampler = device.createSampler({\n            minFilter: 'linear',\n            magFilter: 'linear',\n            mipmapFilter: 'linear',\n        });\n        this.nearestSampler = device.createSampler({\n            minFilter: 'nearest',\n            magFilter: 'nearest',\n            mipmapFilter: 'nearest',\n        });\n        this.shader = device.createShaderModule({\n            code: SkyboxPass.code,\n            label: skybox_pass_label,\n        });\n        this.pipelineLayout = device.createPipelineLayout({\n            label: skybox_pass_label,\n            bindGroupLayouts: [\n                globals.bindGroupLayout,\n                this.bindgroupLayout,\n            ],\n        });\n        this.uniformBuffer = device.createBuffer({\n            label: skybox_pass_label,\n            size: 32,\n            usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM,\n        });\n        this.targetFormat = targetFormat;\n        if (skybox != null)\n            this.skyTexture = skybox;\n    }\n    render(pass) {\n        if (this.textureBindgroup == null || this.pipeline == null)\n            return false;\n        pass.setPipeline(this.pipeline);\n        pass.setBindGroup(0, this.globals.bindgroup);\n        pass.setBindGroup(1, this.textureBindgroup);\n        pass.draw(3);\n        return true;\n    }\n}\n_SkyboxPass_skyTexture = new WeakMap(), _SkyboxPass_depthTexture = new WeakMap(), _SkyboxPass_targetFormat = new WeakMap(), _SkyboxPass_useNearestSample = new WeakMap(), _SkyboxPass_instances = new WeakSet(), _SkyboxPass_updateBindgroup = function _SkyboxPass_updateBindgroup() {\n    if (__classPrivateFieldGet(this, _SkyboxPass_skyTexture, \"f\") == null || __classPrivateFieldGet(this, _SkyboxPass_depthTexture, \"f\") == null)\n        return;\n    this.textureBindgroup = this.device.createBindGroup({\n        label: skybox_pass_label,\n        layout: this.bindgroupLayout,\n        entries: [\n            {\n                binding: 0,\n                resource: __classPrivateFieldGet(this, _SkyboxPass_skyTexture, \"f\"),\n            },\n            {\n                binding: 1,\n                resource: __classPrivateFieldGet(this, _SkyboxPass_depthTexture, \"f\"),\n            },\n            {\n                binding: 2,\n                resource: this.useNearestSample\n                    ? this.nearestSampler\n                    : this.linearSampler,\n            },\n            {\n                binding: 3,\n                resource: { buffer: this.uniformBuffer },\n            },\n        ],\n    });\n};\nSkyboxPass.code = `\r\n        ${global_uniforms/* default */.A.code(0)}\r\n\r\n        struct SkyboxUniforms {\r\n            mipBias: f32,\r\n        };\r\n\r\n        @group(1) @binding(0) var environmentTexture: texture_cube<f32>;\r\n        @group(1) @binding(1) var depthTexture: texture_depth_2d;\r\n        @group(1) @binding(2) var environmentSampler: sampler;\r\n        @group(1) @binding(3) var<uniform> skyboxUniforms: SkyboxUniforms;\r\n\r\n        struct Varyings {\r\n            @builtin(position) position: vec4f,\r\n            @location(0) pos: vec4f,\r\n            @location(1) mipBias: f32,\r\n        };\r\n    \r\n        @vertex \r\n        fn vs(@builtin(vertex_index) vNdx: u32) -> Varyings {\r\n            const pos = array(\r\n                vec2(-1.0,  3.0),\r\n                vec2(-1.0, -1.0),\r\n                vec2( 3.0, -1.0),\r\n            );\r\n    \r\n            var vsOut: Varyings;\r\n            vsOut.position = vec4(pos[vNdx], 0.0, 1.0);\r\n    \r\n            // Ignores the camera's translation without needing a separate rotation matrix.\r\n            vsOut.pos = globals.inverseViewToClip * vsOut.position;\r\n            let w = vsOut.pos.w;\r\n            vsOut.pos.w = 0.0;\r\n            vsOut.pos = globals.inverseWorldToView * vsOut.pos;\r\n            vsOut.pos.w = w;\r\n\r\n            vsOut.mipBias = clamp(skyboxUniforms.mipBias, 0, f32(textureNumLevels(environmentTexture)));\r\n            return vsOut;\r\n        }\r\n\r\n        @fragment\r\n        fn fs(in: Varyings) -> @location(0) vec4f {\r\n            let dimensions = textureDimensions(depthTexture);\r\n            let uv = min(vec2<u32>(floor(in.position.xy)), dimensions - 1);\r\n            let depth = textureLoad(depthTexture, uv, 0);\r\n            if (depth < 1.0) { discard; }\r\n\r\n            let t = normalize(in.pos.xyz / in.pos.w);\r\n            let color = textureSampleLevel(environmentTexture, environmentSampler, t, in.mipBias).rgb;\r\n            return vec4(color, 1.0);\r\n        }\r\n    `;\n/* harmony default export */ const skybox_pass = (SkyboxPass);\n\n;// ./src/rendering/gbuffer.ts\nclass GBuffer {\n    get size() { return this._size; }\n    set size(value) {\n        this._size = value;\n        this.textures.forEach((tex) => { this.createTexture(tex); });\n        this.bindgroup = this.updateBindgroup();\n        this.passDescriptor = this.updatePassDescriptor();\n    }\n    constructor(device, _size) {\n        this.device = device;\n        this._size = _size;\n        this.normal = this.createTexture({\n            format: 'rgba16float',\n            name: 'normal',\n            clearValue: { r: 0, g: 0, b: 1, a: 1 },\n        });\n        this.albedo = this.createTexture({\n            format: 'rgba8unorm',\n            name: 'albedo',\n            clearValue: { r: 0, g: 0, b: 0, a: 1 },\n        });\n        this.emission = this.createTexture({\n            format: 'rgba16float',\n            name: 'emission',\n            clearValue: { r: 0, g: 0, b: 0, a: 1 },\n        });\n        this.metallicRoughness = this.createTexture({\n            format: 'rg8unorm',\n            name: 'metallic roughness',\n            clearValue: { r: 0, g: 0, b: 0, a: 0 },\n        });\n        this.depth = this.createTexture({\n            format: 'depth32float',\n            name: 'depth',\n        });\n        this.textures = [\n            this.normal,\n            this.albedo,\n            this.emission,\n            this.metallicRoughness,\n            this.depth,\n        ];\n        this.targets = this.textures.slice(0, -1).map(({ format }) => ({ format }));\n        this.bindGroupLayout = this.device.createBindGroupLayout(GBuffer.layoutDescription);\n        this.bindgroup = this.updateBindgroup();\n        this.passDescriptor = this.updatePassDescriptor();\n    }\n    updateBindgroup() {\n        const entries = this.textures.map(({ view }, idx) => ({\n            binding: idx,\n            resource: view, // eslint-disable-line @typescript-eslint/no-non-null-assertion\n        }));\n        return this.device.createBindGroup({\n            label: 'gbuffer bind group',\n            layout: this.bindGroupLayout,\n            entries,\n        });\n    }\n    updatePassDescriptor() {\n        const colorAttachments = this.textures.slice(0, -1).map(({ view, clearValue }) => ({\n            view: view, // eslint-disable-line @typescript-eslint/no-non-null-assertion\n            clearValue: clearValue, // eslint-disable-line @typescript-eslint/no-non-null-assertion\n            loadOp: 'clear',\n            storeOp: 'store',\n        }));\n        return {\n            label: 'forward pass encoder',\n            colorAttachments,\n            depthStencilAttachment: {\n                view: this.depth.view, // eslint-disable-line @typescript-eslint/no-non-null-assertion\n                depthClearValue: 1.0,\n                depthLoadOp: 'clear',\n                depthStoreOp: 'store',\n            },\n        };\n    }\n    createTexture(tex) {\n        const label = `gbuffer ${tex.name}`;\n        tex.texture = this.device.createTexture({\n            label,\n            size: this._size,\n            format: tex.format,\n            usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,\n        });\n        tex.view = tex.texture.createView({ label });\n        return tex;\n    }\n}\nGBuffer.code = (group) => /* wgsl */ `\n        @group(${group}) @binding(${0 /* GBufferGroupIndices.Normal */}) \n        var gBufferNormal: texture_2d<f32>;\n        \n        @group(${group}) @binding(${1 /* GBufferGroupIndices.Albedo */}) \n        var gBufferAlbedo: texture_2d<f32>;\n        \n        @group(${group}) @binding(${2 /* GBufferGroupIndices.Emission */}) \n        var gBufferEmission: texture_2d<f32>;\n\n        @group(${group}) @binding(${3 /* GBufferGroupIndices.MetallicRoughness */}) \n        var gBufferMetallicRoughness: texture_2d<f32>;\n        \n        @group(${group}) @binding(${4 /* GBufferGroupIndices.Depth */})  \n        var gBufferDepth: texture_depth_2d;\n    `;\nGBuffer.layoutDescription = {\n    label: 'gbuffer bind group layout',\n    entries: [\n        {\n            binding: 0 /* GBufferGroupIndices.Normal */,\n            visibility: GPUShaderStage.FRAGMENT,\n            texture: { sampleType: 'unfilterable-float' },\n        },\n        {\n            binding: 1 /* GBufferGroupIndices.Albedo */,\n            visibility: GPUShaderStage.FRAGMENT,\n            texture: { sampleType: 'float' },\n        },\n        {\n            binding: 2 /* GBufferGroupIndices.Emission */,\n            visibility: GPUShaderStage.FRAGMENT,\n            texture: { sampleType: 'float' },\n        },\n        {\n            binding: 3 /* GBufferGroupIndices.MetallicRoughness */,\n            visibility: GPUShaderStage.FRAGMENT,\n            texture: { sampleType: 'unfilterable-float' },\n        },\n        {\n            binding: 4 /* GBufferGroupIndices.Depth */,\n            visibility: GPUShaderStage.FRAGMENT,\n            texture: { sampleType: 'depth' },\n        },\n    ],\n};\n/* harmony default export */ const gbuffer = (GBuffer);\n\n;// ./src/shaders/brdfs.shader.ts\n/* harmony default export */ const brdfs_shader = (/* wgsl */`\n    fn hammersley(i: u32, N: u32) -> vec2f {\n        var bits = (i << 16u) | (i >> 16u);\n        bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\n        bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\n        bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\n        bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\n        let rdi = f32(bits) * 2.3283064365386963e-10; // / 0x100000000\n        return vec2(f32(i) / f32(N), rdi);\n    }\n\n    fn tangentSampleGGX(N: vec3f, Xi: vec2f, a2: f32) -> vec3f {\n        const PI = 3.14159265359;\n\n        let phi = 2.0 * PI * Xi.x;\n        let cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a2 - 1.0) * Xi.y));\n        let sinTheta = sqrt(1.0 - cosTheta * cosTheta);\n        \n        var H: vec3f;\n        H.x = cos(phi) * sinTheta;\n        H.y = sin(phi) * sinTheta;\n        H.z = cosTheta;\n\n        let up = select(vec3(0.0, 0.0, 1.0), vec3(1.0, 0.0, 0.0), abs(N.z) >= 0.999);\n        let T = normalize(cross(up, N));\n        let B = cross(N, T);\n\n        let S = T * H.x + B * H.y + N * H.z;\n        return normalize(S);\n    }\n\n    fn vPartLambda(NoV: f32, a2: f32) -> f32 {\n        return sqrt(NoV * NoV * (1.0 - a2) + a2);\n    }\n\n    fn vCorrelatedGGX(NoV: f32, NoL: f32, a2: f32) -> f32 {\n        let GGXV = NoL * vPartLambda(NoV, a2);\n        let GGXL = NoV * vPartLambda(NoL, a2);\n        return 0.5 / (GGXV + GGXL);\n    }\n\n    fn dS2GGX(NoH: f32, a2: f32) -> f32 {\n        let s = (a2 - 1.0) * NoH * NoH + 1.0;\n        return s * s;\n    }\n\n    fn dGGX(NoH: f32, a2: f32) -> f32 {\n        const invPI = 1.0 / 3.14159265359;\n\n        let s2 = dS2GGX(NoH, a2);\n        return invPI * select(1, a2 / s2, a2 != s2);\n    }\n`);\n\n;// ./src/rendering/ibl-textures/create-bfrd-lut.ts\n\n\nconst code = /* wgsl */ `\noverride SAMPLE_COUNT: u32 = 1024u;\n\n${blit_vert_shader/* default */.A}\n${brdfs_shader}\n\n@fragment\nfn fs(@location(0) uv: vec2f) -> @location(0) vec4f  {\n    let NoV = uv.x;\n    let roughness = uv.y;\n    let alpha = roughness * roughness;\n    let a2 = alpha * alpha;\n    let V = vec3(sqrt(1.0 - NoV * NoV), NoV, 0.0);\n    let N = vec3(0.0, 1.0, 0.0);\n\n    var brdf = vec2(0.0);\n\n    for (var i = 0u; i < SAMPLE_COUNT; i++) {\n        let Xi = hammersley(i, SAMPLE_COUNT);\n        let H = tangentSampleGGX(N, Xi, a2);\n        let L = normalize(2.0 * dot(V, H) * H - V);\n\n        let NoL = saturate(L.y);\n        let NoH = saturate(H.y);\n        let VoH = saturate(dot(V, H));\n\n        if (NoL > 0.0) {\n            let pdf = vCorrelatedGGX(NoV, NoL, a2) * VoH * NoL / NoH;\n            let Fc = pow(1.0 - VoH, 5.0);\n            brdf += vec2(1.0 - Fc, Fc) * pdf;\n        }\n    }\n\n    return vec4f(brdf * 4.0 / f32(SAMPLE_COUNT), 0.0, 1.0);\n}\n`;\nfunction createBfrdLut({ device, label, sampleCount, width = 1024, height = 1024, format = 'rg32float', }) {\n    const bfrdLut = device.createTexture({\n        label,\n        format,\n        dimension: '2d',\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,\n        size: { width, height },\n    });\n    const module = device.createShaderModule({ label: 'bfrdLut shader', code });\n    const pipeline = device.createRenderPipeline({\n        label: 'bfrd lut pipeline',\n        layout: 'auto',\n        vertex: {\n            entryPoint: 'vs',\n            module,\n        },\n        fragment: {\n            entryPoint: 'fs',\n            targets: [{ format }],\n            constants: sampleCount ? { SAMPLE_COUNT: sampleCount } : undefined,\n            module,\n        },\n    });\n    const encoder = device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n        label: 'brdf lut render pass',\n        colorAttachments: [{\n                view: bfrdLut.createView(),\n                loadOp: 'clear',\n                storeOp: 'store',\n            }],\n    });\n    pass.setPipeline(pipeline);\n    pass.draw(3);\n    pass.end();\n    device.queue.submit([encoder.finish()]);\n    return bfrdLut;\n}\n\n// EXTERNAL MODULE: ./src/shaders/cubemap-sampling.shader.ts\nvar cubemap_sampling_shader = __webpack_require__(6097);\n// EXTERNAL MODULE: ./src/utils/data-copy.ts\nvar data_copy = __webpack_require__(5752);\n;// ./src/rendering/ibl-textures/create-irradiance-texture.ts\n\n\n\n\nconst create_irradiance_texture_code = /* wgsl */ `\n    const PI = 3.14159265359;\n\n    override SAMPLES: u32 = 2048u;\n\n    struct Params {\n        face: u32,\n        size: u32,\n    }\n\n    @group(0) @binding(0) var environment: texture_cube<f32>;\n    @group(0) @binding(1) var environmentSampler: sampler;\n    @group(0) @binding(2) var<uniform> params: Params;\n\n    ${cubemap_sampling_shader/* toWorldDir */.V}\n    ${brdfs_shader}\n    ${blit_vert_shader/* default */.A}\n\n    @fragment\n    fn fs(@builtin(position) pos: vec4f) -> @location(0) vec4f {\n        let coord = vec3u(vec2u(floor(pos.xy)), params.face);\n        let size = f32(textureDimensions(environment).x);\n        let lodFactor = 6.0 * size * size / f32(SAMPLES);\n\n        let N = toWorldDir(coord, params.size);\n        let right = normalize(cross(vec3(0.0, 1.0, 0.0), N));\n        let up = normalize(cross(N, right));\n        let TBN = mat3x3(right, up, N);\n        \n        var irradiance = vec3(0.0);\n        var samples = 0.0;\n\n        for (var i = 0u; i < SAMPLES; i += 1) {\n            let xi = hammersley(i, SAMPLES);\n            let cosTheta = sqrt(1.0 - xi.y);\n            let sinTheta = sqrt(xi.y);\n            let phi = 2.0 * PI * xi.x;\n            let invPdf = PI / cosTheta;\n            let localDir = normalize(vec3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta));\n            let worldDir = TBN * localDir;\n            let lod = 0.5 * log2(lodFactor * invPdf);\n            irradiance += textureSampleLevel(environment, environmentSampler, worldDir, lod).rgb;\n        }\n\n        return vec4(irradiance / f32(SAMPLES), 1.0);\n    }\n`;\nfunction createIrradianceTexture({ device, texture, label = 'irradiance', usage = 0, samples = 2048, outputWidth, outputFormat, outputTexture, }) {\n    const format = outputTexture?.format ?? outputFormat ?? texture.format;\n    const width = outputTexture?.width ?? outputWidth ?? 64;\n    const bindgroupLayout = device.createBindGroupLayout({\n        label,\n        entries: [\n            {\n                binding: 0,\n                visibility: GPUShaderStage.FRAGMENT,\n                texture: { viewDimension: 'cube' },\n            },\n            {\n                binding: 1,\n                visibility: GPUShaderStage.FRAGMENT,\n                sampler: {},\n            },\n            {\n                binding: 2,\n                visibility: GPUShaderStage.FRAGMENT,\n                buffer: { type: 'uniform' },\n            },\n        ],\n    });\n    const sampler = device.createSampler({ minFilter: 'linear', magFilter: 'linear', mipmapFilter: 'linear' });\n    const irradianceTexture = outputTexture?.depthOrArrayLayers === 6\n        ? outputTexture\n        : device.createTexture({\n            label,\n            format,\n            dimension: '2d',\n            usage: GPUTextureUsage.RENDER_ATTACHMENT | usage,\n            size: { width, height: width, depthOrArrayLayers: 6 },\n        });\n    const params = new Uint32Array([0, irradianceTexture.width]);\n    const paramBuffer = (0,data_copy/* createAndCopyBuffer */.Lr)(params, GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM, device);\n    const bindgroup = device.createBindGroup({\n        label,\n        layout: bindgroupLayout,\n        entries: [\n            {\n                binding: 0,\n                resource: texture.createView({ dimension: 'cube' }),\n            },\n            {\n                binding: 1,\n                resource: sampler,\n            },\n            {\n                binding: 2,\n                resource: { buffer: paramBuffer },\n            },\n        ],\n    });\n    const pipelineLayout = device.createPipelineLayout({\n        label,\n        bindGroupLayouts: [bindgroupLayout],\n    });\n    const module = device.createShaderModule({ label, code: create_irradiance_texture_code });\n    const pipeline = device.createRenderPipeline({\n        label,\n        layout: pipelineLayout,\n        vertex: {\n            module,\n            entryPoint: 'vs',\n        },\n        fragment: {\n            entryPoint: 'fs',\n            constants: {\n                SAMPLES: samples,\n            },\n            module,\n            targets: [{ format }],\n        },\n    });\n    for (let i = 0; i < 6; i += 1) {\n        params[0] = i;\n        device.queue.writeBuffer(paramBuffer, 0, params, 0, 1);\n        const view = irradianceTexture.createView({\n            dimension: '2d',\n            arrayLayerCount: 1,\n            baseArrayLayer: i,\n        });\n        const encoder = device.createCommandEncoder();\n        const pass = encoder.beginRenderPass({\n            colorAttachments: [{\n                    view,\n                    loadOp: 'clear',\n                    storeOp: 'store',\n                }],\n        });\n        pass.setPipeline(pipeline);\n        pass.setBindGroup(0, bindgroup);\n        pass.draw(3);\n        pass.end();\n        device.queue.submit([encoder.finish()]);\n    }\n    return irradianceTexture;\n}\n\n;// ./src/rendering/ibl-textures/create-radiance-texture.ts\n\n\n\n\nconst create_radiance_texture_code = /* wgsl */ `\n    override SAMPLES: u32 = 1024u;\n\n    const PI = 3.14159265359;\n    const invPI = 1.0 / PI;\n\n    struct Params {\n        face: u32,\n        mipSize: u32,\n        invOmegaP: f32,\n        a2: f32,\n    }\n\n    @group(0) @binding(0) var environment: texture_cube<f32>;\n    @group(0) @binding(1) var environmentSampler: sampler;\n    @group(0) @binding(2) var<uniform> params: Params;\n\n    ${cubemap_sampling_shader/* toWorldDir */.V}\n    ${brdfs_shader}\n    ${blit_vert_shader/* default */.A}\n\n    @fragment\n    fn fs(@location(0) uv: vec2f) -> @location(0) vec4f {\n        let N = toWorldDirF32(uv, params.face);\n\n        var radiance = vec3(0.0);\n        var totalWeight = 0.0;\n        \n        for (var i = 0u; i < SAMPLES; i += 1) {\n            let Xi = hammersley(i, SAMPLES);\n            let H = tangentSampleGGX(N, Xi, params.a2);\n            let HoV = saturate(dot(H, N));\n            let L = normalize(2.0 * HoV * H - N);\n            let NoL = saturate(dot(N, L));\n\n            if (NoL <= 0.0) { continue; }\n\n            let pdf = dGGX(HoV, params.a2) / 4.0 + 0.001;\n            let omegaS = 1.0 / (f32(SAMPLES) * pdf);\n            let mipLevel = 0.5 * log2(omegaS * params.invOmegaP) + params.a2;\n\n            radiance += textureSampleLevel(environment, environmentSampler, L, mipLevel).rgb * NoL;\n            totalWeight += NoL;\n        }\n    \n        return vec4(radiance / totalWeight, 1.0);\n    }\n`;\nfunction createRadianceTexture({ device, texture, targetFormat, usage = 0, label = 'radiance', samples = 1024, outputWidth, outputTexture, }) {\n    const format = outputTexture?.format ?? targetFormat ?? texture.format;\n    const width = outputTexture?.width ?? outputWidth ?? texture.width;\n    const bindgroupLayout = device.createBindGroupLayout({\n        label,\n        entries: [\n            {\n                binding: 0,\n                visibility: GPUShaderStage.FRAGMENT,\n                texture: { viewDimension: 'cube' },\n            },\n            {\n                binding: 1,\n                visibility: GPUShaderStage.FRAGMENT,\n                sampler: {},\n            },\n            {\n                binding: 2,\n                visibility: GPUShaderStage.FRAGMENT,\n                buffer: { type: 'uniform' },\n            },\n        ],\n    });\n    const sampler = device.createSampler({ minFilter: 'linear', magFilter: 'linear', mipmapFilter: 'linear' });\n    const paramArrayBuffer = new ArrayBuffer(4 * 4);\n    const uintParams = new Uint32Array(paramArrayBuffer, 0, 2);\n    const floatParams = new Float32Array(paramArrayBuffer, 2 * 4, 2);\n    const paramBuffer = (0,data_copy/* createAndCopyBuffer */.Lr)(paramArrayBuffer, GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM, device);\n    const radianceTexture = outputTexture?.depthOrArrayLayers === 6\n        ? outputTexture\n        : device.createTexture({\n            label,\n            format,\n            dimension: '2d',\n            usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_DST | usage,\n            size: { width, height: width, depthOrArrayLayers: 6 },\n            mipLevelCount: Math.max((Math.log2(width) | 0) - 2, 1),\n        });\n    const copyEncoder = device.createCommandEncoder({\n        label: `${label} copy encoder`,\n    });\n    copyEncoder.copyTextureToTexture({ texture, mipLevel: 0 }, { texture: radianceTexture, mipLevel: 0 }, { width, height: width, depthOrArrayLayers: 6 });\n    device.queue.submit([copyEncoder.finish()]);\n    const pipelineLayout = device.createPipelineLayout({\n        label,\n        bindGroupLayouts: [bindgroupLayout],\n    });\n    const module = device.createShaderModule({ label, code: create_radiance_texture_code });\n    const pipeline = device.createRenderPipeline({\n        label,\n        layout: pipelineLayout,\n        vertex: {\n            module,\n            entryPoint: 'vs',\n        },\n        fragment: {\n            entryPoint: 'fs',\n            targets: [{ format: radianceTexture.format }],\n            constants: {\n                SAMPLES: samples,\n            },\n            module,\n        },\n    });\n    floatParams[0] = (6 * texture.width * texture.width) / (4 * Math.PI);\n    void Promise.resolve().then(async () => {\n        const bindgroup = device.createBindGroup({\n            label,\n            layout: bindgroupLayout,\n            entries: [\n                {\n                    binding: 0,\n                    resource: texture.createView({ dimension: 'cube' }),\n                },\n                {\n                    binding: 1,\n                    resource: sampler,\n                },\n                {\n                    binding: 2,\n                    resource: { buffer: paramBuffer },\n                },\n            ],\n        });\n        for (let mip = 1; mip < radianceTexture.mipLevelCount; mip += 1) {\n            const roughness = mip / (radianceTexture.mipLevelCount - 1);\n            floatParams[1] = roughness ** 4;\n            uintParams[1] = (radianceTexture.width >> mip) | 0;\n            for (let face = 0; face < 6; face += 1) {\n                await device.queue.onSubmittedWorkDone();\n                uintParams[0] = face;\n                device.queue.writeBuffer(paramBuffer, 0, paramArrayBuffer);\n                const view = radianceTexture.createView({\n                    dimension: '2d',\n                    arrayLayerCount: 1,\n                    baseArrayLayer: face,\n                    mipLevelCount: 1,\n                    baseMipLevel: mip,\n                });\n                const encoder = device.createCommandEncoder();\n                const pass = encoder.beginRenderPass({\n                    colorAttachments: [{\n                            view,\n                            loadOp: 'clear',\n                            storeOp: 'store',\n                        }],\n                });\n                pass.setPipeline(pipeline);\n                pass.setBindGroup(0, bindgroup);\n                pass.draw(3);\n                pass.end();\n                device.queue.submit([encoder.finish()]);\n            }\n        }\n    });\n    return radianceTexture;\n}\n\n;// ./src/rendering/deferred-pass.ts\n\n\n\n\n\n\n\nclass DeferredPass {\n    set skybox(texture) {\n        this.irradianceTexture = createIrradianceTexture({\n            texture,\n            device: this.device,\n            usage: GPUTextureUsage.TEXTURE_BINDING,\n        });\n        this.radianceTexture = createRadianceTexture({\n            texture,\n            device: this.device,\n            usage: GPUTextureUsage.TEXTURE_BINDING,\n        });\n        this.irradianceView = this.irradianceTexture.createView({ dimension: 'cube' });\n        this.radianceView = this.radianceTexture.createView({ dimension: 'cube' });\n        this.bindgroup = this.device.createBindGroup({\n            layout: this.bindgroupLayout,\n            entries: [\n                {\n                    binding: 0,\n                    resource: this.radianceView,\n                },\n                {\n                    binding: 1,\n                    resource: this.irradianceView,\n                },\n                {\n                    binding: 2,\n                    resource: this.bfrdLutView,\n                },\n                {\n                    binding: 3,\n                    resource: this.sampler,\n                },\n            ],\n        });\n    }\n    constructor(device, globals, gbuffer, format, skybox) {\n        this.device = device;\n        this.globals = globals;\n        this.gbuffer = gbuffer;\n        this.target = {\n            view: undefined, // eslint-disable-line @typescript-eslint/no-non-null-assertion\n            clearValue: { r: 0, g: 0, b: 0, a: 1 },\n            loadOp: 'clear',\n            storeOp: 'store',\n        };\n        this.bfrdLut = createBfrdLut({ device: this.device });\n        this.bfrdLutView = this.bfrdLut.createView();\n        this.passDescriptor = { colorAttachments: [this.target] };\n        this.sampler = device.createSampler({ magFilter: 'linear', minFilter: 'linear', mipmapFilter: 'linear' });\n        if (skybox != null)\n            this.skybox = skybox;\n        this.bindgroupLayout = device.createBindGroupLayout({\n            label: 'deferred pass',\n            entries: [\n                {\n                    binding: 0,\n                    visibility: GPUShaderStage.FRAGMENT,\n                    texture: { viewDimension: 'cube' },\n                },\n                {\n                    binding: 1,\n                    visibility: GPUShaderStage.FRAGMENT,\n                    texture: { viewDimension: 'cube' },\n                },\n                {\n                    binding: 2,\n                    visibility: GPUShaderStage.FRAGMENT,\n                    texture: { viewDimension: '2d' },\n                },\n                {\n                    binding: 3,\n                    visibility: GPUShaderStage.FRAGMENT,\n                    sampler: {},\n                },\n            ],\n        });\n        const layout = device.createPipelineLayout({\n            label: 'deferred pass bindgroup layout',\n            bindGroupLayouts: [\n                this.globals.bindGroupLayout,\n                this.gbuffer.bindGroupLayout,\n                this.bindgroupLayout,\n            ],\n        });\n        const module = device.createShaderModule({ code: DeferredPass.code, label: 'deferred pass shader' });\n        this.pipeline = device.createRenderPipeline({\n            layout,\n            vertex: {\n                entryPoint: 'vs',\n                module,\n            },\n            fragment: {\n                entryPoint: 'fs',\n                targets: [{ format }],\n                module,\n            },\n        });\n    }\n    render(pass) {\n        if (this.bindgroup == null)\n            return;\n        pass.setPipeline(this.pipeline);\n        pass.setBindGroup(0, this.globals.bindgroup);\n        pass.setBindGroup(1, this.gbuffer.bindgroup);\n        pass.setBindGroup(2, this.bindgroup);\n        pass.draw(3);\n    }\n}\nDeferredPass.code = `\n        ${global_uniforms/* default */.A.code(0)}\n        ${gbuffer.code(1)}\n\n        @group(2) @binding(0) var radianceTexture: texture_cube<f32>;\n        @group(2) @binding(1) var irradianceTexture: texture_cube<f32>;\n        @group(2) @binding(2) var brdfTexture: texture_2d<f32>;\n        @group(2) @binding(3) var generalSampler: sampler;\n\n        ${brdfs_shader}\n        ${blit_vert_shader/* default */.A}\n\n        @fragment\n        fn fs(@builtin(position) pos: vec4f, @location(0) uv: vec2f) -> @location(0) vec4f {\n            let uvi = vec2<u32>(pos.xy);\n            let depth = textureLoad(gBufferDepth, uvi, 0);\n\n            if (depth >= 1.0) { discard; }\n\n            let uvClip = vec2(uv.x * 2.0 - 1.0, 1.0 - uv.y * 2.0);\n            let clipPos = vec4(uvClip, depth, 1.0);\n            let viewPos = globals.inverseViewToClip * clipPos;\n            let worldDir = globals.inverseWorldToView * vec4(viewPos.xyz / viewPos.w, 0.0);\n            let view = -normalize(worldDir.xyz);\n\n            let normal = textureLoad(gBufferNormal, uvi, 0).rgb;\n            let albedo = textureLoad(gBufferAlbedo, uvi, 0).rgb;\n            let emission = textureLoad(gBufferEmission, uvi, 0).rgb;\n            let metallicRoughnessSample = textureLoad(gBufferMetallicRoughness, uvi, 0);\n            let metallic = metallicRoughnessSample.r;\n            let roughness = metallicRoughnessSample.g;\n            let alpha = roughness * roughness;\n            let a2 = alpha * alpha;\n\n            let NoV = saturate(dot(normal, view));\n            let F0 = mix(vec3f(0.04), albedo, metallic);\n            let R = reflect(-view, normal);\n\n            let level = roughness * f32(textureNumLevels(radianceTexture) - 1u);\n            let radiance = textureSampleLevel(radianceTexture, generalSampler, R, level).rgb;\n            let irradiance = textureSample(irradianceTexture, generalSampler, normal).rgb;\n            let brdf = textureSample(brdfTexture, generalSampler, saturate(vec2f(NoV, roughness))).xy;\n\n            // Roughness dependent fresnel\n            let Fr = max(vec3f(1.0 - roughness), F0) - F0;\n            let kS = F0 + Fr * pow(1.0 - NoV, 5.0);\n            let FssEss = kS * brdf.x + brdf.y;\n\n            // Multiple scattering, originally proposed by Fdez-Aguera\n            // and here adapted from https://bruop.github.io/ibl\n            let Ems = 1.0 - (brdf.x + brdf.y);\n            let Favg = F0 + (1.0 - F0) / 21.0;\n            let FmsEms = Ems * FssEss * Favg / (1.0 - Favg * Ems);\n            let kD = albedo * (1.0 - 0.04) * (1.0 - metallic) * (1.0 - FssEss + FmsEms);\n\n            let specular = FssEss * radiance;\n            let diffuse = (FmsEms + kD) * irradiance;\n            let ambient = specular + diffuse + emission;\n\n            return vec4f(ambient, 1.0);\n        }\n    `;\n/* harmony default export */ const deferred_pass = (DeferredPass);\n\n// EXTERNAL MODULE: ./src/utils/general.ts\nvar general = __webpack_require__(4742);\n;// ./src/rendering/renderer.ts\nvar renderer_classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Renderer_instances, _Renderer_createResizeObserver;\n\n\n\n\n\n\n\nclass Renderer {\n    set skybox(texture) {\n        this.deferredPass.skybox = texture;\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.skyboxPass.skyTexture = this.deferredPass.radianceView;\n    }\n    constructor(canvas, device) {\n        _Renderer_instances.add(this);\n        this.canvas = canvas;\n        this.device = device;\n        this.colorAttachment = {\n            clearValue: { r: 0, g: 0, b: 0, a: 1 },\n            loadOp: 'clear',\n            storeOp: 'store',\n            view: undefined, // eslint-disable-line @typescript-eslint/no-non-null-assertion\n        };\n        this.passDescriptor = { colorAttachments: [this.colorAttachment] };\n        this.forwardPasses = [];\n        this.render = () => {\n            requestAnimationFrame(this.render);\n            this.globals.updateDeviceBuffer(this.device.queue, this.camera);\n            const encoder = this.device.createCommandEncoder({ label: 'main render encoder' });\n            const forwardPassParams = { encoder, globals: this.globals, gbuffer: this.gbuffer };\n            for (const forwardPass of this.forwardPasses) {\n                forwardPass.render(forwardPassParams);\n            }\n            const pass = encoder.beginRenderPass(this.passDescriptor);\n            this.deferredPass.render(pass);\n            this.skyboxPass.render(pass);\n            pass.end();\n            this.tonemapPass.render(encoder, this.context.getCurrentTexture());\n            this.device.queue.submit([encoder.finish()]);\n        };\n        const size = { width: this.canvas.width, height: this.canvas.height };\n        this.camera = new camera/* default */.A(size);\n        this.globals = new global_uniforms/* default */.A(this.device);\n        this.gbuffer = new gbuffer(device, size);\n        this.deferredPass = new deferred_pass(device, this.globals, this.gbuffer, Renderer.postProcessFormat);\n        this.skyboxPass = new skybox_pass(this.device, this.globals, Renderer.postProcessFormat);\n        this.tonemapPass = new tonemap_pass(this.device, Renderer.outputFormat);\n        const context = this.canvas.getContext('webgpu');\n        if (context == null)\n            throw new Error('renderer -- given canvas already initialized to non-webgpu context');\n        this.context = context;\n        this.context.configure({\n            device: this.device,\n            format: Renderer.outputFormat,\n            usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n            alphaMode: 'opaque',\n            colorSpace: 'srgb',\n        });\n        this.updateBackings(size);\n        renderer_classPrivateFieldGet(this, _Renderer_instances, \"m\", _Renderer_createResizeObserver).call(this);\n    }\n    static async CreateInitialized(canvas) {\n        const adapter = await navigator.gpu.requestAdapter();\n        if (adapter == null) {\n            throw new Error('Could not initialize GPU.');\n        }\n        const { maxComputeWorkgroupSizeX, maxComputeWorkgroupsPerDimension, maxComputeInvocationsPerWorkgroup, } = adapter.limits;\n        const device = await adapter.requestDevice({\n            label: 'main logical device',\n            requiredFeatures: Renderer.requiredFeatures,\n            requiredLimits: {\n                maxComputeWorkgroupSizeX,\n                maxComputeWorkgroupsPerDimension,\n                maxComputeInvocationsPerWorkgroup,\n            },\n        });\n        return new Renderer(canvas, device);\n    }\n    updateBackings(size) {\n        this.camera.updateParams(size);\n        this.postprocessTarget = this.device.createTexture({\n            dimension: '2d',\n            format: Renderer.postProcessFormat,\n            usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,\n            size,\n        });\n        this.colorAttachment.view = this.postprocessTarget.createView();\n        this.tonemapPass.updateInput(this.colorAttachment.view);\n        this.gbuffer.size = size;\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.skyboxPass.depthTexture = this.gbuffer.depth.view;\n    }\n    addForwardPass(forwardPass) {\n        (0,general/* binaryInsert */.nn)(this.forwardPasses, forwardPass, (a, b) => a.priority - b.priority);\n    }\n}\n_Renderer_instances = new WeakSet(), _Renderer_createResizeObserver = function _Renderer_createResizeObserver() {\n    const resizeCanvas = (0,general/* debounce */.sg)((rawWidth, rawHeight) => {\n        const width = Math.max(1, Math.min(rawWidth | 0, this.device.limits.maxTextureDimension2D));\n        const height = Math.max(1, Math.min(rawHeight | 0, this.device.limits.maxTextureDimension2D));\n        const dimensions = { width, height };\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.updateBackings(dimensions);\n    }, 20);\n    try {\n        const observer = new ResizeObserver((entries) => {\n            const [{ inlineSize, blockSize }] = entries[entries.length - 1].devicePixelContentBoxSize;\n            resizeCanvas(inlineSize, blockSize);\n        });\n        observer.observe(this.canvas, { box: 'device-pixel-content-box' });\n    }\n    catch {\n        // Safari doesn't support device-pixel-content-box, so it would fail into this.\n        const observer = new ResizeObserver((entries) => {\n            const [{ inlineSize, blockSize }] = entries[entries.length - 1].contentBoxSize;\n            resizeCanvas(inlineSize * devicePixelRatio, blockSize * devicePixelRatio);\n        });\n        observer.observe(this.canvas, { box: 'content-box' });\n    }\n};\nRenderer.requiredFeatures = ['float32-filterable'];\nRenderer.outputFormat = navigator.gpu.getPreferredCanvasFormat();\nRenderer.postProcessFormat = 'rgba32float';\n/* harmony default export */ const renderer = (Renderer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3980\n")},157:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/* wgsl */`\r\n    struct VertOut {\r\n        @builtin(position) pos: vec4f,\r\n        @location(0) uv: vec2f,\r\n    }\r\n\r\n    @vertex\r\n    fn vs(@builtin(vertex_index) idx: u32) -> VertOut {\r\n        const pos = array(\r\n            vec2f(-1,  3),\r\n            vec2f(3, -1),\r\n            vec2f(-1, -1),\r\n        );\r\n        var res: VertOut;\r\n        res.pos = vec4f(pos[idx], 0.0, 1.0);\r\n        res.uv = pos[idx] * vec2f(0.5, -0.5) + 0.5;\r\n        return res;\r\n    }\r\n`);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU3LmpzIiwibWFwcGluZ3MiOiI7OztBQUFBLDJFQUF5Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBa0J4QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2J1bnQtcG9ydGZvbGlvLy4vc3JjL3NoYWRlcnMvYmxpdC12ZXJ0LnNoYWRlci50cz9hNTE4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IC8qIHdnc2wgKi9gXHJcbiAgICBzdHJ1Y3QgVmVydE91dCB7XHJcbiAgICAgICAgQGJ1aWx0aW4ocG9zaXRpb24pIHBvczogdmVjNGYsXHJcbiAgICAgICAgQGxvY2F0aW9uKDApIHV2OiB2ZWMyZixcclxuICAgIH1cclxuXHJcbiAgICBAdmVydGV4XHJcbiAgICBmbiB2cyhAYnVpbHRpbih2ZXJ0ZXhfaW5kZXgpIGlkeDogdTMyKSAtPiBWZXJ0T3V0IHtcclxuICAgICAgICBjb25zdCBwb3MgPSBhcnJheShcclxuICAgICAgICAgICAgdmVjMmYoLTEsICAzKSxcclxuICAgICAgICAgICAgdmVjMmYoMywgLTEpLFxyXG4gICAgICAgICAgICB2ZWMyZigtMSwgLTEpLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdmFyIHJlczogVmVydE91dDtcclxuICAgICAgICByZXMucG9zID0gdmVjNGYocG9zW2lkeF0sIDAuMCwgMS4wKTtcclxuICAgICAgICByZXMudXYgPSBwb3NbaWR4XSAqIHZlYzJmKDAuNSwgLTAuNSkgKyAwLjU7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuYDtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///157\n")},6097:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   V: () => (/* binding */ toWorldDir),\n/* harmony export */   X: () => (/* binding */ cubemapSampleConversions)\n/* harmony export */ });\nconst toWorldDir = /* wgsl */ `\n    fn toWorldDir(coord: vec3u, size: u32) -> vec3f {\n        let uv = (2.0 / f32(size)) * (vec2f(coord.xy) + 0.5) - 1.0;\n\n        var pos: vec3f;\n        switch (coord.z) {\n            case 0  { pos = vec3(  1.0, -uv.y, -uv.x); }\n            case 1  { pos = vec3( -1.0, -uv.y,  uv.x); }\n            case 2  { pos = vec3( uv.x,   1.0,  uv.y); }\n            case 3  { pos = vec3( uv.x,  -1.0, -uv.y); }\n            case 4  { pos = vec3( uv.x, -uv.y,   1.0); }\n            default { pos = vec3(-uv.x, -uv.y,  -1.0); }\n        }\n\n        return normalize(pos);\n    }\n\n    fn toWorldDirF32(coord: vec2f, face: u32) -> vec3f {\n        let uv = 2.0 * coord - 1.0;\n\n        var pos: vec3f;\n        switch (face) {\n            case 0  { pos = vec3(  1.0, -uv.y, -uv.x); }\n            case 1  { pos = vec3( -1.0, -uv.y,  uv.x); }\n            case 2  { pos = vec3( uv.x,   1.0,  uv.y); }\n            case 3  { pos = vec3( uv.x,  -1.0, -uv.y); }\n            case 4  { pos = vec3( uv.x, -uv.y,   1.0); }\n            default { pos = vec3(-uv.x, -uv.y,  -1.0); }\n        }\n\n        return normalize(pos);\n    }\n`;\n/**\n *  WGSL functions for sampling across adjacent faces of a cubemap\n */\nconst cubemapSampleConversions = /* wgsl */ `\n    const INVALID_FACE = 6;\n    const INVALID_IDX = 4294967295u; // max u32\n\n    fn cubeSampleCoord(coord: vec3i, w: u32) -> vec3u {\n        // a flattened matrix of destination faces based on\n        // starting face and direction\n        const dfaces = array(\n            //                               I  Up Down Left Right Invalid\n            0, 2, 3, 4, 5, INVALID_FACE, // +X  +Y   -Y   +Z   -Z   \n            1, 2, 3, 5, 4, INVALID_FACE, // -X  +Y   -Y   -Z   +Z \n            2, 5, 4, 1, 0, INVALID_FACE, // +Y  -Z   +Z   -X   +X \n            3, 4, 5, 1, 0, INVALID_FACE, // -Y  +Z   -Z   -X   +X \n            4, 2, 3, 1, 0, INVALID_FACE, // +Z  +Y   -Y   -X   +X \n            5, 2, 3, 0, 1, INVALID_FACE, // -Z  +Y   -Y   +X   -X \n        );\n\n        // a flattened matrix in the same form as dfaces\n        // giving the index of the dmat array containing \n        // the transformation from the starting face to \n        // the destination face\n        const dindices = array(\n            0, 1,  2,  3,  4,  0,\n            0, 5,  6,  3,  4,  0,\n            0, 7,  8,  9,  10, 0,\n            0, 11, 12, 13, 14, 0,\n            0, 11, 8,  3,  4,  0,\n            0, 7,  12, 3,  4,  0,\n        );\n\n        // 2x4 matrices transforming a coordinate vector <u, v, w, 1>\n        // from one face to another\n        const dmats = array(\n            array(// 0\n                vec4(1, 0, 0, 0),   // u = u\n                vec4(0, 1, 0, 0),   // v = v\n            ),\n            array(// 1\n                vec4(0, 1, 1, 0),   // u = v + w\n                vec4(-1, 0, 1, -1), // v = w - u - 1\n            ),\n            array(// 2\n                vec4(0, -1, 2, -1), // u = 2w - v - 1\n                vec4(1, 0, 0, 0),   // v = u\n            ),\n            array(// 3\n                vec4(1, 0, 1, 0),   // u = u + w\n                vec4(0, 1, 0, 0),   // v = v\n            ),\n            array(// 4\n                vec4(1, 0, -1, 0),  // u = u - w\n                vec4(0, 1, 0, 0),   // v = v\n            ),\n            array(// 5\n                vec4(0, -1, 0, -1), // u = -v - 1\n                vec4(1, 0, 0, 0),   // v = u\n            ),\n            array(// 6\n                vec4(0, 1, -1, 0),  // u = v - w\n                vec4(-1, 0, 1, -1), // v = w - u - 1\n            ),\n            array(// 7\n                vec4(-1, 0, 1, -1), // u = w - u - 1\n                vec4(0, -1, 0, -1), // v = -v - 1\n            ),\n            array(// 8\n                vec4(1, 0, 0, 0),   // u = u\n                vec4(0, 1, -1, 0),  // v = v - w\n            ),\n            array(// 9\n                vec4(0, 1, 0, 0),   // u = v\n                vec4(-1, 0, 0, -1), // v = -u - 1\n            ),\n            array(// 10\n                vec4(0, -1, 1, -1), // u = w - v - 1\n                vec4(1, 0, -1, 0),  // v = u - w\n            ),\n            array(// 11\n                vec4(1, 0, 0, 0),   // u = u\n                vec4(0, 1, 1, 0),   // v = v + w\n            ),\n            array(// 12\n                vec4(-1, 0, 1, -1), // u = w - u - 1\n                vec4(0, -1, 2, -1), // v = 2w - v - 1\n            ),\n            array(// 13\n                vec4(0, -1, 1, -1), // u = w - v - 1\n                vec4(1, 0, 1, 0),   // v = u + w\n            ),\n            array(// 14\n                vec4(0, 1, 0, 0),   // u = v\n                vec4(-1, 0, 2, -1), // v = 2w - u - 1\n            ),\n        );\n\n        let iw = i32(w);\n\n        var dir = 0;\n        if (\n            coord.y >= iw * 2 - 1 \n            || coord.y <= -iw \n            || coord.x >= iw * 2 - 1 \n            || coord.x <= -iw\n        ) {\n            dir = 5;\n        } else {\n            if (coord.y < 0) {\n                dir = 1;\n            } else if (coord.y >= iw) {\n                dir = 2;\n            }\n            if (coord.x < 0) {\n                dir = select(5, 3, dir == 0);\n            } else if (coord.x >= iw) {\n                dir = select(5, 4, dir == 0);\n            }\n        }\n\n        let idx = coord.z * 6 + dir;\n        let samp = vec4(coord.xy, iw, 1);\n        let dmat = dmats[dindices[idx]];\n        return vec3u(vec3(dot(dmat[0], samp), dot(dmat[1], samp), dfaces[idx]));\n    }\n\n    fn cubeCoordToIdx(coord: vec3u, w: u32) -> u32 {\n        return coord.x + coord.y * w + coord.z * w * w;\n    }\n\n    fn cubeIdxToCoord(idx: u32, w: u32) -> vec3u {\n        let w2 = w * w;\n        let fidx = idx % w2;\n        return vec3u(fidx % w, fidx / w, idx / w2);\n    }\n\n    fn cubeSampleIdx(uvf: vec3i, w: u32) -> u32 {\n        let coord = cubeSampleCoord(uvf, w);\n        return select(\n            cubeCoordToIdx(coord, w), \n            INVALID_IDX, \n            coord.z == INVALID_FACE,\n        );\n    }\n`;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjA5Ny5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTSxVQUFVLEdBQVcsVUFBVTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FnQzNDLENBQUM7QUFFRjs7R0FFRztBQUNJLE1BQU0sd0JBQXdCLEdBQVcsVUFBVTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQThJekQsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NidW50LXBvcnRmb2xpby8uL3NyYy9zaGFkZXJzL2N1YmVtYXAtc2FtcGxpbmcuc2hhZGVyLnRzPzZjOTMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHRvV29ybGREaXI6IHN0cmluZyA9IC8qIHdnc2wgKi9gXG4gICAgZm4gdG9Xb3JsZERpcihjb29yZDogdmVjM3UsIHNpemU6IHUzMikgLT4gdmVjM2Yge1xuICAgICAgICBsZXQgdXYgPSAoMi4wIC8gZjMyKHNpemUpKSAqICh2ZWMyZihjb29yZC54eSkgKyAwLjUpIC0gMS4wO1xuXG4gICAgICAgIHZhciBwb3M6IHZlYzNmO1xuICAgICAgICBzd2l0Y2ggKGNvb3JkLnopIHtcbiAgICAgICAgICAgIGNhc2UgMCAgeyBwb3MgPSB2ZWMzKCAgMS4wLCAtdXYueSwgLXV2LngpOyB9XG4gICAgICAgICAgICBjYXNlIDEgIHsgcG9zID0gdmVjMyggLTEuMCwgLXV2LnksICB1di54KTsgfVxuICAgICAgICAgICAgY2FzZSAyICB7IHBvcyA9IHZlYzMoIHV2LngsICAgMS4wLCAgdXYueSk7IH1cbiAgICAgICAgICAgIGNhc2UgMyAgeyBwb3MgPSB2ZWMzKCB1di54LCAgLTEuMCwgLXV2LnkpOyB9XG4gICAgICAgICAgICBjYXNlIDQgIHsgcG9zID0gdmVjMyggdXYueCwgLXV2LnksICAgMS4wKTsgfVxuICAgICAgICAgICAgZGVmYXVsdCB7IHBvcyA9IHZlYzMoLXV2LngsIC11di55LCAgLTEuMCk7IH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub3JtYWxpemUocG9zKTtcbiAgICB9XG5cbiAgICBmbiB0b1dvcmxkRGlyRjMyKGNvb3JkOiB2ZWMyZiwgZmFjZTogdTMyKSAtPiB2ZWMzZiB7XG4gICAgICAgIGxldCB1diA9IDIuMCAqIGNvb3JkIC0gMS4wO1xuXG4gICAgICAgIHZhciBwb3M6IHZlYzNmO1xuICAgICAgICBzd2l0Y2ggKGZhY2UpIHtcbiAgICAgICAgICAgIGNhc2UgMCAgeyBwb3MgPSB2ZWMzKCAgMS4wLCAtdXYueSwgLXV2LngpOyB9XG4gICAgICAgICAgICBjYXNlIDEgIHsgcG9zID0gdmVjMyggLTEuMCwgLXV2LnksICB1di54KTsgfVxuICAgICAgICAgICAgY2FzZSAyICB7IHBvcyA9IHZlYzMoIHV2LngsICAgMS4wLCAgdXYueSk7IH1cbiAgICAgICAgICAgIGNhc2UgMyAgeyBwb3MgPSB2ZWMzKCB1di54LCAgLTEuMCwgLXV2LnkpOyB9XG4gICAgICAgICAgICBjYXNlIDQgIHsgcG9zID0gdmVjMyggdXYueCwgLXV2LnksICAgMS4wKTsgfVxuICAgICAgICAgICAgZGVmYXVsdCB7IHBvcyA9IHZlYzMoLXV2LngsIC11di55LCAgLTEuMCk7IH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub3JtYWxpemUocG9zKTtcbiAgICB9XG5gO1xuXG4vKipcbiAqICBXR1NMIGZ1bmN0aW9ucyBmb3Igc2FtcGxpbmcgYWNyb3NzIGFkamFjZW50IGZhY2VzIG9mIGEgY3ViZW1hcFxuICovXG5leHBvcnQgY29uc3QgY3ViZW1hcFNhbXBsZUNvbnZlcnNpb25zOiBzdHJpbmcgPSAvKiB3Z3NsICovYFxuICAgIGNvbnN0IElOVkFMSURfRkFDRSA9IDY7XG4gICAgY29uc3QgSU5WQUxJRF9JRFggPSA0Mjk0OTY3Mjk1dTsgLy8gbWF4IHUzMlxuXG4gICAgZm4gY3ViZVNhbXBsZUNvb3JkKGNvb3JkOiB2ZWMzaSwgdzogdTMyKSAtPiB2ZWMzdSB7XG4gICAgICAgIC8vIGEgZmxhdHRlbmVkIG1hdHJpeCBvZiBkZXN0aW5hdGlvbiBmYWNlcyBiYXNlZCBvblxuICAgICAgICAvLyBzdGFydGluZyBmYWNlIGFuZCBkaXJlY3Rpb25cbiAgICAgICAgY29uc3QgZGZhY2VzID0gYXJyYXkoXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJICBVcCBEb3duIExlZnQgUmlnaHQgSW52YWxpZFxuICAgICAgICAgICAgMCwgMiwgMywgNCwgNSwgSU5WQUxJRF9GQUNFLCAvLyArWCAgK1kgICAtWSAgICtaICAgLVogICBcbiAgICAgICAgICAgIDEsIDIsIDMsIDUsIDQsIElOVkFMSURfRkFDRSwgLy8gLVggICtZICAgLVkgICAtWiAgICtaIFxuICAgICAgICAgICAgMiwgNSwgNCwgMSwgMCwgSU5WQUxJRF9GQUNFLCAvLyArWSAgLVogICArWiAgIC1YICAgK1ggXG4gICAgICAgICAgICAzLCA0LCA1LCAxLCAwLCBJTlZBTElEX0ZBQ0UsIC8vIC1ZICArWiAgIC1aICAgLVggICArWCBcbiAgICAgICAgICAgIDQsIDIsIDMsIDEsIDAsIElOVkFMSURfRkFDRSwgLy8gK1ogICtZICAgLVkgICAtWCAgICtYIFxuICAgICAgICAgICAgNSwgMiwgMywgMCwgMSwgSU5WQUxJRF9GQUNFLCAvLyAtWiAgK1kgICAtWSAgICtYICAgLVggXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gYSBmbGF0dGVuZWQgbWF0cml4IGluIHRoZSBzYW1lIGZvcm0gYXMgZGZhY2VzXG4gICAgICAgIC8vIGdpdmluZyB0aGUgaW5kZXggb2YgdGhlIGRtYXQgYXJyYXkgY29udGFpbmluZyBcbiAgICAgICAgLy8gdGhlIHRyYW5zZm9ybWF0aW9uIGZyb20gdGhlIHN0YXJ0aW5nIGZhY2UgdG8gXG4gICAgICAgIC8vIHRoZSBkZXN0aW5hdGlvbiBmYWNlXG4gICAgICAgIGNvbnN0IGRpbmRpY2VzID0gYXJyYXkoXG4gICAgICAgICAgICAwLCAxLCAgMiwgIDMsICA0LCAgMCxcbiAgICAgICAgICAgIDAsIDUsICA2LCAgMywgIDQsICAwLFxuICAgICAgICAgICAgMCwgNywgIDgsICA5LCAgMTAsIDAsXG4gICAgICAgICAgICAwLCAxMSwgMTIsIDEzLCAxNCwgMCxcbiAgICAgICAgICAgIDAsIDExLCA4LCAgMywgIDQsICAwLFxuICAgICAgICAgICAgMCwgNywgIDEyLCAzLCAgNCwgIDAsXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gMng0IG1hdHJpY2VzIHRyYW5zZm9ybWluZyBhIGNvb3JkaW5hdGUgdmVjdG9yIDx1LCB2LCB3LCAxPlxuICAgICAgICAvLyBmcm9tIG9uZSBmYWNlIHRvIGFub3RoZXJcbiAgICAgICAgY29uc3QgZG1hdHMgPSBhcnJheShcbiAgICAgICAgICAgIGFycmF5KC8vIDBcbiAgICAgICAgICAgICAgICB2ZWM0KDEsIDAsIDAsIDApLCAgIC8vIHUgPSB1XG4gICAgICAgICAgICAgICAgdmVjNCgwLCAxLCAwLCAwKSwgICAvLyB2ID0gdlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGFycmF5KC8vIDFcbiAgICAgICAgICAgICAgICB2ZWM0KDAsIDEsIDEsIDApLCAgIC8vIHUgPSB2ICsgd1xuICAgICAgICAgICAgICAgIHZlYzQoLTEsIDAsIDEsIC0xKSwgLy8gdiA9IHcgLSB1IC0gMVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGFycmF5KC8vIDJcbiAgICAgICAgICAgICAgICB2ZWM0KDAsIC0xLCAyLCAtMSksIC8vIHUgPSAydyAtIHYgLSAxXG4gICAgICAgICAgICAgICAgdmVjNCgxLCAwLCAwLCAwKSwgICAvLyB2ID0gdVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGFycmF5KC8vIDNcbiAgICAgICAgICAgICAgICB2ZWM0KDEsIDAsIDEsIDApLCAgIC8vIHUgPSB1ICsgd1xuICAgICAgICAgICAgICAgIHZlYzQoMCwgMSwgMCwgMCksICAgLy8gdiA9IHZcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBhcnJheSgvLyA0XG4gICAgICAgICAgICAgICAgdmVjNCgxLCAwLCAtMSwgMCksICAvLyB1ID0gdSAtIHdcbiAgICAgICAgICAgICAgICB2ZWM0KDAsIDEsIDAsIDApLCAgIC8vIHYgPSB2XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgYXJyYXkoLy8gNVxuICAgICAgICAgICAgICAgIHZlYzQoMCwgLTEsIDAsIC0xKSwgLy8gdSA9IC12IC0gMVxuICAgICAgICAgICAgICAgIHZlYzQoMSwgMCwgMCwgMCksICAgLy8gdiA9IHVcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBhcnJheSgvLyA2XG4gICAgICAgICAgICAgICAgdmVjNCgwLCAxLCAtMSwgMCksICAvLyB1ID0gdiAtIHdcbiAgICAgICAgICAgICAgICB2ZWM0KC0xLCAwLCAxLCAtMSksIC8vIHYgPSB3IC0gdSAtIDFcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBhcnJheSgvLyA3XG4gICAgICAgICAgICAgICAgdmVjNCgtMSwgMCwgMSwgLTEpLCAvLyB1ID0gdyAtIHUgLSAxXG4gICAgICAgICAgICAgICAgdmVjNCgwLCAtMSwgMCwgLTEpLCAvLyB2ID0gLXYgLSAxXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgYXJyYXkoLy8gOFxuICAgICAgICAgICAgICAgIHZlYzQoMSwgMCwgMCwgMCksICAgLy8gdSA9IHVcbiAgICAgICAgICAgICAgICB2ZWM0KDAsIDEsIC0xLCAwKSwgIC8vIHYgPSB2IC0gd1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGFycmF5KC8vIDlcbiAgICAgICAgICAgICAgICB2ZWM0KDAsIDEsIDAsIDApLCAgIC8vIHUgPSB2XG4gICAgICAgICAgICAgICAgdmVjNCgtMSwgMCwgMCwgLTEpLCAvLyB2ID0gLXUgLSAxXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgYXJyYXkoLy8gMTBcbiAgICAgICAgICAgICAgICB2ZWM0KDAsIC0xLCAxLCAtMSksIC8vIHUgPSB3IC0gdiAtIDFcbiAgICAgICAgICAgICAgICB2ZWM0KDEsIDAsIC0xLCAwKSwgIC8vIHYgPSB1IC0gd1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGFycmF5KC8vIDExXG4gICAgICAgICAgICAgICAgdmVjNCgxLCAwLCAwLCAwKSwgICAvLyB1ID0gdVxuICAgICAgICAgICAgICAgIHZlYzQoMCwgMSwgMSwgMCksICAgLy8gdiA9IHYgKyB3XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgYXJyYXkoLy8gMTJcbiAgICAgICAgICAgICAgICB2ZWM0KC0xLCAwLCAxLCAtMSksIC8vIHUgPSB3IC0gdSAtIDFcbiAgICAgICAgICAgICAgICB2ZWM0KDAsIC0xLCAyLCAtMSksIC8vIHYgPSAydyAtIHYgLSAxXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgYXJyYXkoLy8gMTNcbiAgICAgICAgICAgICAgICB2ZWM0KDAsIC0xLCAxLCAtMSksIC8vIHUgPSB3IC0gdiAtIDFcbiAgICAgICAgICAgICAgICB2ZWM0KDEsIDAsIDEsIDApLCAgIC8vIHYgPSB1ICsgd1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGFycmF5KC8vIDE0XG4gICAgICAgICAgICAgICAgdmVjNCgwLCAxLCAwLCAwKSwgICAvLyB1ID0gdlxuICAgICAgICAgICAgICAgIHZlYzQoLTEsIDAsIDIsIC0xKSwgLy8gdiA9IDJ3IC0gdSAtIDFcbiAgICAgICAgICAgICksXG4gICAgICAgICk7XG5cbiAgICAgICAgbGV0IGl3ID0gaTMyKHcpO1xuXG4gICAgICAgIHZhciBkaXIgPSAwO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBjb29yZC55ID49IGl3ICogMiAtIDEgXG4gICAgICAgICAgICB8fCBjb29yZC55IDw9IC1pdyBcbiAgICAgICAgICAgIHx8IGNvb3JkLnggPj0gaXcgKiAyIC0gMSBcbiAgICAgICAgICAgIHx8IGNvb3JkLnggPD0gLWl3XG4gICAgICAgICkge1xuICAgICAgICAgICAgZGlyID0gNTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjb29yZC55IDwgMCkge1xuICAgICAgICAgICAgICAgIGRpciA9IDE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvb3JkLnkgPj0gaXcpIHtcbiAgICAgICAgICAgICAgICBkaXIgPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvb3JkLnggPCAwKSB7XG4gICAgICAgICAgICAgICAgZGlyID0gc2VsZWN0KDUsIDMsIGRpciA9PSAwKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29vcmQueCA+PSBpdykge1xuICAgICAgICAgICAgICAgIGRpciA9IHNlbGVjdCg1LCA0LCBkaXIgPT0gMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaWR4ID0gY29vcmQueiAqIDYgKyBkaXI7XG4gICAgICAgIGxldCBzYW1wID0gdmVjNChjb29yZC54eSwgaXcsIDEpO1xuICAgICAgICBsZXQgZG1hdCA9IGRtYXRzW2RpbmRpY2VzW2lkeF1dO1xuICAgICAgICByZXR1cm4gdmVjM3UodmVjMyhkb3QoZG1hdFswXSwgc2FtcCksIGRvdChkbWF0WzFdLCBzYW1wKSwgZGZhY2VzW2lkeF0pKTtcbiAgICB9XG5cbiAgICBmbiBjdWJlQ29vcmRUb0lkeChjb29yZDogdmVjM3UsIHc6IHUzMikgLT4gdTMyIHtcbiAgICAgICAgcmV0dXJuIGNvb3JkLnggKyBjb29yZC55ICogdyArIGNvb3JkLnogKiB3ICogdztcbiAgICB9XG5cbiAgICBmbiBjdWJlSWR4VG9Db29yZChpZHg6IHUzMiwgdzogdTMyKSAtPiB2ZWMzdSB7XG4gICAgICAgIGxldCB3MiA9IHcgKiB3O1xuICAgICAgICBsZXQgZmlkeCA9IGlkeCAlIHcyO1xuICAgICAgICByZXR1cm4gdmVjM3UoZmlkeCAlIHcsIGZpZHggLyB3LCBpZHggLyB3Mik7XG4gICAgfVxuXG4gICAgZm4gY3ViZVNhbXBsZUlkeCh1dmY6IHZlYzNpLCB3OiB1MzIpIC0+IHUzMiB7XG4gICAgICAgIGxldCBjb29yZCA9IGN1YmVTYW1wbGVDb29yZCh1dmYsIHcpO1xuICAgICAgICByZXR1cm4gc2VsZWN0KFxuICAgICAgICAgICAgY3ViZUNvb3JkVG9JZHgoY29vcmQsIHcpLCBcbiAgICAgICAgICAgIElOVkFMSURfSURYLCBcbiAgICAgICAgICAgIGNvb3JkLnogPT0gSU5WQUxJRF9GQUNFLFxuICAgICAgICApO1xuICAgIH1cbmA7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6097\n")},5752:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Lr: () => (/* binding */ createAndCopyBuffer),\n/* harmony export */   gU: () => (/* binding */ textureToKTX)\n/* harmony export */ });\n/* unused harmony exports createAndCopyCubemap, ktx2ToTexture, textureToArrayBuffer */\nif (344 == __webpack_require__.j) {\n\t/* harmony import */ var ktx_parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9253);\n}\n/* harmony import */ var _rendering_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3970);\nif (344 == __webpack_require__.j) {\n\t/* harmony import */ var _general__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4742);\n}\n\n\n\nfunction createAndCopyBuffer(arr, usage, device, label, alignment = 4) {\n    const pad = alignment - 1;\n    const buffer = device.createBuffer({\n        label,\n        usage,\n        size: (arr.byteLength + pad) & ~pad,\n        mappedAtCreation: true,\n    });\n    const writeArray = new Uint8Array(buffer.getMappedRange());\n    const readArray = arr instanceof ArrayBuffer\n        ? new Uint8Array(arr)\n        : new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n    writeArray.set(readArray);\n    buffer.unmap();\n    return buffer;\n}\nfunction createAndCopyCubemap(device, data, format, usage, label) {\n    const pixelSize = TextureFormatToSize[format];\n    if (pixelSize == null) {\n        throw new Error(`copy cubemap -- unsupported format: ${format}`);\n    }\n    const width = Math.sqrt(data.byteLength / (6 * pixelSize));\n    const size = { width, height: width, depthOrArrayLayers: 6 };\n    const texture = device.createTexture({\n        usage: usage | GPUTextureUsage.COPY_DST,\n        label,\n        format,\n        size,\n    });\n    device.queue.writeTexture({ texture }, data, { bytesPerRow: width * pixelSize, rowsPerImage: width }, size);\n    return texture;\n}\nfunction ktx2ToTexture(buffer, device, options) {\n    const arr = new Uint8Array(buffer);\n    const ktx = ktxparse.read(arr);\n    const format = VkFormatToWebGPU[ktx.vkFormat];\n    if (format == null) {\n        throw new Error(`ktx texture import -- unsupported format: ${ktx.vkFormat}\\n\\tCould not covert to webgpu`);\n    }\n    const pixelSize = TextureFormatToSize[format];\n    if (pixelSize == null) {\n        throw new Error(`ktx texture import -- unsupported format: ${ktx.vkFormat}\\n\\tCould not get pixel byte size`);\n    }\n    const size = {\n        width: ktx.pixelWidth,\n        height: ktx.pixelHeight,\n        depthOrArrayLayers: ktx.faceCount,\n    };\n    const maxMipCount = Math.ceil(Math.log2(Math.max(size.width, size.height))) + 1;\n    let mipLevelCount = ktx.levels.length;\n    if (options?.mipLevelCount === 'max') {\n        mipLevelCount = maxMipCount;\n    }\n    else if (typeof options?.mipLevelCount === 'number') {\n        mipLevelCount = Math.min(maxMipCount, options.mipLevelCount);\n    }\n    let usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n    if (options?.textureUsage)\n        usage |= options.textureUsage;\n    const texture = device.createTexture({\n        label: options?.label,\n        size,\n        mipLevelCount,\n        format,\n        usage,\n    });\n    const mipCopies = Math.min(ktx.levels.length, mipLevelCount) - 1;\n    for (let mipLevel = mipCopies; mipLevel >= 0; mipLevel -= 1) {\n        const width = size.width >> mipLevel;\n        const height = size.height >> mipLevel;\n        const { levelData } = ktx.levels[mipLevel];\n        const rawBytesPerRow = width * pixelSize;\n        const bytesPerRow = Math.max(rawBytesPerRow, 256);\n        const rowsPerImage = height;\n        const bytesPerImage = rowsPerImage * bytesPerRow;\n        let imageData = levelData;\n        if (bytesPerRow > rawBytesPerRow) {\n            imageData = new Uint8Array(bytesPerImage * texture.depthOrArrayLayers);\n            for (let h = 0; h < height * texture.depthOrArrayLayers; h += 1) {\n                for (let w = 0; w < rawBytesPerRow; w += 1) {\n                    imageData[w + h * bytesPerRow] = levelData[w + h * rawBytesPerRow];\n                }\n            }\n        }\n        const layerBatch = Math.min(Math.floor(device.limits.maxBufferSize / bytesPerImage), ktx.faceCount);\n        const layerCount = Math.ceil(ktx.faceCount / layerBatch);\n        for (let l = 0; l < layerCount; l += 1) {\n            const offset = l * layerBatch;\n            const count = Math.min(layerBatch, ktx.faceCount - offset);\n            const data = layerCount > 1\n                ? imageData.subarray(offset * bytesPerImage, (offset + count) * bytesPerImage)\n                : imageData;\n            device.queue.writeTexture({ mipLevel, texture, origin: [0, 0, offset] }, data, { bytesPerRow, rowsPerImage }, [width, height, count]);\n        }\n    }\n    return texture;\n}\nasync function textureToArrayBuffer({ device, texture, mipLevel = 0, returnBuffer, storageBuffer, resultBuffer, description, }) {\n    const pixelSize = _rendering_constants__WEBPACK_IMPORTED_MODULE_0__/* .TextureFormatToSize */ .T2[texture.format];\n    const fullDescription = (0,_general__WEBPACK_IMPORTED_MODULE_1__/* .padTemplate */ .OY) `[textureToKTX${description ?? ''}${texture.label}] --`;\n    if (pixelSize == null) {\n        throw new Error(`${fullDescription} format ${texture.format} unsupported`);\n    }\n    const width = texture.width >> mipLevel;\n    const height = texture.height >> mipLevel;\n    const rawBytesPerRow = width * pixelSize;\n    const bytesPerRow = Math.max(rawBytesPerRow, 256);\n    const rowsPerImage = height;\n    const byteSize = rowsPerImage * bytesPerRow * texture.depthOrArrayLayers;\n    const resultSize = rawBytesPerRow * height * texture.depthOrArrayLayers;\n    if (resultBuffer != null && resultBuffer.byteLength < byteSize) {\n        throw new Error(`${fullDescription} given result array not large enough.\r\n${resultBuffer.byteLength} < ${byteSize}`);\n    }\n    if (storageBuffer != null && storageBuffer.size < byteSize) {\n        throw new Error(`${fullDescription} given storage buffer not large enough.\r\n${storageBuffer.size} < ${byteSize}`);\n    }\n    const requiredUsage = GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ;\n    if (storageBuffer != null && (storageBuffer.usage & requiredUsage) !== requiredUsage) {\n        throw new Error(`${fullDescription} given storage does not have correct usage flags.\r\nGiven: ${storageBuffer.usage}\r\nRequired: ${requiredUsage}`);\n    }\n    let imageData = resultBuffer ?? new Uint8Array(byteSize);\n    const storage = storageBuffer ?? device.createBuffer({\n        label: `${fullDescription} storage buffer`,\n        size: byteSize,\n        usage: requiredUsage,\n    });\n    const encoder = device.createCommandEncoder({ label: `${fullDescription} encoder` });\n    encoder.copyTextureToBuffer({ texture, mipLevel }, { buffer: storage, rowsPerImage, bytesPerRow }, { width, height, depthOrArrayLayers: texture.depthOrArrayLayers });\n    device.queue.submit([encoder.finish()]);\n    await Promise.all([\n        storage.mapAsync(GPUMapMode.READ, 0, byteSize),\n        device.queue.onSubmittedWorkDone(),\n    ]);\n    const mapped = storage.getMappedRange(0, byteSize);\n    imageData.set(new Uint8Array(mapped));\n    storage.unmap();\n    if (bytesPerRow > rawBytesPerRow) {\n        for (let h = 0; h < height * texture.depthOrArrayLayers; h += 1) {\n            for (let w = 0; w < rawBytesPerRow; w += 1) {\n                imageData[w + h * rawBytesPerRow] = imageData[w + h * bytesPerRow];\n            }\n        }\n        imageData = imageData.slice(0, resultSize);\n    }\n    return {\n        imageData,\n        storageBuffer: returnBuffer ? storage : undefined,\n    };\n}\nasync function textureToKTX(device, texture, cube = false) {\n    const pixelSize = _rendering_constants__WEBPACK_IMPORTED_MODULE_0__/* .TextureFormatToSize */ .T2[texture.format];\n    const typeSize = _rendering_constants__WEBPACK_IMPORTED_MODULE_0__/* .TextureFormatToChannelSize */ .GE[texture.format];\n    if (pixelSize == null || typeSize == null) {\n        throw new Error(`textureToKTX -- format ${texture.format} of ${texture.label} unsupported`);\n    }\n    const container = new ktx_parse__WEBPACK_IMPORTED_MODULE_2__/* .KTX2Container */ .nYd();\n    container.pixelWidth = texture.width;\n    container.pixelHeight = texture.height;\n    container.vkFormat = _rendering_constants__WEBPACK_IMPORTED_MODULE_0__/* .WebGPUToVkFormat */ .KO[texture.format];\n    container.typeSize = typeSize;\n    delete container.keyValue.KTXswizzle;\n    const dataFormat = container.dataFormatDescriptor[0];\n    dataFormat.colorModel = ktx_parse__WEBPACK_IMPORTED_MODULE_2__/* .KHR_DF_MODEL_RGBSDA */ .Tre;\n    dataFormat.transferFunction = ktx_parse__WEBPACK_IMPORTED_MODULE_2__/* .KHR_DF_TRANSFER_LINEAR */ .T5j;\n    dataFormat.bytesPlane[0] = pixelSize;\n    dataFormat.samples = [0, 1, 2, 3].map((i) => ({\n        channelType: [192, 193, 194, 207][i],\n        samplePosition: [0, 0, 0, 0],\n        bitLength: container.typeSize * 8 - 1,\n        bitOffset: container.typeSize * 8 * i,\n        sampleLower: -1082130432,\n        sampleUpper: 1065353216,\n    }));\n    if (texture.dimension === '3d') {\n        container.faceCount = 1;\n        container.pixelDepth = texture.depthOrArrayLayers;\n    }\n    else if (cube) {\n        const cubeLayers = texture.depthOrArrayLayers / 6;\n        container.layerCount = cubeLayers === 1 ? 0 : cubeLayers;\n        container.faceCount = 6;\n    }\n    else {\n        container.layerCount = texture.depthOrArrayLayers;\n        container.faceCount = 1;\n    }\n    let storageBuffer;\n    let imageData;\n    for (let i = 0; i < texture.mipLevelCount; i += 1) {\n        // eslint-disable-next-line no-await-in-loop\n        ({ imageData, storageBuffer } = await textureToArrayBuffer({\n            mipLevel: i,\n            returnBuffer: true,\n            device,\n            texture,\n            storageBuffer,\n        }));\n        container.levels.push({\n            levelData: imageData,\n            uncompressedByteLength: imageData.byteLength,\n        });\n    }\n    return ktx_parse__WEBPACK_IMPORTED_MODULE_2__/* .write */ .M98(container);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5752\n")}}]);