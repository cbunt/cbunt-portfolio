"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkwebgpu_basic"] = self["webpackChunkwebgpu_basic"] || []).push([["src_samples_cubemap-blur_cubemap-blur-sample_ts"],{

/***/ "./src/rendering/constants.ts":
/*!************************************!*\
  !*** ./src/rendering/constants.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("var _workspaces_React_webgpu_viewer_node_modules_pnpm_react_refresh_0_14_2_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TextureFormatToChannelSize: () => (/* binding */ TextureFormatToChannelSize),\n/* harmony export */   TextureFormatToSize: () => (/* binding */ TextureFormatToSize),\n/* harmony export */   TypeSizes: () => (/* binding */ TypeSizes),\n/* harmony export */   VkFormatToWebGPU: () => (/* binding */ VkFormatToWebGPU),\n/* harmony export */   WebGPUToVkFormat: () => (/* binding */ WebGPUToVkFormat),\n/* harmony export */   textureTypeToDimension: () => (/* binding */ textureTypeToDimension)\n/* harmony export */ });\n/* harmony import */ var _workspaces_React_webgpu_viewer_node_modules_pnpm_react_refresh_0_14_2_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/.pnpm/react-refresh@0.14.2/node_modules/react-refresh/runtime.js */ \"./node_modules/.pnpm/react-refresh@0.14.2/node_modules/react-refresh/runtime.js\");\n/* harmony import */ var ktx_parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ktx-parse */ \"./node_modules/.pnpm/ktx-parse@0.7.0/node_modules/ktx-parse/dist/ktx-parse.modern.js\");\n/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/.pnpm/@pmmmwh+react-refresh-webpack-plugin@0.5.15_react-refresh@0.14.2_type-fest@4.20.0_webpack-dev_mfrq4spdi7f4wjnws4gvsvyo6i/node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ \"./node_modules/.pnpm/@pmmmwh+react-refresh-webpack-plugin@0.5.15_react-refresh@0.14.2_type-fest@4.20.0_webpack-dev_mfrq4spdi7f4wjnws4gvsvyo6i/node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js\");\n\n__webpack_require__.$Refresh$.runtime = /*#__PURE__*/ (_workspaces_React_webgpu_viewer_node_modules_pnpm_react_refresh_0_14_2_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (_workspaces_React_webgpu_viewer_node_modules_pnpm_react_refresh_0_14_2_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(_workspaces_React_webgpu_viewer_node_modules_pnpm_react_refresh_0_14_2_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__, 2)));\n\n\nconst TypeSizes = {\n    mat4x4Count: 16,\n    sizeofMat4x4f: 16 * Float32Array.BYTES_PER_ELEMENT,\n};\nconst VkFormatToWebGPU = {\n    // 8-bit formats\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R8_UNORM]: 'r8unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R8_SNORM]: 'r8snorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R8_UINT]: 'r8uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R8_SINT]: 'r8sint',\n    // 16-bit formats\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R16_UINT]: 'r16uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R16_SINT]: 'r16sint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R16_SFLOAT]: 'r16float',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R8G8_UNORM]: 'rg8unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R8G8_SNORM]: 'rg8snorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R8G8_UINT]: 'rg8uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R8G8_SINT]: 'rg8sint',\n    // 32-bit formats\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R32_UINT]: 'r32uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R32_SINT]: 'r32sint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R32_SFLOAT]: 'r32float',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R16G16_UINT]: 'rg16uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R16G16_SINT]: 'rg16sint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R16G16_SFLOAT]: 'rg16float',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R8G8B8A8_UNORM]: 'rgba8unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R8G8B8A8_SRGB]: 'rgba8unorm-srgb',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R8G8B8A8_SNORM]: 'rgba8snorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R8G8B8A8_UINT]: 'rgba8uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R8G8B8A8_SINT]: 'rgba8sint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_B8G8R8A8_UNORM]: 'bgra8unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_B8G8R8A8_SRGB]: 'bgra8unorm-srgb',\n    // Packed 32-bit formats\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_E5B9G9R9_UFLOAT_PACK32]: 'rgb9e5ufloat',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_A2R10G10B10_UINT_PACK32]: 'rgb10a2uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_A2R10G10B10_UNORM_PACK32]: 'rgb10a2unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_B10G11R11_UFLOAT_PACK32]: 'rg11b10ufloat',\n    // 64-bit formats\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R32G32_UINT]: 'rg32uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R32G32_SINT]: 'rg32sint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R32G32_SFLOAT]: 'rg32float',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R16G16B16A16_UINT]: 'rgba16uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R16G16B16A16_SINT]: 'rgba16sint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R16G16B16A16_SFLOAT]: 'rgba16float',\n    // 128-bit formats\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R32G32B32A32_UINT]: 'rgba32uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R32G32B32A32_SINT]: 'rgba32sint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_R32G32B32A32_SFLOAT]: 'rgba32float',\n    // BC compressed formats usable if \"texture-compression-bc\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_BC1_RGBA_UNORM_BLOCK]: 'bc1-rgba-unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_BC1_RGBA_SRGB_BLOCK]: 'bc1-rgba-unorm-srgb',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_BC2_UNORM_BLOCK]: 'bc2-rgba-unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_BC2_SRGB_BLOCK]: 'bc2-rgba-unorm-srgb',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_BC3_UNORM_BLOCK]: 'bc3-rgba-unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_BC3_SRGB_BLOCK]: 'bc3-rgba-unorm-srgb',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_BC4_UNORM_BLOCK]: 'bc4-r-unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_BC4_SNORM_BLOCK]: 'bc4-r-snorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_BC5_UNORM_BLOCK]: 'bc5-rg-unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_BC5_SNORM_BLOCK]: 'bc5-rg-snorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_BC6H_UFLOAT_BLOCK]: 'bc6h-rgb-ufloat',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_BC6H_SFLOAT_BLOCK]: 'bc6h-rgb-float',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_BC7_UNORM_BLOCK]: 'bc7-rgba-unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_1__.VK_FORMAT_BC7_SRGB_BLOCK]: 'bc7-rgba-unorm-srgb',\n    // Currently unsupported extension formats:\n    // ETC2 compressed formats usable if \"texture-compression-etc2\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    // \"etc2-rgb8unorm\",\n    // \"etc2-rgb8unorm-srgb\",\n    // \"etc2-rgb8a1unorm\",\n    // \"etc2-rgb8a1unorm-srgb\",\n    // \"etc2-rgba8unorm\",\n    // \"etc2-rgba8unorm-srgb\",\n    // \"eac-r11unorm\",\n    // \"eac-r11snorm\",\n    // \"eac-rg11unorm\",\n    // \"eac-rg11snorm\",\n    // ASTC compressed formats usable if \"texture-compression-astc\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    // \"astc-4x4-unorm\",\n    // \"astc-4x4-unorm-srgb\",\n    // \"astc-5x4-unorm\",\n    // \"astc-5x4-unorm-srgb\",\n    // \"astc-5x5-unorm\",\n    // \"astc-5x5-unorm-srgb\",\n    // \"astc-6x5-unorm\",\n    // \"astc-6x5-unorm-srgb\",\n    // \"astc-6x6-unorm\",\n    // \"astc-6x6-unorm-srgb\",\n    // \"astc-8x5-unorm\",\n    // \"astc-8x5-unorm-srgb\",\n    // \"astc-8x6-unorm\",\n    // \"astc-8x6-unorm-srgb\",\n    // \"astc-8x8-unorm\",\n    // \"astc-8x8-unorm-srgb\",\n    // \"astc-10x5-unorm\",\n    // \"astc-10x5-unorm-srgb\",\n    // \"astc-10x6-unorm\",\n    // \"astc-10x6-unorm-srgb\",\n    // \"astc-10x8-unorm\",\n    // \"astc-10x8-unorm-srgb\",\n    // \"astc-10x10-unorm\",\n    // \"astc-10x10-unorm-srgb\",\n    // \"astc-12x10-unorm\",\n    // \"astc-12x10-unorm-srgb\",\n    // \"astc-12x12-unorm\",\n};\nconst TextureFormatToSize = {\n    // 8-bit formats\n    r8unorm: 1,\n    r8snorm: 1,\n    r8uint: 1,\n    r8sint: 1,\n    // 16-bit formats\n    r16uint: 2,\n    r16sint: 2,\n    r16float: 2,\n    rg8unorm: 2,\n    rg8snorm: 2,\n    rg8uint: 2,\n    rg8sint: 2,\n    // 32-bit formats\n    r32uint: 4,\n    r32sint: 4,\n    r32float: 4,\n    rg16uint: 4,\n    rg16sint: 4,\n    rg16float: 4,\n    rgba8unorm: 4,\n    'rgba8unorm-srgb': 4,\n    rgba8snorm: 4,\n    rgba8uint: 4,\n    rgba8sint: 4,\n    bgra8unorm: 4,\n    'bgra8unorm-srgb': 4,\n    // Packed 32-bit formats\n    rgb9e5ufloat: 4,\n    rgb10a2uint: 4,\n    rgb10a2unorm: 4,\n    rg11b10ufloat: 4,\n    // 64-bit formats\n    rg32uint: 8,\n    rg32sint: 8,\n    rg32float: 8,\n    rgba16uint: 8,\n    rgba16sint: 8,\n    rgba16float: 8,\n    // 128-bit formats\n    rgba32uint: 16,\n    rgba32sint: 16,\n    rgba32float: 16,\n};\nconst TextureFormatToChannelSize = {\n    // 8-bit formats\n    r8unorm: 1,\n    r8snorm: 1,\n    r8uint: 1,\n    r8sint: 1,\n    // 16-bit formats\n    r16uint: 2,\n    r16sint: 2,\n    r16float: 2,\n    rg8unorm: 1,\n    rg8snorm: 1,\n    rg8uint: 1,\n    rg8sint: 1,\n    // 32-bit formats\n    r32uint: 4,\n    r32sint: 4,\n    r32float: 4,\n    rg16uint: 2,\n    rg16sint: 2,\n    rg16float: 2,\n    rgba8unorm: 1,\n    'rgba8unorm-srgb': 1,\n    rgba8snorm: 1,\n    rgba8uint: 1,\n    rgba8sint: 1,\n    bgra8unorm: 1,\n    'bgra8unorm-srgb': 1,\n    // Packed 32-bit formats\n    rgb9e5ufloat: 4,\n    rgb10a2uint: 4,\n    rgb10a2unorm: 4,\n    rg11b10ufloat: 4,\n    // 64-bit formats\n    rg32uint: 4,\n    rg32sint: 4,\n    rg32float: 4,\n    rgba16uint: 2,\n    rgba16sint: 2,\n    rgba16float: 2,\n    // 128-bit formats\n    rgba32uint: 4,\n    rgba32sint: 4,\n    rgba32float: 4,\n};\nconst WebGPUToVkFormat = Object.fromEntries(Object.entries(VkFormatToWebGPU).map(([vk, wgpu]) => [wgpu, parseInt(vk, 10)]));\nconst textureTypeToDimension = {\n    texture_cube: 'cube',\n    texture_3d: '3d',\n    texture_2d: '2d',\n};\n\n\nconst $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;\nconst $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(\n\t$ReactRefreshModuleId$\n);\n\nfunction $ReactRefreshModuleRuntime$(exports) {\n\tif (false) {}\n}\n\nif (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {\n\t$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);\n} else {\n\t$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/rendering/constants.ts\n");

/***/ }),

/***/ "./src/samples/cubemap-blur/cubemap-blur-sample.ts":
/*!*********************************************************!*\
  !*** ./src/samples/cubemap-blur/cubemap-blur-sample.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("var _workspaces_React_webgpu_viewer_node_modules_pnpm_react_refresh_0_14_2_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _workspaces_React_webgpu_viewer_node_modules_pnpm_react_refresh_0_14_2_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/.pnpm/react-refresh@0.14.2/node_modules/react-refresh/runtime.js */ \"./node_modules/.pnpm/react-refresh@0.14.2/node_modules/react-refresh/runtime.js\");\n/* harmony import */ var native_file_system_adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! native-file-system-adapter */ \"./node_modules/.pnpm/native-file-system-adapter@3.0.1/node_modules/native-file-system-adapter/src/es6.js\");\n/* harmony import */ var public_environment_maps_shoreline_ktx2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! public/environment-maps/shoreline.ktx2 */ \"./public/environment-maps/shoreline.ktx2\");\n/* harmony import */ var public_environment_maps_papermill_ktx2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! public/environment-maps/papermill.ktx2 */ \"./public/environment-maps/papermill.ktx2\");\n/* harmony import */ var public_environment_maps_leland_market_ktx2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! public/environment-maps/leland-market.ktx2 */ \"./public/environment-maps/leland-market.ktx2\");\n/* harmony import */ var _property_listener__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../property-listener */ \"./src/samples/property-listener.ts\");\n/* harmony import */ var _utils_data_copy__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/data-copy */ \"./src/utils/data-copy.ts\");\n/* harmony import */ var _cubemap_guassian_pyramid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cubemap-guassian-pyramid */ \"./src/samples/cubemap-blur/cubemap-guassian-pyramid.ts\");\n/* harmony import */ var _utils_general__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utils/general */ \"./src/utils/general.ts\");\n/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/.pnpm/@pmmmwh+react-refresh-webpack-plugin@0.5.15_react-refresh@0.14.2_type-fest@4.20.0_webpack-dev_mfrq4spdi7f4wjnws4gvsvyo6i/node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ \"./node_modules/.pnpm/@pmmmwh+react-refresh-webpack-plugin@0.5.15_react-refresh@0.14.2_type-fest@4.20.0_webpack-dev_mfrq4spdi7f4wjnws4gvsvyo6i/node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js\");\n\n__webpack_require__.$Refresh$.runtime = /*#__PURE__*/ (_workspaces_React_webgpu_viewer_node_modules_pnpm_react_refresh_0_14_2_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (_workspaces_React_webgpu_viewer_node_modules_pnpm_react_refresh_0_14_2_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(_workspaces_React_webgpu_viewer_node_modules_pnpm_react_refresh_0_14_2_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__, 2)));\n\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CubemapBlurModel_settings;\n\n\n\n\n\n\n\n\nvar BlurState;\n(function (BlurState) {\n    BlurState[BlurState[\"IDLE\"] = 0] = \"IDLE\";\n    BlurState[BlurState[\"BLUR\"] = 1] = \"BLUR\";\n    BlurState[BlurState[\"WAIT\"] = 2] = \"WAIT\";\n})(BlurState || (BlurState = {}));\nclass CubemapBlurModel {\n    constructor(device, skyboxTarget, target) {\n        this.device = device;\n        this.skyboxTarget = skyboxTarget;\n        this.colorAttachment = {\n            clearValue: { r: 0, g: 0, b: 0, a: 1 },\n            loadOp: 'clear',\n            storeOp: 'store',\n            view: undefined,\n        };\n        this.passDescriptor = { colorAttachments: [this.colorAttachment] };\n        this.state = BlurState.IDLE;\n        _CubemapBlurModel_settings.set(this, (0,_property_listener__WEBPACK_IMPORTED_MODULE_5__[\"default\"])({\n            nearestSample: {\n                [_property_listener__WEBPACK_IMPORTED_MODULE_5__.ListenerSyms.$type]: 'checkbox',\n                [_property_listener__WEBPACK_IMPORTED_MODULE_5__.ListenerSyms.$callback]: (val) => {\n                    this.skyboxTarget.useNearestSample = val;\n                },\n                value: this.skyboxTarget.useNearestSample,\n                description: 'Disables linear sampling in the viewer.',\n            },\n            mipLevel: {\n                [_property_listener__WEBPACK_IMPORTED_MODULE_5__.ListenerSyms.$type]: 'slider',\n                [_property_listener__WEBPACK_IMPORTED_MODULE_5__.ListenerSyms.$callback]: (value) => { this.skyboxTarget.mipLevel = value; },\n                value: 0,\n                min: 0,\n                max: 1,\n                step: 0.1,\n                description: 'The blur level to display in the viewer.',\n            },\n            filterDistance: {\n                [_property_listener__WEBPACK_IMPORTED_MODULE_5__.ListenerSyms.$type]: 'slider',\n                [_property_listener__WEBPACK_IMPORTED_MODULE_5__.ListenerSyms.$callback]: this.reblur.bind(this),\n                value: 2,\n                max: 64,\n                min: 0,\n                step: 0.1,\n                description: 'The number of pixels to blur from.',\n            },\n            skybox: {\n                [_property_listener__WEBPACK_IMPORTED_MODULE_5__.ListenerSyms.$type]: 'file',\n                [_property_listener__WEBPACK_IMPORTED_MODULE_5__.ListenerSyms.$callback]: (val) => __awaiter(this, void 0, void 0, function* () { return this.setSkybox(yield val); }),\n                accept: '.ktx2',\n                initialSelection: 'papermill',\n                initialValues: (0,_utils_general__WEBPACK_IMPORTED_MODULE_8__.mapValues)({ papermill: public_environment_maps_papermill_ktx2__WEBPACK_IMPORTED_MODULE_3__, shoreline: public_environment_maps_shoreline_ktx2__WEBPACK_IMPORTED_MODULE_2__, market: public_environment_maps_leland_market_ktx2__WEBPACK_IMPORTED_MODULE_4__ }, this.processSkybox.bind(this)),\n                process: this.processSkybox.bind(this),\n            },\n            'Download Result': {\n                [_property_listener__WEBPACK_IMPORTED_MODULE_5__.ListenerSyms.$type]: 'button',\n                onClick: this.saveFile.bind(this),\n            },\n        }));\n        this.settings = __classPrivateFieldGet(this, _CubemapBlurModel_settings, \"f\").publicSettings;\n        this.depthTexture = device.createTexture({\n            dimension: '2d',\n            format: 'depth32float',\n            size: { width: 1, height: 1 },\n            usage: GPUTextureUsage.RENDER_ATTACHMENT\n                | GPUTextureUsage.TEXTURE_BINDING,\n        });\n        this.depthTextureView = this.depthTexture.createView();\n        this.colorAttachment.view = target.view;\n        const encoder = device.createCommandEncoder({ label: 'cubemap blur dummy depth encoder' });\n        const pass = encoder.beginRenderPass({\n            colorAttachments: [],\n            depthStencilAttachment: {\n                depthClearValue: 1,\n                depthLoadOp: 'clear',\n                depthStoreOp: 'store',\n                view: this.depthTextureView,\n            },\n        });\n        pass.end();\n        this.device.queue.submit([encoder.finish()]);\n    }\n    render(encoder) {\n        return encoder.beginRenderPass(this.passDescriptor);\n    }\n    setTarget(view) {\n        this.colorAttachment.view = view.view;\n    }\n    processSkybox(file) {\n        return (0,_utils_data_copy__WEBPACK_IMPORTED_MODULE_6__.copyKTX)(file, this.device, {\n            mipLevelCount: 'max',\n            textureUsage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.COPY_SRC,\n            validate: true,\n        });\n    }\n    setSkybox(resource) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.skybox = resource instanceof GPUTexture\n                ? resource\n                : yield this.processSkybox(resource);\n            __classPrivateFieldGet(this, _CubemapBlurModel_settings, \"f\").privateSettings.mipLevel.max = this.skybox.mipLevelCount - 1;\n            __classPrivateFieldGet(this, _CubemapBlurModel_settings, \"f\").privateSettings.mipLevel.value = 1;\n            this.skyboxTarget.mipLevel = 1;\n            this.reblur();\n        });\n    }\n    resolve() {\n        this.refresh();\n        const lastState = this.state;\n        this.state = BlurState.IDLE;\n        if (lastState === BlurState.WAIT)\n            this.reblur();\n    }\n    reblur() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.skybox == null || this.state === BlurState.WAIT)\n                return;\n            if (this.state === BlurState.BLUR) {\n                this.state = BlurState.WAIT;\n                return;\n            }\n            this.state = BlurState.BLUR;\n            yield (0,_cubemap_guassian_pyramid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(this.device, this.skybox, {\n                inPlace: true,\n                steps: this.settings.filterDistance.value,\n                delayWork: requestAnimationFrame,\n            });\n            this.resolve();\n        });\n    }\n    refresh() {\n        if (this.skybox == null)\n            return;\n        this.skyboxTarget.skyTexture = this.skybox.createView({ dimension: 'cube' });\n    }\n    saveFile() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.skybox == null)\n                return;\n            try {\n                const proms = Promise.all([\n                    (0,_utils_data_copy__WEBPACK_IMPORTED_MODULE_6__.textureToKTX)(this.device, this.skybox, true),\n                    (0,native_file_system_adapter__WEBPACK_IMPORTED_MODULE_1__.showSaveFilePicker)({\n                        types: [{ accept: { 'image/ktx2': ['.ktx2'] } }],\n                        suggestedName: 'blured-skybox.ktx2',\n                    }).then((handle) => handle.createWritable({ keepExistingData: false })),\n                ]);\n                const [ktx2, stream] = yield proms;\n                yield new Blob([ktx2], { type: 'image/ktx2' }).stream().pipeTo(stream);\n            }\n            catch (e) {\n                console.warn(e);\n            }\n        });\n    }\n}\n_CubemapBlurModel_settings = new WeakMap();\nCubemapBlurModel.title = '';\nCubemapBlurModel.description = '';\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CubemapBlurModel);\n\n\nconst $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;\nconst $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(\n\t$ReactRefreshModuleId$\n);\n\nfunction $ReactRefreshModuleRuntime$(exports) {\n\tif (false) {}\n}\n\nif (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {\n\t$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);\n} else {\n\t$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/samples/cubemap-blur/cubemap-blur-sample.ts\n");

/***/ }),

/***/ "./src/samples/cubemap-blur/cubemap-guassian-pyramid.ts":
/*!**************************************************************!*\
  !*** ./src/samples/cubemap-blur/cubemap-guassian-pyramid.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("var _workspaces_React_webgpu_viewer_node_modules_pnpm_react_refresh_0_14_2_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ cubemapGuassianPyramid)\n/* harmony export */ });\n/* harmony import */ var _workspaces_React_webgpu_viewer_node_modules_pnpm_react_refresh_0_14_2_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/.pnpm/react-refresh@0.14.2/node_modules/react-refresh/runtime.js */ \"./node_modules/.pnpm/react-refresh@0.14.2/node_modules/react-refresh/runtime.js\");\n/* harmony import */ var _utils_data_copy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/data-copy */ \"./src/utils/data-copy.ts\");\n/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/.pnpm/@pmmmwh+react-refresh-webpack-plugin@0.5.15_react-refresh@0.14.2_type-fest@4.20.0_webpack-dev_mfrq4spdi7f4wjnws4gvsvyo6i/node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ \"./node_modules/.pnpm/@pmmmwh+react-refresh-webpack-plugin@0.5.15_react-refresh@0.14.2_type-fest@4.20.0_webpack-dev_mfrq4spdi7f4wjnws4gvsvyo6i/node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js\");\n\n__webpack_require__.$Refresh$.runtime = /*#__PURE__*/ (_workspaces_React_webgpu_viewer_node_modules_pnpm_react_refresh_0_14_2_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (_workspaces_React_webgpu_viewer_node_modules_pnpm_react_refresh_0_14_2_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(_workspaces_React_webgpu_viewer_node_modules_pnpm_react_refresh_0_14_2_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__, 2)));\n\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nconst defaultOptions = {\n    inPlace: false,\n    minWidth: 8,\n    steps: 4,\n    maxOpsPerPass: 6 * (Math.pow((32 * 256), 2)),\n    delayWork: (fn) => fn(),\n};\nconst cubemapSampling = /* wgsl */ `\n    const INVALID_FACE = 6;\n    const INVALID_IDX = 4294967295u; // max u32\n\n    fn cubeSampleUVF(coord: vec3i, w: u32) -> vec3u {\n        const dfaces = array(\n            //                               I  Up Down Left Right Invalid\n            0, 2, 3, 4, 5, INVALID_FACE, // +X  +Y   -Y   +Z   -Z   \n            1, 2, 3, 5, 4, INVALID_FACE, // -X  +Y   -Y   -Z   +Z \n            2, 5, 4, 1, 0, INVALID_FACE, // +Y  -Z   +Z   -X   +X \n            3, 4, 5, 1, 0, INVALID_FACE, // -Y  +Z   -Z   -X   +X \n            4, 2, 3, 1, 0, INVALID_FACE, // +Z  +Y   -Y   -X   +X \n            5, 2, 3, 0, 1, INVALID_FACE, // -Z  +Y   -Y   +X   -X \n        );\n\n        const dindices = array(\n            0, 1,  2,  3,  4,  0,\n            0, 5,  6,  3,  4,  0,\n            0, 7,  8,  9,  10, 0,\n            0, 11, 12, 13, 14, 0,\n            0, 11, 8,  3,  4,  0,\n            0, 7, 12,  3,  4,  0,\n        );\n\n        const dmats = array(\n            array(// 0\n                vec4(1, 0, 0, 0),   // u = u\n                vec4(0, 1, 0, 0),   // v = v\n            ),\n            array(// 1\n                vec4(0, 1, 1, 0),   // u = v + w\n                vec4(-1, 0, 1, -1), // v = w - u - 1\n            ),\n            array(// 2\n                vec4(0, -1, 2, -1), // u = 2w - v - 1\n                vec4(1, 0, 0, 0),   // v = u\n            ),\n            array(// 3\n                vec4(1, 0, 1, 0),   // u = u + w\n                vec4(0, 1, 0, 0),   // v = v\n            ),\n            array(// 4\n                vec4(1, 0, -1, 0),  // u = u - w\n                vec4(0, 1, 0, 0),   // v = v\n            ),\n            array(// 5\n                vec4(0, -1, 0, -1), // u = -v - 1\n                vec4(1, 0, 0, 0),   // v = u\n            ),\n            array(// 6\n                vec4(0, 1, -1, 0),  // u = v - w\n                vec4(-1, 0, 1, -1), // v = w - u - 1\n            ),\n            array(// 7\n                vec4(-1, 0, 1, -1), // u = w - u - 1\n                vec4(0, -1, 0, -1), // v = -v - 1\n            ),\n            array(// 8\n                vec4(1, 0, 0, 0),   // u = u\n                vec4(0, 1, -1, 0),  // v = v - w\n            ),\n            array(// 9\n                vec4(0, 1, 0, 0),   // u = v\n                vec4(-1, 0, 0, -1), // v = -u - 1\n            ),\n            array(// 10\n                vec4(0, -1, 1, -1), // u = w - v - 1\n                vec4(1, 0, -1, 0),  // v = u - w\n            ),\n            array(// 11\n                vec4(1, 0, 0, 0),   // u = u\n                vec4(0, 1, 1, 0),   // v = v + w\n            ),\n            array(// 12\n                vec4(-1, 0, 1, -1), // u = w - u - 1\n                vec4(0, -1, 2, -1), // v = 2w - v - 1\n            ),\n            array(// 13\n                vec4(0, -1, 1, -1), // u = w - v - 1\n                vec4(1, 0, 1, 0),   // v = u + w\n            ),\n            array(// 14\n                vec4(0, 1, 0, 0),   // u = v\n                vec4(-1, 0, 2, -1), // v = 2w - u - 1\n            ),\n        );\n\n        let iw = i32(w);\n\n        var dir = 0;\n        if (coord.y >= iw * 2 - 1 || coord.y <= -iw || coord.x >= iw * 2 - 1 || coord.x <= -iw) {\n            dir = 5;\n        } else {\n            if (coord.y < 0) {\n                dir = 1;\n            } else if (coord.y >= iw) {\n                dir = 2;\n            }\n            if (coord.x < 0) {\n                dir = select(5, 3, dir == 0);\n            } else if (coord.x >= iw) {\n                dir = select(5, 4, dir == 0);\n            }\n        }\n\n        let idx = coord.z * 6 + dir;\n        let samp = vec4(coord.xy, iw, 1);\n        let dmat = dmats[dindices[idx]];\n        return vec3u(vec3(dot(dmat[0], samp), dot(dmat[1], samp), dfaces[idx]));\n    }\n\n    fn cubeCoordToIdx(coord: vec3u, w: u32) -> u32 {\n        return coord.x + coord.y * w + coord.z * w * w;\n    }\n\n    fn cubeIdxToCoord(idx: u32, w: u32) -> vec3u {\n        let w2 = w * w;\n        let fidx = idx % w2;\n        return vec3u(fidx % w, fidx / w, idx / w2);\n    }\n\n    fn cubeSampleIdx(uvf: vec3i, w: u32) -> u32 {\n        let coord = cubeSampleUVF(uvf, w);\n        return select(cubeCoordToIdx(coord, w), INVALID_IDX, coord.z == INVALID_FACE);\n    }\n`;\nconst mipBlur = (groups, format) => /* wgsl */ `\n    ${cubemapSampling}\n\n    override STEPS: i32 = 4;\n\n    fn to_world_coords(coord: vec3u, size: u32) -> vec3f {\n        let uv = (2.0 / f32(size)) * (vec2f(coord.xy) + 0.5) - 1.0;\n\n        var pos: vec3f;\n        switch (coord.z) {\n            case 0  { pos = vec3(  1.0, -uv.y, -uv.x); }\n            case 1  { pos = vec3( -1.0, -uv.y,  uv.x); }\n            case 2  { pos = vec3( uv.x,   1.0,  uv.y); }\n            case 3  { pos = vec3( uv.x,  -1.0, -uv.y); }\n            case 4  { pos = vec3( uv.x, -uv.y,   1.0); }\n            default { pos = vec3(-uv.x, -uv.y,  -1.0); }\n        }\n\n        return normalize(pos);\n    }\n\n    @group(0) @binding(0) var previousMip: texture_2d_array<f32>;\n    @group(0) @binding(1) var outputTexture: texture_storage_2d_array<${format}, write>;\n\n    // simga[0] resevered for work offset\n    @group(0) @binding(2) var<storage> sigmas : array<f32>;\n    \n    @compute @workgroup_size(${groups}, 1, 1)\n    fn main(@builtin(global_invocation_id) gid: vec3u) {\n        let mipSize = textureDimensions(outputTexture).x;\n\n        let idx = gid.x + u32(sigmas[0]);\n        let faceSize = mipSize * mipSize;\n        let faceIdx = idx % faceSize;\n        let coord = vec3u(faceIdx % mipSize, faceIdx / mipSize, idx / faceSize); \n        if (coord.x >= mipSize || coord.y >= mipSize || coord.z >= 6) { return; }\n\n        let previousSize = textureDimensions(previousMip).x;\n        let baseCoord = vec3i(vec3u(coord.x * 2, coord.y * 2, coord.z));\n        let pos = to_world_coords(vec3u(coord), mipSize);\n\n        let size = arrayLength(&sigmas);\n        let level = size - u32(ceil(log2(f32(previousSize))));\n        let sigma = sigmas[level];\n        let guassian_factor = -0.5 / (sigma * sigma);\n\n        var weight = 0.0;\n        var res = vec3(0.0);\n\n        for (var u = -STEPS; u <= STEPS + 1; u += 1) {\n            for (var v = -STEPS; v <= STEPS + 1; v += 1) {\n                let sampleCoord = cubeSampleUVF(baseCoord + vec3i(u, v, 0), previousSize);\n                if (sampleCoord.z == INVALID_FACE) { continue; }\n\n                let samplePos = to_world_coords(sampleCoord, previousSize);\n                let x = max(0.0, acos(dot(samplePos, pos)));\n                let w = exp(x * x * guassian_factor);\n                let color = textureLoad(previousMip, sampleCoord.xy, sampleCoord.z, 0);\n\n                res += color.rgb * w;\n                weight += w;\n            }\n        }\n\n        textureStore(outputTexture, coord.xy, coord.z, vec4(res / weight, 1));\n    }\n`;\n// the minimum angular distance between any pixel on in cubemap\n// of the given face width and any pixel lying on a perimeter the given\n// pixel steps away\nfunction minStepDistance(steps, width) {\n    // the angular distance\n    // from the uvf: face = 0, u = 0, and v = width - Math.floor(steps / 2) - 1\n    // to the uvf: face = 3, u = 2 * width - baseV - steps - 2, and v = either 0 or 1.\n    // It's likely possible to programitically determine whether the destition pixel\n    // should be v = 0 or v = 1, but checking both works fine.\n    const nextMipWidth = width >> 1;\n    const baseV = nextMipWidth - Math.floor(steps / 4) - 1;\n    const baseVN = (2 / nextMipWidth) * (baseV + 0.5) - 1;\n    const baseUN = (1 / nextMipWidth) - 1;\n    const baseMag2 = 1 + baseVN * baseVN + baseUN * baseUN;\n    const sampU = 2 * width - (baseV * 2) - steps - 2;\n    const sampUN = (2 / width) * (sampU + 0.5) - 1;\n    const samp0VN = (1 / width) - 1;\n    const samp0Mag2 = 1 + sampUN * sampUN + samp0VN * samp0VN;\n    const samp1VN = (3 / width) - 1;\n    const samp1Mag2 = 1 + sampUN * sampUN + samp1VN * samp1VN;\n    const dot0 = (sampUN + baseVN + samp0VN * baseUN) / Math.sqrt(samp0Mag2 * baseMag2);\n    const dot1 = (sampUN + baseVN + samp1VN * baseUN) / Math.sqrt(samp1Mag2 * baseMag2);\n    return Math.min(1 - dot0, 1 - dot1);\n}\nfunction cubemapGuassianPyramid(device, texture, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { inPlace, minWidth, outputTextureLabel, steps, maxOpsPerPass, delayWork, } = options ? Object.assign(Object.assign({}, defaultOptions), options) : defaultOptions;\n        const { width, format } = texture;\n        const mipLevelCount = inPlace\n            ? texture.mipLevelCount\n            : (Math.log2(width) - Math.log2(minWidth) + 1);\n        if (mipLevelCount <= 1)\n            return texture;\n        const groups = Math.min(device.limits.maxComputeWorkgroupSizeX, device.limits.maxComputeInvocationsPerWorkgroup);\n        const maxWorkgroups = device.limits.maxComputeWorkgroupsPerDimension;\n        const shader = device.createShaderModule({\n            label: 'cubemapGuassianPyramid -- shader',\n            code: mipBlur(groups, format),\n        });\n        const bindgroupLayout = device.createBindGroupLayout({\n            label: 'cubemapGuassianPyramid -- bindgroup layout',\n            entries: [\n                {\n                    binding: 0,\n                    texture: { viewDimension: '2d-array' },\n                    visibility: GPUShaderStage.COMPUTE,\n                },\n                {\n                    binding: 1,\n                    storageTexture: {\n                        access: 'write-only',\n                        viewDimension: '2d-array',\n                        format,\n                    },\n                    visibility: GPUShaderStage.COMPUTE,\n                },\n                {\n                    binding: 2,\n                    buffer: { type: 'read-only-storage' },\n                    visibility: GPUShaderStage.COMPUTE,\n                },\n            ],\n        });\n        const pipeline = device.createComputePipeline({\n            label: 'cubemapGuassianPyramid -- pipeline',\n            layout: device.createPipelineLayout({\n                label: 'cubemapGuassianPyramid -- pipeline layout',\n                bindGroupLayouts: [bindgroupLayout],\n            }),\n            compute: {\n                module: shader,\n                entryPoint: 'main',\n                constants: { STEPS: Math.ceil(steps) },\n            },\n        });\n        let gaussianPyramid = texture;\n        if (!inPlace) {\n            const size = { width, height: width, depthOrArrayLayers: 6 };\n            gaussianPyramid = device.createTexture({\n                label: outputTextureLabel,\n                usage: GPUTextureUsage.STORAGE_BINDING\n                    | GPUTextureUsage.TEXTURE_BINDING\n                    | GPUTextureUsage.COPY_SRC\n                    | GPUTextureUsage.COPY_DST,\n                dimension: '2d',\n                format,\n                mipLevelCount,\n                size,\n            });\n            const copyEncoder = device.createCommandEncoder({ label: 'cubemapGuassianPyramid -- copy encoder' });\n            copyEncoder.copyTextureToTexture({ texture, mipLevel: 0 }, { texture: gaussianPyramid, mipLevel: 0 }, size);\n            device.queue.submit([copyEncoder.finish()]);\n            yield device.queue.onSubmittedWorkDone();\n        }\n        const mipViews = [...Array(mipLevelCount).keys()].map((i) => gaussianPyramid.createView({\n            label: `cubemapGuassianPyramid -- mip view ${i}`,\n            dimension: '2d-array',\n            baseMipLevel: i,\n            mipLevelCount: 1,\n        }));\n        const stepCount = 1 + (steps * 2);\n        const maxDispatches = Math.max((maxOpsPerPass / ((Math.pow(stepCount, 2)) * groups)) | 0, 1);\n        const maxLayers = Math.ceil(Math.log2(width));\n        const propertyArray = new Float32Array([0, ...[...(Array(maxLayers).keys())].map((i) => {\n                const w = width >> i;\n                return Math.acos(1 - minStepDistance(Math.min(w, steps), w)) / 3;\n            })]);\n        const propertyBuffer = (0,_utils_data_copy__WEBPACK_IMPORTED_MODULE_1__.createAndCopyBuffer)(propertyArray, GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST, device);\n        yield new Promise((resolve) => {\n            let i = 0;\n            let totalDispatches = 0;\n            let dispatchCount = 0;\n            let batchCount = 0;\n            let batchDispatches = 0;\n            let bindgroup;\n            function runPass() {\n                return __awaiter(this, void 0, void 0, function* () {\n                    if (dispatchCount >= totalDispatches) {\n                        i += 1;\n                        dispatchCount = 0;\n                        batchCount = 0;\n                        if (i >= mipLevelCount) {\n                            resolve();\n                            return;\n                        }\n                        totalDispatches = Math.max(Math.ceil((6 * (Math.pow((width >> i), 2))) / groups), 1.0);\n                        bindgroup = device.createBindGroup({\n                            layout: bindgroupLayout,\n                            entries: [\n                                {\n                                    binding: 0,\n                                    resource: mipViews[i - 1],\n                                },\n                                {\n                                    binding: 1,\n                                    resource: mipViews[i],\n                                },\n                                {\n                                    binding: 2,\n                                    resource: { buffer: propertyBuffer },\n                                },\n                            ],\n                        });\n                    }\n                    propertyArray[0] = dispatchCount * groups;\n                    device.queue.writeBuffer(propertyBuffer, 0, propertyArray, 0, 1);\n                    const passDispatches = Math.min(totalDispatches - dispatchCount, maxDispatches - batchDispatches, maxWorkgroups);\n                    const passEncoder = device.createCommandEncoder({ label: `cubemapGuassianPyramid -- mip ${i}, pass ${batchCount}` });\n                    const pass = passEncoder.beginComputePass({ label: `cubemapGuassianPyramid -- mip ${i}, pass ${batchCount}` });\n                    pass.setPipeline(pipeline);\n                    pass.setBindGroup(0, bindgroup);\n                    pass.dispatchWorkgroups(passDispatches, 1, 1);\n                    pass.end();\n                    device.queue.submit([passEncoder.finish()]);\n                    dispatchCount += passDispatches;\n                    batchDispatches += passDispatches;\n                    batchCount += 1;\n                    if (batchDispatches >= maxDispatches) {\n                        batchDispatches = 0;\n                        yield device.queue.onSubmittedWorkDone();\n                        delayWork(runPass);\n                    }\n                    else {\n                        runPass();\n                    }\n                });\n            }\n            runPass();\n        });\n        return gaussianPyramid;\n    });\n}\n\n\nconst $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;\nconst $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(\n\t$ReactRefreshModuleId$\n);\n\nfunction $ReactRefreshModuleRuntime$(exports) {\n\tif (false) {}\n}\n\nif (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {\n\t$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);\n} else {\n\t$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/samples/cubemap-blur/cubemap-guassian-pyramid.ts\n");

/***/ }),

/***/ "./src/utils/data-copy.ts":
/*!********************************!*\
  !*** ./src/utils/data-copy.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("var _workspaces_React_webgpu_viewer_node_modules_pnpm_react_refresh_0_14_2_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   copyKTX: () => (/* binding */ copyKTX),\n/* harmony export */   createAndCopyBuffer: () => (/* binding */ createAndCopyBuffer),\n/* harmony export */   createAndCopyCubemap: () => (/* binding */ createAndCopyCubemap),\n/* harmony export */   textureToArrayBuffer: () => (/* binding */ textureToArrayBuffer),\n/* harmony export */   textureToKTX: () => (/* binding */ textureToKTX)\n/* harmony export */ });\n/* harmony import */ var _workspaces_React_webgpu_viewer_node_modules_pnpm_react_refresh_0_14_2_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/.pnpm/react-refresh@0.14.2/node_modules/react-refresh/runtime.js */ \"./node_modules/.pnpm/react-refresh@0.14.2/node_modules/react-refresh/runtime.js\");\n/* harmony import */ var ktx_parse__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ktx-parse */ \"./node_modules/.pnpm/ktx-parse@0.7.0/node_modules/ktx-parse/dist/ktx-parse.modern.js\");\n/* harmony import */ var _rendering_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../rendering/constants */ \"./src/rendering/constants.ts\");\n/* harmony import */ var _general__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./general */ \"./src/utils/general.ts\");\n/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/.pnpm/@pmmmwh+react-refresh-webpack-plugin@0.5.15_react-refresh@0.14.2_type-fest@4.20.0_webpack-dev_mfrq4spdi7f4wjnws4gvsvyo6i/node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ \"./node_modules/.pnpm/@pmmmwh+react-refresh-webpack-plugin@0.5.15_react-refresh@0.14.2_type-fest@4.20.0_webpack-dev_mfrq4spdi7f4wjnws4gvsvyo6i/node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js\");\n\n__webpack_require__.$Refresh$.runtime = /*#__PURE__*/ (_workspaces_React_webgpu_viewer_node_modules_pnpm_react_refresh_0_14_2_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (_workspaces_React_webgpu_viewer_node_modules_pnpm_react_refresh_0_14_2_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(_workspaces_React_webgpu_viewer_node_modules_pnpm_react_refresh_0_14_2_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__, 2)));\n\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\nfunction createAndCopyBuffer(arr, usage, device, label, alignment = 4) {\n    const pad = alignment - 1;\n    const buffer = device.createBuffer({\n        label,\n        usage,\n        size: (arr.byteLength + pad) & ~pad,\n        mappedAtCreation: true,\n    });\n    const writeArray = new Uint8Array(buffer.getMappedRange());\n    const readArray = arr instanceof ArrayBuffer\n        ? new Uint8Array(arr)\n        : new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n    writeArray.set(readArray);\n    buffer.unmap();\n    return buffer;\n}\nfunction createAndCopyCubemap(device, data, format, usage, label) {\n    const pixelSize = _rendering_constants__WEBPACK_IMPORTED_MODULE_1__.TextureFormatToSize[format];\n    if (pixelSize == null) {\n        throw new Error(`copy cubemap -- unsupported format: ${format}`);\n    }\n    const width = Math.sqrt(data.byteLength / (6 * pixelSize));\n    const size = { width, height: width, depthOrArrayLayers: 6 };\n    const texture = device.createTexture({\n        usage: usage | GPUTextureUsage.COPY_DST,\n        label,\n        format,\n        size,\n    });\n    device.queue.writeTexture({ texture }, data, { bytesPerRow: width * pixelSize, rowsPerImage: width }, size);\n    return texture;\n}\n// eslint-disable-next-line import/prefer-default-export\nfunction copyKTX(resource, device, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let buf;\n        if (resource instanceof ArrayBuffer) {\n            buf = resource;\n        }\n        else if (resource instanceof File) {\n            buf = yield resource.arrayBuffer();\n        }\n        else {\n            const response = yield fetch(resource);\n            buf = yield response.arrayBuffer();\n        }\n        const ktx = ktx_parse__WEBPACK_IMPORTED_MODULE_3__.read(new Uint8Array(buf));\n        const format = _rendering_constants__WEBPACK_IMPORTED_MODULE_1__.VkFormatToWebGPU[ktx.vkFormat];\n        const pixelSize = _rendering_constants__WEBPACK_IMPORTED_MODULE_1__.TextureFormatToSize[format];\n        if (format == null) {\n            throw new Error(`ktx texture import -- unsupported format: ${ktx.vkFormat}`);\n        }\n        const size = {\n            width: ktx.pixelWidth,\n            height: ktx.pixelHeight,\n            depthOrArrayLayers: ktx.faceCount,\n        };\n        const maxMipCount = Math.ceil(Math.log2(Math.max(size.width, size.height))) + 1;\n        let mipLevelCount = ktx.levels.length;\n        if ((options === null || options === void 0 ? void 0 : options.mipLevelCount) === 'max') {\n            mipLevelCount = maxMipCount;\n        }\n        else if (typeof (options === null || options === void 0 ? void 0 : options.mipLevelCount) === 'number') {\n            mipLevelCount = Math.min(maxMipCount, options.mipLevelCount);\n        }\n        let usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n        if (options === null || options === void 0 ? void 0 : options.textureUsage)\n            usage |= options.textureUsage;\n        const texture = device.createTexture({\n            label: options === null || options === void 0 ? void 0 : options.label,\n            size,\n            mipLevelCount,\n            format,\n            usage,\n        });\n        const mipCopies = Math.min(ktx.levels.length, mipLevelCount) - 1;\n        for (let mipLevel = mipCopies; mipLevel >= 0; mipLevel -= 1) {\n            const width = size.width >> mipLevel;\n            const height = size.height >> mipLevel;\n            const { levelData } = ktx.levels[mipLevel];\n            const rawBytesPerRow = width * pixelSize;\n            const bytesPerRow = Math.max(rawBytesPerRow, 256);\n            const rowsPerImage = height;\n            const bytesPerImage = rowsPerImage * bytesPerRow;\n            let imageData = levelData;\n            if (bytesPerRow > rawBytesPerRow) {\n                imageData = new Uint8Array(bytesPerImage * texture.depthOrArrayLayers);\n                for (let h = 0; h < height * texture.depthOrArrayLayers; h += 1) {\n                    for (let w = 0; w < rawBytesPerRow; w += 1) {\n                        imageData[w + h * bytesPerRow] = levelData[w + h * rawBytesPerRow];\n                    }\n                }\n            }\n            const layerBatch = Math.min(Math.floor(device.limits.maxBufferSize / bytesPerImage), ktx.faceCount);\n            const layerCount = Math.ceil(ktx.faceCount / layerBatch);\n            for (let l = 0; l < layerCount; l += 1) {\n                const offset = l * layerBatch;\n                const count = Math.min(layerBatch, ktx.faceCount - offset);\n                const data = layerCount > 1\n                    ? imageData.subarray(offset * bytesPerImage, (offset + count) * bytesPerImage)\n                    : imageData;\n                device.queue.writeTexture({ mipLevel, texture, origin: [0, 0, offset] }, data, { bytesPerRow, rowsPerImage }, [width, height, count]);\n            }\n        }\n        return texture;\n    });\n}\nfunction textureToArrayBuffer(_a) {\n    return __awaiter(this, arguments, void 0, function* ({ device, texture, mipLevel = 0, returnBuffer, storageBuffer, resultBuffer, description, }) {\n        const pixelSize = _rendering_constants__WEBPACK_IMPORTED_MODULE_1__.TextureFormatToSize[texture.format];\n        const fullDescription = (0,_general__WEBPACK_IMPORTED_MODULE_2__.padTemplate) `[textureToKTX${description}${texture.label}] --`;\n        if (pixelSize == null) {\n            throw new Error(`${fullDescription} format ${texture.format} unsupported`);\n        }\n        const width = texture.width >> mipLevel;\n        const height = texture.height >> mipLevel;\n        const rawBytesPerRow = width * pixelSize;\n        const bytesPerRow = Math.max(rawBytesPerRow, 256);\n        const rowsPerImage = height;\n        const byteSize = rowsPerImage * bytesPerRow * texture.depthOrArrayLayers;\n        const resultSize = rawBytesPerRow * height * texture.depthOrArrayLayers;\n        if (resultBuffer != null && resultBuffer.byteLength < byteSize) {\n            throw new Error(`${fullDescription} given result array not large enough.\n${resultBuffer.byteLength} < ${byteSize}`);\n        }\n        if (storageBuffer != null && storageBuffer.size < byteSize) {\n            throw new Error(`${fullDescription} given storage buffer not large enough.\n${storageBuffer.size} < ${byteSize}`);\n        }\n        const requiredUsage = GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ;\n        if (storageBuffer != null && (storageBuffer.usage & requiredUsage) !== requiredUsage) {\n            throw new Error(`${fullDescription} given storage does not have correct usage flags.\nGiven: ${storageBuffer.usage}\nRequired: ${requiredUsage}`);\n        }\n        let imageData = resultBuffer !== null && resultBuffer !== void 0 ? resultBuffer : new Uint8Array(byteSize);\n        const storage = storageBuffer !== null && storageBuffer !== void 0 ? storageBuffer : device.createBuffer({\n            label: `${fullDescription} storage buffer`,\n            size: byteSize,\n            usage: requiredUsage,\n        });\n        const encoder = device.createCommandEncoder({ label: `${fullDescription} encoder` });\n        encoder.copyTextureToBuffer({ texture, mipLevel }, { buffer: storage, rowsPerImage, bytesPerRow }, { width, height, depthOrArrayLayers: texture.depthOrArrayLayers });\n        device.queue.submit([encoder.finish()]);\n        yield device.queue.onSubmittedWorkDone();\n        yield storage.mapAsync(GPUMapMode.READ, 0, byteSize);\n        const mapped = storage.getMappedRange(0, byteSize);\n        imageData.set(new Uint8Array(mapped));\n        storage.unmap();\n        if (bytesPerRow > rawBytesPerRow) {\n            for (let h = 0; h < height * texture.depthOrArrayLayers; h += 1) {\n                for (let w = 0; w < rawBytesPerRow; w += 1) {\n                    imageData[w + h * rawBytesPerRow] = imageData[w + h * bytesPerRow];\n                }\n            }\n            imageData = imageData.slice(0, resultSize);\n        }\n        return {\n            imageData,\n            storageBuffer: returnBuffer ? storage : undefined,\n        };\n    });\n}\nfunction textureToKTX(device_1, texture_1) {\n    return __awaiter(this, arguments, void 0, function* (device, texture, cube = false) {\n        const pixelSize = _rendering_constants__WEBPACK_IMPORTED_MODULE_1__.TextureFormatToSize[texture.format];\n        if (pixelSize == null) {\n            throw new Error(`textureToKTX -- format ${texture.format} of ${texture.label} unsupported`);\n        }\n        const container = new ktx_parse__WEBPACK_IMPORTED_MODULE_3__.KTX2Container();\n        container.pixelWidth = texture.width;\n        container.pixelHeight = texture.height;\n        container.vkFormat = _rendering_constants__WEBPACK_IMPORTED_MODULE_1__.WebGPUToVkFormat[texture.format];\n        container.typeSize = _rendering_constants__WEBPACK_IMPORTED_MODULE_1__.TextureFormatToChannelSize[texture.format];\n        delete container.keyValue.KTXswizzle;\n        const dataFormat = container.dataFormatDescriptor[0];\n        dataFormat.colorModel = ktx_parse__WEBPACK_IMPORTED_MODULE_3__.KHR_DF_MODEL_RGBSDA;\n        dataFormat.transferFunction = ktx_parse__WEBPACK_IMPORTED_MODULE_3__.KHR_DF_TRANSFER_LINEAR;\n        dataFormat.bytesPlane[0] = pixelSize;\n        dataFormat.samples = [0, 1, 2, 3].map((i) => ({\n            channelType: [192, 193, 194, 207][i],\n            samplePosition: [0, 0, 0, 0],\n            bitLength: container.typeSize * 8 - 1,\n            bitOffset: container.typeSize * 8 * i,\n            sampleLower: -1082130432,\n            sampleUpper: 1065353216,\n        }));\n        if (texture.dimension === '3d') {\n            container.faceCount = 1;\n            container.pixelDepth = texture.depthOrArrayLayers;\n        }\n        else if (cube) {\n            const cubeLayers = texture.depthOrArrayLayers / 6;\n            container.layerCount = cubeLayers === 1 ? 0 : cubeLayers;\n            container.faceCount = 6;\n        }\n        else {\n            container.layerCount = texture.depthOrArrayLayers;\n            container.faceCount = 1;\n        }\n        let storageBuffer;\n        let imageData;\n        for (let i = 0; i < texture.mipLevelCount; i += 1) {\n            // eslint-disable-next-line no-await-in-loop\n            ({ imageData, storageBuffer } = yield textureToArrayBuffer({\n                mipLevel: i,\n                returnBuffer: true,\n                device,\n                texture,\n                storageBuffer,\n            }));\n            container.levels.push({\n                levelData: imageData,\n                uncompressedByteLength: imageData.byteLength,\n            });\n        }\n        return ktx_parse__WEBPACK_IMPORTED_MODULE_3__.write(container);\n    });\n}\n\n\nconst $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;\nconst $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(\n\t$ReactRefreshModuleId$\n);\n\nfunction $ReactRefreshModuleRuntime$(exports) {\n\tif (false) {}\n}\n\nif (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {\n\t$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);\n} else {\n\t$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/data-copy.ts\n");

/***/ }),

/***/ "./public/environment-maps/leland-market.ktx2":
/*!****************************************************!*\
  !*** ./public/environment-maps/leland-market.ktx2 ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "e17791c0693ab4a8220f.ktx2";

/***/ }),

/***/ "./public/environment-maps/papermill.ktx2":
/*!************************************************!*\
  !*** ./public/environment-maps/papermill.ktx2 ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "9415fdbc706f67f268b7.ktx2";

/***/ }),

/***/ "./public/environment-maps/shoreline.ktx2":
/*!************************************************!*\
  !*** ./public/environment-maps/shoreline.ktx2 ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__.p + "cbc03dc5dc89564ca7ef.ktx2";

/***/ })

}]);