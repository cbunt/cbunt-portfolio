{"version":3,"file":"807.bundle.js","mappings":"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","sources":["webpack://cbunt-portfolio/./node_modules/.pnpm/react@19.0.0/node_modules/react/index.js","webpack://cbunt-portfolio/./node_modules/.pnpm/ccount@2.0.1/node_modules/ccount/index.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-find-and-replace@3.0.2/node_modules/mdast-util-find-and-replace/lib/index.js","webpack://cbunt-portfolio/./node_modules/.pnpm/escape-string-regexp@5.0.0/node_modules/escape-string-regexp/index.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-gfm-autolink-literal@2.0.1/node_modules/mdast-util-gfm-autolink-literal/lib/index.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-gfm-footnote@2.0.0/node_modules/mdast-util-gfm-footnote/lib/index.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-gfm-strikethrough@2.0.0/node_modules/mdast-util-gfm-strikethrough/lib/index.js","webpack://cbunt-portfolio/./node_modules/.pnpm/markdown-table@3.0.4/node_modules/markdown-table/index.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/break.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/code.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/check-quote.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/encode-info.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/html.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/image.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/link.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/check-rule.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-phrasing@4.1.0/node_modules/mdast-util-phrasing/lib/index.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/strong.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/check-strong.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/index.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/check-fence.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","webpack://cbunt-portfolio/./node_modules/.pnpm/longest-streak@3.1.0/node_modules/longest-streak/index.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/definition.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/heading.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/list.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/list-item.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/root.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/text.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-gfm-table@2.0.0/node_modules/mdast-util-gfm-table/lib/index.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-gfm-task-list-item@2.0.0/node_modules/mdast-util-gfm-task-list-item/lib/index.js","webpack://cbunt-portfolio/./node_modules/.pnpm/micromark-extension-gfm-autolink-literal@2.1.0/node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","webpack://cbunt-portfolio/./node_modules/.pnpm/micromark-extension-gfm-footnote@2.1.0/node_modules/micromark-extension-gfm-footnote/lib/syntax.js","webpack://cbunt-portfolio/./node_modules/.pnpm/micromark-extension-gfm-strikethrough@2.1.0/node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","webpack://cbunt-portfolio/./node_modules/.pnpm/micromark-extension-gfm-table@2.1.0/node_modules/micromark-extension-gfm-table/lib/edit-map.js","webpack://cbunt-portfolio/./node_modules/.pnpm/micromark-extension-gfm-table@2.1.0/node_modules/micromark-extension-gfm-table/lib/infer.js","webpack://cbunt-portfolio/./node_modules/.pnpm/micromark-extension-gfm-table@2.1.0/node_modules/micromark-extension-gfm-table/lib/syntax.js","webpack://cbunt-portfolio/./node_modules/.pnpm/micromark-extension-gfm-task-list-item@2.1.0/node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","webpack://cbunt-portfolio/./node_modules/.pnpm/remark-gfm@4.0.0/node_modules/remark-gfm/lib/index.js","webpack://cbunt-portfolio/./node_modules/.pnpm/micromark-extension-gfm@3.0.0/node_modules/micromark-extension-gfm/index.js","webpack://cbunt-portfolio/./node_modules/.pnpm/mdast-util-gfm@3.0.0/node_modules/mdast-util-gfm/lib/index.js","webpack://cbunt-portfolio/./node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/lib/index.js"],"sourcesContent":["'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @import {Nodes, Parents, PhrasingContent, Root, Text} from 'mdast'\n * @import {BuildVisitor, Test, VisitorResult} from 'unist-util-visit-parents'\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n * @import {Link, PhrasingContent} from 'mdast'\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/gu, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    // If it’s an email, the previous character should not be a slash.\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteDefinition')\n  const subexit = state.enter('label')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    state.indentLines(state.containerFlow(node, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its “visible” size;\n *   note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (settings.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n      ? 108 /* `l` */\n      : code === 82 /* `R` */ || code === 114 /* `r` */\n        ? 114 /* `r` */\n        : 0\n}\n","/**\n * @import {Blockquote, Parents} from 'mdast'\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @import {Break, Parents} from 'mdast'\n * @import {Info, State} from 'mdast-util-to-markdown'\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {Code, Parents} from 'mdast'\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Encode a code point as a character reference.\n *\n * @param {number} code\n *   Code point to encode.\n * @returns {string}\n *   Encoded character reference.\n */\nexport function encodeCharacterReference(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @import {EncodeSides} from '../types.js'\n */\n\nimport {classifyCharacter} from 'micromark-util-classify-character'\n\n/**\n * Check whether to encode (as a character reference) the characters\n * surrounding an attention run.\n *\n * Which characters are around an attention run influence whether it works or\n * not.\n *\n * See <https://github.com/orgs/syntax-tree/discussions/60> for more info.\n * See this markdown in a particular renderer to see what works:\n *\n * ```markdown\n * |                         | A (letter inside) | B (punctuation inside) | C (whitespace inside) | D (nothing inside) |\n * | ----------------------- | ----------------- | ---------------------- | --------------------- | ------------------ |\n * | 1 (letter outside)      | x*y*z             | x*.*z                  | x* *z                 | x**z               |\n * | 2 (punctuation outside) | .*y*.             | .*.*.                  | .* *.                 | .**.               |\n * | 3 (whitespace outside)  | x *y* z           | x *.* z                | x * * z               | x ** z             |\n * | 4 (nothing outside)     | *x*               | *.*                    | * *                   | **                 |\n * ```\n *\n * @param {number} outside\n *   Code point on the outer side of the run.\n * @param {number} inside\n *   Code point on the inner side of the run.\n * @param {'*' | '_'} marker\n *   Marker of the run.\n *   Underscores are handled more strictly (they form less often) than\n *   asterisks.\n * @returns {EncodeSides}\n *   Whether to encode characters.\n */\n// Important: punctuation must never be encoded.\n// Punctuation is solely used by markdown constructs.\n// And by encoding itself.\n// Encoding them will break constructs or double encode things.\nexport function encodeInfo(outside, inside, marker) {\n  const outsideKind = classifyCharacter(outside)\n  const insideKind = classifyCharacter(inside)\n\n  // Letter outside:\n  if (outsideKind === undefined) {\n    return insideKind === undefined\n      ? // Letter inside:\n        // we have to encode *both* letters for `_` as it is looser.\n        // it already forms for `*` (and GFMs `~`).\n        marker === '_'\n        ? {inside: true, outside: true}\n        : {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (letter, whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: encode outer (letter)\n          {inside: false, outside: true}\n  }\n\n  // Whitespace outside:\n  if (outsideKind === 1) {\n    return insideKind === undefined\n      ? // Letter inside: already forms.\n        {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: already forms.\n          {inside: false, outside: false}\n  }\n\n  // Punctuation outside:\n  return insideKind === undefined\n    ? // Letter inside: already forms.\n      {inside: false, outside: false}\n    : insideKind === 1\n      ? // Whitespace inside: encode inner (whitespace).\n        {inside: true, outside: false}\n      : // Punctuation inside: already forms.\n        {inside: false, outside: false}\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Emphasis, Parents} from 'mdast'\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nemphasis.peek = emphasisPeek\n\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Html} from 'mdast'\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Image, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {ImageReference, Parents} from 'mdast'\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {InlineCode, Parents} from 'mdast'\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Link} from 'mdast'\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Link, Parents} from 'mdast'\n * @import {Exit} from '../types.js'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {LinkReference, Parents} from 'mdast'\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Strong} from 'mdast'\n */\n\nimport {checkStrong} from '../util/check-strong.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nstrong.peek = strongPeek\n\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker + marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker + marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Code} from 'mdast'\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Definition, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Heading, Parents} from 'mdast'\n */\n\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Heading} from 'mdast'\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {List, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {ListItem, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Paragraph, Parents} from 'mdast'\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Root} from 'mdast'\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n\n  const container = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return container.call(state, node, info)\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Text} from 'mdast'\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Parents, ThematicBreak} from 'mdast'\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: 'wwwAutolink',\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: 'protocolAutolink',\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: 'emailAutolink',\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharacterReferenceStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharacterReferenceInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}","/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if we’ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = [];\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return;\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length;\n    /** @type {Array<Array<Event>>} */\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n\n      // Truncate rest.\n      events.length = this.map[index][0];\n    }\n    vecs.push([...events]);\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      events.push(...slice);\n      slice = vecs.pop();\n    }\n\n    // Truncate everything.\n    this.map.length = 0;\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add);\n      // }\n\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","/**\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}","/**\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nconst tasklistCheck = {\n  name: 'tasklistCheck',\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== null ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code);\n  }\n}","/// <reference types=\"remark-parse\" />\n/// <reference types=\"remark-stringify\" />\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-gfm').Options} MdastOptions\n * @typedef {import('micromark-extension-gfm').Options} MicromarkOptions\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {MicromarkOptions & MdastOptions} Options\n *   Configuration.\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n"],"names":["module","exports","ccount","value","character","source","String","TypeError","count","index","indexOf","length","findAndReplace","tree","list","options","settings","ignored","ignore","pairs","tupleOrList","result","Array","isArray","tuple","push","toExpression","toFunction","toPairs","pairIndex","visitor","node","parents","grandparent","parent","siblings","children","undefined","find","replace","start","change","nodes","lastIndex","match","exec","position","matchObject","input","stack","type","slice","global","splice","handler","RegExp","string","inConstruct","notInConstruct","enterLiteralAutolink","token","this","enter","title","url","enterLiteralAutolinkValue","config","autolinkProtocol","call","exitLiteralAutolinkHttp","exit","exitLiteralAutolinkWww","data","sliceSerialize","exitLiteralAutolinkEmail","autolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findUrl","findEmail","_","protocol","domain","path","prefix","previous","test","parts","split","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","atext","label","email","code","charCodeAt","enterFootnoteDefinition","identifier","enterFootnoteDefinitionLabelString","buffer","exitFootnoteDefinitionLabelString","resume","toLowerCase","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","footnoteReference","state","info","tracker","createTracker","move","subexit","safe","associationId","current","before","after","footnoteDefinition","shift","indentLines","containerFlow","map","line","blank","peek","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","defaultStringLength","toAlignment","codePointAt","listInScope","none","includes","hardBreak","_1","unsafe","pattern","checkQuote","marker","quote","Error","encodeCharacterReference","toString","toUpperCase","encodeInfo","outside","inside","outsideKind","insideKind","emphasis","checkEmphasis","between","betweenHead","open","betweenTail","close","attentionEncodeSurroundingInfo","html","suffix","alt","imageReference","referenceType","reference","inlineCode","sequence","expression","compilePattern","atBreak","formatLinkAsAutolink","raw","Boolean","resourceLink","linkReference","text","checkBullet","bullet","checkRule","rule","phrasing","strong","checkStrong","handle","blockquote","break","fence","checkFence","fences","lang","formatCodeAsIndented","repeat","Math","max","substring","expected","longestStreak","encode","meta","definition","heading","rank","min","depth","literalWithBreak","setext","formatHeadingAsSetext","lastIndexOf","closeAtx","image","link","bulletCurrent","ordered","bulletOrdered","checkBulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","item","listItem","listItemIndent","style","checkListItemIndent","incrementListMarker","size","spread","ceil","paragraph","root","some","d","thematicBreak","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","enterTable","align","_align","inTable","exitTable","enterRow","enterCell","exitCodeText","$0","$1","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","handlers","table","serializeData","handleTableRowAsData","handleTableAsData","tableCell","handleTableCell","tableRow","matrix","concat","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","sizes","columnIndex","cell","lines","delimiterStart","delimiterEnd","join","markdownTable","exitCheck","checked","exitParagraphWithTaskListItem","head","firstParaghraph","sibling","offset","column","Object","assign","listItemWithTaskListItem","checkable","checkbox","wwwPrefix","tokenize","effects","ok","nok","wwwPrefixInside","consume","wwwPrefixAfter","partial","underscoreInLastSegment","underscoreInLastLastSegment","seen","domainInside","check","domainAfter","domainAtPunctuation","sizeOpen","sizeClose","pathInside","pathAtPunctuation","trailCharacterReferenceStart","trailBracketAfter","trailCharacterReferenceInside","emailDomainDotTrail","wwwAutolink","name","self","previousWww","previousUnbalanced","events","attempt","wwwAfter","protocolAutolink","previousProtocol","fromCodePoint","protocolPrefixInside","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","_balanced","_gfmAutolinkLiteralWalkedInto","indent","tail","tokenizePotentialGfmFootnoteCall","defined","parser","gfmFootnotes","labelStart","id","end","now","resolveToPotentialGfmFootnoteCall","context","_bufferIndex","chunk","contentType","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","_container","labelAtMarker","labelInside","labelAfter","labelEscape","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","tokenizer","more","_open","_close","resolveAll","strikethrough","nextEvents","insideSpan","constructs","null","attentionMarkers","EditMap","constructor","add","remove","editMap","at","addImplementation","sort","a","b","vecs","pop","gfmTableAlign","inDelimiterRow","event","alignIndex","tokenizeTable","sizeB","next","bodyRowStart","headRowBefore","lazy","headRowBreak","headRowStart","interrupt","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","disable","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","side","tasklistCheck","_gfmTasklistFirstContentOfListItem","spaceThenNonSpace","emptyOptions","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","document","continuation","resolveTo","flow","gfm","transforms","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","canContainEols","tableData","tableHeader","codeText","taskListCheckValueChecked","taskListCheckValueUnchecked","extensions","delete","gfmToMarkdown","empty","CONTINUE","EXIT","SKIP","visitParents","reverse","is","step","factory","tagName","defineProperty","visit","subresult","grandparents","toResult","nodeAsParent","child"],"sourceRoot":""}