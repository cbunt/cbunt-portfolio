{"version":3,"file":"777.bundle.js","mappings":";sMAGA,MAAM,KAAEA,EAAI,QAAEC,GAAY,EAAAC,OAEpBC,EAAWC,OAAO,WAExB,MAAMC,UAAkC,IAEtC,CAACF,GAED,WAAAG,CAAaC,GACXC,MAAMD,GACNE,KAAKN,GAAYI,CACnB,CAQA,wBAAMG,CAAoBC,EAAMC,EAAU,CAAC,GACzC,GAAa,KAATD,EACF,MAAM,IAAIE,UAAU,kCAEtB,GAAa,MAATF,GAAyB,OAATA,GAAiBA,EAAKG,SAAS,KACjD,MAAM,IAAID,UAAU,qCAEtBD,EAAQG,SAAWH,EAAQG,OAC3B,MAAMC,QAAeP,KAAKN,GAAUO,mBAAmBC,EAAMC,GAC7D,OAAO,IAAIP,EAA0BW,EACvC,CAGA,aAAQC,GACN,MAAM,qBAACC,SAA8B,uCAErC,UAAW,MAAOC,EAAGC,KAAUX,KAAKN,GAAUc,eACtC,CAACG,EAAMT,KAAqB,SAAfS,EAAMC,KACrB,IAAIH,EAAqBE,GACzB,IAAIf,EAA0Be,GACtC,CAGA,gBAAQE,GACN,MAAM,qBAACJ,SAA8B,uCACrCK,QAAQC,KAAK,sCACb,UAAW,IAAIJ,KAASX,KAAKN,GAAUc,eAChB,SAAfG,EAAMC,KACR,IAAIH,EAAqBE,GACzB,IAAIf,EAA0Be,EACtC,CAOA,mBAAMK,CAAed,EAAMC,EAAU,CAAC,GACpC,MAAM,qBAACM,SAA8B,uCACrC,GAAa,KAATP,EAAa,MAAM,IAAIE,UAAU,kCACrC,GAAa,MAATF,GAAyB,OAATA,GAAiBA,EAAKG,SAAS,KACjD,MAAM,IAAID,UAAU,qCAEtBD,EAAQG,SAAWH,EAAQG,OAE3B,OAAO,IAAIG,QADUT,KAAKN,GAAUsB,cAAcd,EAAMC,GAE1D,CAOA,iBAAMc,CAAaf,EAAMC,EAAU,CAAC,GAClC,GAAa,KAATD,EACF,MAAM,IAAIE,UAAU,kCAEtB,GAAa,MAATF,GAAyB,OAATA,GAAiBA,EAAKG,SAAS,KACjD,MAAM,IAAID,UAAU,qCAGtB,OADAD,EAAQe,YAAcf,EAAQe,UACvBlB,KAAKN,GAAUuB,YAAYf,EAAMC,EAC1C,CAEA,aAAMgB,CAASC,GACb,SAAUA,EAAmBC,YAAYrB,MACvC,MAAO,GAGT,MAAMsB,EAAU,CAAC,CAAEf,OAAQP,KAAMuB,KAAM,KAEvC,KAAOD,EAAQE,QAAQ,CACrB,IAAMjB,OAAQkB,EAAO,KAAEF,GAASD,EAAQI,MAExC,UAAW,MAAMf,KAASc,EAAQE,SAAU,CAC1C,SAAUhB,EAAMU,YAAYD,GAC1B,MAAO,IAAIG,EAAMZ,EAAMT,MAEN,cAAfS,EAAMC,MACRU,EAAQM,KAAK,CAAErB,OAAQI,EAAOY,KAAM,IAAIA,EAAMZ,EAAMT,OAExD,CACF,CAEA,OAAO,IACT,CAEA,UAAQ2B,GACN,UAAW,MAAO3B,KAASF,KAAKN,GAAUc,gBAClCN,CACV,CAEA,YAAQyB,GACN,UAAW,MAAOjB,EAAGC,KAAUX,WACvBW,CACV,CAEA,CAAChB,OAAOmC,iBACN,OAAO9B,KAAKQ,SACd,EAiBF,GAdAuB,OAAOC,eAAepC,EAA0BqC,UAAWtC,OAAOuC,YAAa,CAC9EC,MAAO,4BACPC,UAAU,EACVC,YAAY,EACZC,cAAc,IAGfP,OAAOQ,iBAAiB3C,EAA0BqC,UAAW,CAC5DhC,mBAAoB,CAAEoC,YAAY,GAClC7B,QAAS,CAAE6B,YAAY,GACvBrB,cAAe,CAAEqB,YAAY,GAC7BpB,YAAa,CAAEoB,YAAY,KAGxBG,WAAW5C,0BAA2B,CACxC,MAAM6C,EAAQD,WAAW5C,0BAA0BqC,UA4BnDS,eAAeC,EAA4BpC,GACzC,MAAMqC,QAAaC,UAAUC,QAAQC,eAErC,GAAa,aADMH,EAAKzB,QAAQZ,GACX,MAAM,IAAIyC,gBAAgBzD,EACjD,CA9BAkD,EAAMtB,QAAUuB,eAAwBtB,GACtC,SAAUA,EAAmBC,YAAYrB,MACvC,MAAO,GAGT,MAAMsB,EAAU,CAAC,CAAEf,OAAQP,KAAMuB,KAAM,KAEvC,KAAOD,EAAQE,QAAQ,CACrB,IAAMjB,OAAQkB,EAAO,KAAEF,GAASD,EAAQI,MAExC,UAAW,MAAMf,KAASc,EAAQE,SAAU,CAC1C,SAAUhB,EAAMU,YAAYD,GAC1B,MAAO,IAAIG,EAAMZ,EAAMT,MAEN,cAAfS,EAAMC,MACRU,EAAQM,KAAK,CAAErB,OAAQI,EAAOY,KAAM,IAAIA,EAAMZ,EAAMT,OAExD,CACF,CAEA,OAAO,IACT,EAWA,MAAMM,EAAUiC,EAAMjC,QACtBiC,EAAMjC,QAAUkC,wBACRC,EAA2B3C,YACzBQ,EAAQyC,KAAKjD,KACvB,EACAyC,EAAM9C,OAAOmC,eAAiBY,wBACpB1C,KAAKQ,SACf,EAEA,MAAMS,EAAcwB,EAAMxB,YAC1BwB,EAAMxB,YAAcyB,eAAgBxC,EAAMC,EAAU,CAAC,GACnD,OAAOc,EAAYgC,KAAKjD,KAAME,EAAMC,GAAS+C,OAAMR,UAEjD,GADgBS,aAAeH,cAA6B,iBAAbG,EAAIjD,OACnCC,EAAQe,UAAW,CAEjC,WADqBV,EAAQyC,KAAKjD,MAAMoD,QAAQC,KAClC,MAAM,IAAIL,gBAAgBxD,EAC1C,CACA,MAAM2D,IAEV,CACF,CAEA,yDCjMA,MAAM,eAAEG,GAAmB,IAE3B,MAAMC,UAAqCD,EACzC,GACA,WAAAzD,CAAa2D,GACXzD,MAAMyD,GACNxD,MAAK,EAAUwD,EAGfzB,OAAO0B,eAAezD,KAAMuD,EAA6BtB,WAGzDjC,KAAK0D,SAAU,CACjB,CAEA,WAAMC,GACJ3D,KAAK0D,SAAU,EACf,MAAME,EAAI5D,KAAK6D,YACTC,EAAIF,EAAED,QAEZ,OADAC,EAAEG,cACKD,CAET,CAGA,IAAAE,CAAMC,GACJ,OAAOjE,KAAKkE,MAAM,CAAEC,KAAM,OAAQF,YACpC,CAGA,QAAAG,CAAUC,GACR,OAAOrE,KAAKkE,MAAM,CAAEC,KAAM,WAAYE,QACxC,CAGA,KAAAH,CAAOI,GACL,GAAItE,KAAK0D,QACP,OAAOa,QAAQC,OAAO,IAAIpE,UAAU,6CAItC,MAAMoD,EAASxD,KAAK6D,YAGdY,EAASjB,EAAOU,MAAMI,GAM5B,OAHAd,EAAOO,cAGAU,CACT,EAGF1C,OAAOC,eAAeuB,EAA6BtB,UAAWtC,OAAOuC,YAAa,CAChFC,MAAO,+BACPC,UAAU,EACVC,YAAY,EACZC,cAAc,IAGhBP,OAAOQ,iBAAiBgB,EAA6BtB,UAAW,CAC9D0B,MAAO,CAAEtB,YAAY,GACrB2B,KAAM,CAAE3B,YAAY,GACpB+B,SAAU,CAAE/B,YAAY,GACxB6B,MAAO,CAAE7B,YAAY,MAKrBG,WAAW/B,sBACV+B,WAAW/B,qBAAqBwB,UAAUyC,gBAC1ClC,WAAWe,+BAEZf,WAAWe,6BAA+BA,GAG5C,qHC3EA,MAAM,QAAEoB,EAAO,OAAEC,EAAM,KAAErF,GAAS,EAAAE,OAE5BC,EAAWC,OAAO,WAExB,MAAMc,UAA6B,IAEjC,CAACf,GAED,WAAAG,CAAaC,GACXC,MAAMD,GACNE,KAAKN,GAAYI,CACnB,CAOA,oBAAM4E,CAAgBvE,EAAU,CAAC,GAC/B,OAAO,IAAI,UACHH,KAAKN,GAAUgF,eAAevE,GAExC,CAKA,aAAM0E,GACJ,OAAO7E,KAAKN,GAAUmF,SACxB,EAgBF,GAbA9C,OAAOC,eAAevB,EAAqBwB,UAAWtC,OAAOuC,YAAa,CACxEC,MAAO,uBACPC,UAAU,EACVC,YAAY,EACZC,cAAc,IAGhBP,OAAOQ,iBAAiB9B,EAAqBwB,UAAW,CACtDyC,eAAgB,CAAErC,YAAY,GAC9BwC,QAAS,CAAExC,YAAY,KAKvBG,WAAW/B,uBACV+B,WAAW/B,qBAAqBwB,UAAUyC,eAC3C,CACA,MAAMI,EAAK,IAAIC,QAEf,IAAIC,EAGJ,MAAMC,EAAO,KACX,IAAIC,EAAY3E,EAEhB4E,UAAYzC,UACV,MAAM0C,EAAOC,EAAIC,MAAM,GACjBC,EAAMF,EAAIf,KAChB,OAAQiB,EAAIpB,MACV,IAAK,OACH,MAAMqB,EAAOD,EAAIrF,KAEjB,IAAIuF,QAAY5C,UAAUC,QAAQC,eAElC,IAAK,MAAM2C,KAAUH,EAAIhE,KACvBkE,QAAYA,EAAIxF,mBAAmByF,GAGrCR,QAAmBO,EAAIzE,cAAcwE,GACrCjF,QAAe2E,EAAWS,yBAC1B,MACF,IAAK,QACHpF,EAAO2D,MAAMqB,EAAIjB,KAAM,CAAEsB,GAAIL,EAAItB,WACjC1D,EAAOsF,QACP,MACF,IAAK,WACHtF,EAAO6D,SAASmB,EAAIlB,MACpB,MACF,IAAK,QACL,IAAK,QACH9D,EAAOoD,QAIXyB,EAAKU,YAAY,EAAC,CACpB,EAIFtD,WAAW/B,qBAAqBwB,UAAUyC,eAAiBhC,eAAgBvC,GAEzE,IAAK6E,EAAW,CACd,MAAMe,EAAa,IAAId,EAAKe,gBACtBC,EAAO,IAAIC,KAAK,CAACH,GAAa,CAClC5B,KAAM,oBAERa,EAAYmB,IAAIC,gBAAgBH,EAClC,CACA,MAAMI,EAAS,IAAIC,OAAOtB,EAAW,CAAEb,KAAM,WAE7C,IAAIF,EAAW,EACf,MAAMsC,EAAc,IAAIC,YACxB,IAAInC,QAAarE,KAAK6E,UAAU4B,MAAKjB,GAAQA,EAAKnB,OAElD,MAAMqC,EAAOC,GAAW,IAAIpC,SAAQ,CAACpD,EAASqD,KAC5C,MAAMoC,EAAK,IAAIC,eACfD,EAAGE,MAAM3B,UAAYE,IACfA,EAAIf,gBAAgByC,MAAOvC,EAAOa,EAAIf,MACrCnD,EAAQkE,EAAIf,MACjBsC,EAAGE,MAAMnD,QACTiD,EAAGI,MAAMrD,QACTiD,EAAGE,MAAM3B,UAAY,MAEvBkB,EAAOP,YAAYa,EAAS,CAACC,EAAGI,OAAM,IAKlCpE,QAAaC,UAAUC,QAAQC,eAC/BkE,QAAenC,EAAGoC,IAAIlH,MACtBuB,QAAaqB,EAAKzB,QAAQ8F,GAGhC,GAAa,OAAT1F,EAAe,MAAM,IAAIyB,gBAAgBzD,GAE7C,IAAI4H,QACET,EAAK,CAAEvC,KAAM,OAAQ5C,OAAMrB,KAAMF,KAAKE,QAEV,IAA9BC,GAASiH,yBACLV,EAAK,CAAEvC,KAAM,WAAYE,KAAM,IACrCA,EAAO,GAgFT,OA7EW,IAAI,IAA6B,CAC1CgD,MAAOC,IACLH,EAAaG,GAEf,WAAMpD,CAAMqD,GASV,GAAmB,WALjBA,EAHoBA,GAAO1H,cAAgBkC,OAGnC,IAAKwF,GAEL,CAAEpD,KAAM,QAASG,KAAMiD,EAAOtD,aAG9BE,KAAkB,CAC1B,KAAM,SAAUoD,GAEd,YADMb,EAAK,CAAEvC,KAAM,UACb,IAAInB,gBAAgB4B,EAAO,mCAKnC,GAFA2C,EAAMtD,WAAaA,EAEO,iBAAfsD,EAAMjD,KACfiD,EAAMjD,KAAOiC,EAAYiB,OAAOD,EAAMjD,WAGnC,GAAIiD,EAAMjD,gBAAgBmD,YAC7BF,EAAMjD,KAAO,IAAIoD,WAAWH,EAAMjD,WAG/B,GAAMiD,EAAMjD,gBAAgBoD,aAAeD,YAAYE,OAAOJ,EAAMjD,OAIpE,KAAMiD,EAAMjD,gBAAgBoD,YAAa,CAC5C,MAAME,QAAW,IAAIC,SAASN,EAAMjD,MAAMwD,cAC1CP,EAAMjD,KAAO,IAAIoD,WAAWE,EAC9B,OANEL,EAAMjD,KAAO,IAAIoD,WAAWH,EAAMjD,KAAKyD,OAAQR,EAAMjD,KAAK0D,WAAYT,EAAMjD,KAAK2D,YAQ/EC,OAAOC,UAAUZ,EAAMtD,WAAasD,EAAMtD,UAAY,IACxDA,EAAWsD,EAAMtD,UAEnBA,GAAYsD,EAAMjD,KAAK2D,WACvB5D,GAAQkD,EAAMjD,KAAK2D,UACrB,KAAO,IAAmB,SAAfV,EAAMpD,KAAiB,CAChC,GAAI+D,OAAOC,UAAUZ,EAAMtD,WAAasD,EAAMtD,UAAY,EAAG,CAC3D,GAAII,EAAOkD,EAAMtD,SACf,MAAM,IAAIjB,gBAAgB2B,GAI5B,OAFA7D,QAAQsH,IAAI,UAAWb,QACvBtD,EAAWsD,EAAMtD,SAEnB,CAEE,YADMyC,EAAK,CAAEvC,KAAM,UACb,IAAInB,gBAAgB4B,EAAO,qCAErC,CAAO,GAAmB,aAAf2C,EAAMpD,KAAqB,CACpC,KAAI+D,OAAOC,UAAUZ,EAAMlD,OAASkD,EAAMlD,MAAQ,GAKhD,YADMqC,EAAK,CAAEvC,KAAM,UACb,IAAInB,gBAAgB4B,EAAO,sCAJjCP,EAAOkD,EAAMlD,KACTJ,EAAWI,IAAQJ,EAAWI,EAKtC,QAEMqC,EAAKa,EACb,EACA,WAAM5D,SACE+C,EAAK,CAAEvC,KAAM,UACnBkC,EAAOgC,WACT,EACA,WAAMC,CAAOC,SACL7B,EAAK,CAAEvC,KAAM,QAASoE,WAC5BlC,EAAOgC,WACT,GAIJ,EAEA,MAAMG,EAAO5I,0BAA0BqC,UAAUjB,cACjDpB,0BAA0BqC,UAAUjB,cAAgB0B,kBAAmB+F,GACrE,MAAMlI,QAAeiI,EAAKvF,KAAKjD,QAASyI,GAExC,OADA3D,EAAG4D,IAAInI,EAAQP,MACRO,CACT,CACF,CAEA,sJCnOO,MAAMd,EAAS,CACpBkF,QAAS,CAAC,2BAA4B,qBACtCpF,KAAM,CAAC,2FAA4F,iBACnGoJ,SAAU,CAAC,oEAAqE,qBAChFnJ,QAAS,CAAC,8CAA+C,4BACzDoF,OAAQgE,GAAK,CAAC,6EAA6EA,IAAK,eAChGC,SAAU,CAAC,gJAAiJ,iBAC5JC,WAAY,CAAC,uFAAwF,oBAG1FC,EAAS,CACpB3G,SAAUI,WAAWc,gBAGhBZ,eAAesG,EAAkBxI,GACtCM,QAAQC,KAAK,mFACb,MAAOkI,EAAQC,EAASC,SAAY5E,QAAQ6E,IAAI,CAC9C,8BACA,8BACA,wCAGI1D,EAAS,IAAIuD,EAAOI,aAAa,IAAI,GAM3C,OALA3D,EAAO4D,SAAW9I,EAAQ+I,KAAI5I,GAASA,EAAM6I,OACzC,IAAIN,EAAQO,WAAW9I,GAAO,GAC9B,IAAIuI,EAAQG,aAAa1I,GAAO,KAG7B,IAAIwI,EAAGvJ,0BAA0B8F,EAC1C,CAEOhD,eAAegH,EAAwBC,GAC5C,MAAM,aAAEN,EAAY,WAAEI,SAAqB,+BACrC,0BAAE7J,SAAoC,sCAEtCgK,EAAQC,MAAMC,KAAKH,EAAMC,OACzBG,EAAWH,EAAM,GAAGI,mBAAmBC,MAAM,IAAK,GAAG,GACrDrH,EAAO,IAAIyG,EAAaU,GAAU,GAexC,OAbAH,EAAMM,SAAQ1E,IACZ,MAAMjE,EAAOiE,EAAKwE,mBAAmBC,MAAM,KAC3C1I,EAAK4I,QACL,MAAMjK,EAAOqB,EAAKG,MAENH,EAAK6I,QAAO,CAAC3E,EAAKlE,KACvBkE,EAAI6D,SAAS/H,KAAOkE,EAAI6D,SAAS/H,GAAQ,IAAI8H,EAAa9H,GAAM,IAC9DkE,EAAI6D,SAAS/H,KACnBqB,GAEC0G,SAASpJ,GAAQ,IAAIuJ,EAAWjE,EAAKtF,KAAMsF,GAAM,EAAK,IAGrD,IAAI5F,EAA0BgD,EACvC,CAEOF,eAAe2H,EAAyBV,GAC7C,MAAM,WAAEF,SAAqB,+BACvB,qBAAEhJ,SAA+B,uCAEvC,OAAOoJ,MAAMC,KAAKH,EAAMC,OAAOL,KAAI/D,GACjC,IAAI/E,EAAqB,IAAIgJ,EAAWjE,EAAKtF,KAAMsF,GAAM,KAE7D,mCC9DA,MASA,EATe,CACb8E,eAAgB9H,WAAW8H,eAC3BhH,eAAgBd,WAAWc,eAC3BiH,gBAAiB/H,WAAW+H,gBAC5BvH,aAAcR,WAAWQ,aACzBkD,KAAM1D,WAAW0D,KACjBsE,KAAMhI,WAAWgI,wCCJJhI,WAAWiI,oBCCXjI,WAAWkI,mBAiD1B,MClDM,EAASlI,WAAWmI,mBA0B1B,QAfAjI,eAAmCvC,EAAU,CAAC,GAC5C,GAAI,IAAWA,EAAQyK,gBACrB,OAAO,EAAOzK,GAGZA,EAAQ0K,QACV/J,QAAQC,KAAK,mDACbZ,EAAQ2K,cAAgB3K,EAAQ0K,OAGlC,MAAM,qBAAEpK,SAA+B,wCACjC,WAAEgJ,SAAqB,8BAC7B,OAAO,IAAIhJ,EAAqB,IAAIgJ,EAAWtJ,EAAQ2K,eACzD,ECxBItI,WAAWuI,mBAAqBA,iBAAiB9I,UAAU+I,wBAC7DD,iBAAiB9I,UAAU+I,sBAAwBtI,iBACjD,MAAM/B,EAAQX,KAAKiL,qBAEjB,WAAExB,EAAU,aAAEJ,IACd,0BAAEzJ,IACF,qBAAEa,UACM8D,QAAQ6E,IAAI,CACpB,8BACA,sCACA,yCAGF,OAAOzI,EAAM6I,OACT,IAAI/I,EAAqB,IAAIgJ,EAAW9I,GAAO,IAC/C,IAAIf,EAA0B,IAAIyJ,EAAa1I,GAAO,GAC5D,mEClBF,MAAMjB,EAAWC,OAAO,WAMxB,MAAMuL,EAEJ,CAACxL,GAGDQ,KAEAU,KAGA,WAAAf,CAAaC,GACXE,KAAKY,KAAOd,EAAQc,KACpBZ,KAAKE,KAAOJ,EAAQI,KACpBF,KAAKN,GAAYI,CACnB,CAGA,qBAAMqL,CAAiBC,EAAa,CAAC,GACnC,MAAM,KAAEC,EAAO,QAAWD,EACpB7K,EAASP,KAAKN,GAEpB,GAAIa,EAAO4K,gBACT,OAAO5K,EAAO4K,gBAAgB,CAACE,SAGjC,GAAa,SAATA,EACF,MAAO,UACF,GAAa,cAATA,EACT,OAAO9K,EAAO6B,SAAW,UAAY,SAErC,MAAM,IAAIhC,UAAU,QAAQiL,kCAEhC,CAEA,uBAAMC,EAAmB,KAACD,EAAO,QAAU,CAAC,GAC1C,MAAM9K,EAASP,KAAKN,GACpB,GAAIa,EAAO+K,kBACT,OAAO/K,EAAO+K,kBAAkB,CAACD,SAGnC,GAAa,SAATA,EACF,MAAO,UACF,GAAa,cAATA,EACT,OAAO9K,EAAO6B,SAAW,UAAY,SAErC,MAAM,IAAIhC,UAAU,QAAQiL,kCAEhC,CAQA,YAAME,CAAQpL,EAAU,CAAC,SACjBH,KAAKN,GAAU6L,OAAOpL,EAC9B,CAKA,iBAAMkB,CAAamK,GACjB,OAAIxL,OAASwL,MAETA,GACgB,iBAAVA,GACPxL,KAAKY,OAAS4K,EAAM5K,OACnB4K,EAAM9L,KAEHM,KAAKN,GAAU2B,YAAYmK,EAAM9L,GAC1C,EAGFqC,OAAOC,eAAekJ,EAAiBjJ,UAAWtC,OAAOuC,YAAa,CACpEC,MAAO,mBACPC,UAAU,EACVC,YAAY,EACZC,cAAc,IAIZE,WAAW0I,mBACb1I,WAAW0I,iBAAiBjJ,UAAUkJ,kBAAoB,SAAUC,GAClE,MAAO,SACT,GAGF","sources":["webpack://cbunt-portfolio/./node_modules/.pnpm/native-file-system-adapter@3.0.1/node_modules/native-file-system-adapter/src/FileSystemDirectoryHandle.js","webpack://cbunt-portfolio/./node_modules/.pnpm/native-file-system-adapter@3.0.1/node_modules/native-file-system-adapter/src/FileSystemWritableFileStream.js","webpack://cbunt-portfolio/./node_modules/.pnpm/native-file-system-adapter@3.0.1/node_modules/native-file-system-adapter/src/FileSystemFileHandle.js","webpack://cbunt-portfolio/./node_modules/.pnpm/native-file-system-adapter@3.0.1/node_modules/native-file-system-adapter/src/util.js","webpack://cbunt-portfolio/./node_modules/.pnpm/native-file-system-adapter@3.0.1/node_modules/native-file-system-adapter/src/config.js","webpack://cbunt-portfolio/./node_modules/.pnpm/native-file-system-adapter@3.0.1/node_modules/native-file-system-adapter/src/showDirectoryPicker.js","webpack://cbunt-portfolio/./node_modules/.pnpm/native-file-system-adapter@3.0.1/node_modules/native-file-system-adapter/src/showOpenFilePicker.js","webpack://cbunt-portfolio/./node_modules/.pnpm/native-file-system-adapter@3.0.1/node_modules/native-file-system-adapter/src/showSaveFilePicker.js","webpack://cbunt-portfolio/./node_modules/.pnpm/native-file-system-adapter@3.0.1/node_modules/native-file-system-adapter/src/getOriginPrivateDirectory.js","webpack://cbunt-portfolio/./node_modules/.pnpm/native-file-system-adapter@3.0.1/node_modules/native-file-system-adapter/src/FileSystemHandle.js"],"sourcesContent":["import FileSystemHandle from './FileSystemHandle.js'\nimport { errors } from './util.js'\n\nconst { GONE, MOD_ERR } = errors\n\nconst kAdapter = Symbol('adapter')\n\nclass FileSystemDirectoryHandle extends FileSystemHandle {\n  /** @type {FileSystemDirectoryHandle} */\n  [kAdapter]\n\n  constructor (adapter) {\n    super(adapter)\n    this[kAdapter] = adapter\n  }\n\n  /**\n   * @param {string} name Name of the directory\n   * @param {object} [options]\n   * @param {boolean} [options.create] create the directory if don't exist\n   * @returns {Promise<FileSystemDirectoryHandle>}\n   */\n  async getDirectoryHandle (name, options = {}) {\n    if (name === '') {\n      throw new TypeError(`Name can't be an empty string.`)\n    }\n    if (name === '.' || name === '..' || name.includes('/')) {\n      throw new TypeError(`Name contains invalid characters.`)\n    }\n    options.create = !!options.create\n    const handle = await this[kAdapter].getDirectoryHandle(name, options)\n    return new FileSystemDirectoryHandle(handle)\n  }\n\n  /** @returns {AsyncGenerator<[string, FileSystemHandle | FileSystemDirectoryHandle]>} */\n  async * entries () {\n    const {FileSystemFileHandle} = await import('./FileSystemFileHandle.js')\n\n    for await (const [_, entry] of this[kAdapter].entries())\n      yield [entry.name, entry.kind === 'file'\n        ? new FileSystemFileHandle(entry)\n        : new FileSystemDirectoryHandle(entry)]\n  }\n\n  /** @deprecated use .entries() instead */\n  async * getEntries() {\n    const {FileSystemFileHandle} = await import('./FileSystemFileHandle.js')\n    console.warn('deprecated, use .entries() instead')\n    for await (let entry of this[kAdapter].entries())\n      yield entry.kind === 'file'\n        ? new FileSystemFileHandle(entry)\n        : new FileSystemDirectoryHandle(entry)\n  }\n\n  /**\n   * @param {string} name Name of the file\n   * @param {object} [options]\n   * @param {boolean} [options.create] create the file if don't exist\n   */\n  async getFileHandle (name, options = {}) {\n    const {FileSystemFileHandle} = await import('./FileSystemFileHandle.js')\n    if (name === '') throw new TypeError(`Name can't be an empty string.`)\n    if (name === '.' || name === '..' || name.includes('/')) {\n      throw new TypeError(`Name contains invalid characters.`)\n    }\n    options.create = !!options.create\n    const handle = await this[kAdapter].getFileHandle(name, options)\n    return new FileSystemFileHandle(handle)\n  }\n\n  /**\n   * @param {string} name\n   * @param {object} [options]\n   * @param {boolean} [options.recursive]\n   */\n  async removeEntry (name, options = {}) {\n    if (name === '') {\n      throw new TypeError(`Name can't be an empty string.`)\n    }\n    if (name === '.' || name === '..' || name.includes('/')) {\n      throw new TypeError(`Name contains invalid characters.`)\n    }\n    options.recursive = !!options.recursive // cuz node's fs.rm require boolean\n    return this[kAdapter].removeEntry(name, options)\n  }\n\n  async resolve (possibleDescendant) {\n    if (await possibleDescendant.isSameEntry(this)) {\n      return []\n    }\n\n    const openSet = [{ handle: this, path: [] }]\n\n    while (openSet.length) {\n      let { handle: current, path } = openSet.pop()\n\n      for await (const entry of current.values()) {\n        if (await entry.isSameEntry(possibleDescendant)) {\n          return [...path, entry.name]\n        }\n        if (entry.kind === 'directory') {\n          openSet.push({ handle: entry, path: [...path, entry.name] })\n        }\n      }\n    }\n\n    return null\n  }\n\n  async * keys () {\n    for await (const [name] of this[kAdapter].entries())\n      yield name\n  }\n\n  async * values () {\n    for await (const [_, entry] of this)\n      yield entry\n  }\n\n  [Symbol.asyncIterator]() {\n    return this.entries()\n  }\n}\n\nObject.defineProperty(FileSystemDirectoryHandle.prototype, Symbol.toStringTag, {\n\tvalue: 'FileSystemDirectoryHandle',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n})\n\nObject.defineProperties(FileSystemDirectoryHandle.prototype, {\n\tgetDirectoryHandle: { enumerable: true },\n\tentries: { enumerable: true },\n\tgetFileHandle: { enumerable: true },\n\tremoveEntry: { enumerable: true }\n})\n\nif (globalThis.FileSystemDirectoryHandle) {\n  const proto = globalThis.FileSystemDirectoryHandle.prototype\n\n  proto.resolve = async function resolve (possibleDescendant) {\n    if (await possibleDescendant.isSameEntry(this)) {\n      return []\n    }\n\n    const openSet = [{ handle: this, path: [] }]\n\n    while (openSet.length) {\n      let { handle: current, path } = openSet.pop()\n\n      for await (const entry of current.values()) {\n        if (await entry.isSameEntry(possibleDescendant)) {\n          return [...path, entry.name]\n        }\n        if (entry.kind === 'directory') {\n          openSet.push({ handle: entry, path: [...path, entry.name] })\n        }\n      }\n    }\n\n    return null\n  }\n\n  // Safari allows us operate on deleted files,\n  // so we need to check if they still exist.\n  // Hope to remove this one day.\n  async function ensureDoActuallyStillExist (handle) {\n    const root = await navigator.storage.getDirectory()\n    const path = await root.resolve(handle)\n    if (path === null) { throw new DOMException(...GONE) }\n  }\n\n  const entries = proto.entries\n  proto.entries = async function * () {\n    await ensureDoActuallyStillExist(this)\n    yield * entries.call(this)\n  }\n  proto[Symbol.asyncIterator] = async function * () {\n    yield * this.entries()\n  }\n\n  const removeEntry = proto.removeEntry\n  proto.removeEntry = async function (name, options = {}) {\n    return removeEntry.call(this, name, options).catch(async err => {\n      const unknown = err instanceof DOMException && err.name === 'UnknownError'\n      if (unknown && !options.recursive) {\n        const empty = (await entries.call(this).next()).done\n        if (!empty) { throw new DOMException(...MOD_ERR) }\n      }\n      throw err\n    })\n  }\n}\n\nexport default FileSystemDirectoryHandle\nexport { FileSystemDirectoryHandle }\n","import config from './config.js'\n\nconst { WritableStream } = config\n\nclass FileSystemWritableFileStream extends WritableStream {\n  #writer\n  constructor (writer) {\n    super(writer)\n    this.#writer = writer\n    // Stupid Safari hack to extend native classes\n    // https://bugs.webkit.org/show_bug.cgi?id=226201\n    Object.setPrototypeOf(this, FileSystemWritableFileStream.prototype)\n\n    /** @private */\n    this._closed = false\n  }\n\n  async close () {\n    this._closed = true\n    const w = this.getWriter()\n    const p = w.close()\n    w.releaseLock()\n    return p\n    // return super.close ? super.close() : this.getWriter().close()\n  }\n\n  /** @param {number} position */\n  seek (position) {\n    return this.write({ type: 'seek', position })\n  }\n\n  /** @param {number} size */\n  truncate (size) {\n    return this.write({ type: 'truncate', size })\n  }\n\n  // The write(data) method steps are:\n  write (data) {\n    if (this._closed) {\n      return Promise.reject(new TypeError('Cannot write to a CLOSED writable stream'))\n    }\n\n    // 1. Let writer be the result of getting a writer for this.\n    const writer = this.getWriter()\n\n    // 2. Let result be the result of writing a chunk to writer given data.\n    const result = writer.write(data)\n\n    // 3. Release writer.\n    writer.releaseLock()\n\n    // 4. Return result.\n    return result\n  }\n}\n\nObject.defineProperty(FileSystemWritableFileStream.prototype, Symbol.toStringTag, {\n  value: 'FileSystemWritableFileStream',\n  writable: false,\n  enumerable: false,\n  configurable: true\n})\n\nObject.defineProperties(FileSystemWritableFileStream.prototype, {\n  close: { enumerable: true },\n  seek: { enumerable: true },\n  truncate: { enumerable: true },\n  write: { enumerable: true }\n})\n\n// Safari safari doesn't support writable streams yet.\nif (\n  globalThis.FileSystemFileHandle &&\n  !globalThis.FileSystemFileHandle.prototype.createWritable &&\n  !globalThis.FileSystemWritableFileStream\n) {\n  globalThis.FileSystemWritableFileStream = FileSystemWritableFileStream\n}\n\nexport default FileSystemWritableFileStream\nexport { FileSystemWritableFileStream }\n","import FileSystemHandle from './FileSystemHandle.js'\nimport FileSystemWritableFileStream from './FileSystemWritableFileStream.js'\nimport { errors } from './util.js'\n\nconst { INVALID, SYNTAX, GONE } = errors\n\nconst kAdapter = Symbol('adapter')\n\nclass FileSystemFileHandle extends FileSystemHandle {\n  /** @type {FileSystemFileHandle} */\n  [kAdapter]\n\n  constructor (adapter) {\n    super(adapter)\n    this[kAdapter] = adapter\n  }\n\n  /**\n   * @param  {Object} [options={}]\n   * @param  {boolean} [options.keepExistingData]\n   * @returns {Promise<FileSystemWritableFileStream>}\n   */\n  async createWritable (options = {}) {\n    return new FileSystemWritableFileStream(\n      await this[kAdapter].createWritable(options)\n    )\n  }\n\n  /**\n   * @returns {Promise<File>}\n   */\n  async getFile () {\n    return this[kAdapter].getFile()\n  }\n}\n\nObject.defineProperty(FileSystemFileHandle.prototype, Symbol.toStringTag, {\n  value: 'FileSystemFileHandle',\n  writable: false,\n  enumerable: false,\n  configurable: true\n})\n\nObject.defineProperties(FileSystemFileHandle.prototype, {\n  createWritable: { enumerable: true },\n  getFile: { enumerable: true }\n})\n\n// Safari doesn't support async createWritable streams yet.\nif (\n  globalThis.FileSystemFileHandle &&\n  !globalThis.FileSystemFileHandle.prototype.createWritable\n) {\n  const wm = new WeakMap()\n\n  let workerUrl\n\n  // Worker code that should be inlined (can't use any external functions)\n  const code = () => {\n    let fileHandle, handle\n\n    onmessage = async evt => {\n      const port = evt.ports[0]\n      const cmd = evt.data\n      switch (cmd.type) {\n        case 'open':\n          const file = cmd.name\n\n          let dir = await navigator.storage.getDirectory()\n\n          for (const folder of cmd.path) {\n            dir = await dir.getDirectoryHandle(folder)\n          }\n\n          fileHandle = await dir.getFileHandle(file)\n          handle = await fileHandle.createSyncAccessHandle()\n          break\n        case 'write':\n          handle.write(cmd.data, { at: cmd.position })\n          handle.flush()\n          break\n        case 'truncate':\n          handle.truncate(cmd.size)\n          break\n        case 'abort':\n        case 'close':\n          handle.close()\n          break\n      }\n\n      port.postMessage(0)\n    }\n  }\n\n\n  globalThis.FileSystemFileHandle.prototype.createWritable = async function (options) {\n    // Safari only support writing data in a worker with sync access handle.\n    if (!workerUrl) {\n      const stringCode = `(${code.toString()})()`\n      const blob = new Blob([stringCode], {\n        type: 'text/javascript'\n      })\n      workerUrl = URL.createObjectURL(blob)\n    }\n    const worker = new Worker(workerUrl, { type: 'module' })\n\n    let position = 0\n    const textEncoder = new TextEncoder()\n    let size = await this.getFile().then(file => file.size)\n\n    const send = message => new Promise((resolve, reject) => {\n      const mc = new MessageChannel()\n      mc.port1.onmessage = evt => {\n        if (evt.data instanceof Error) reject(evt.data)\n        else resolve(evt.data)\n        mc.port1.close()\n        mc.port2.close()\n        mc.port1.onmessage = null\n      }\n      worker.postMessage(message, [mc.port2])\n    })\n\n    // Safari also don't support transferable file system handles.\n    // So we need to pass the path to the worker. This is a bit hacky and ugly.\n    const root = await navigator.storage.getDirectory()\n    const parent = await wm.get(this)\n    const path = await root.resolve(parent)\n\n    // Should likely never happen, but just in case...\n    if (path === null) throw new DOMException(...GONE)\n\n    let controller\n    await send({ type: 'open', path, name: this.name })\n\n    if (options?.keepExistingData === false) {\n      await send({ type: 'truncate', size: 0 })\n      size = 0\n    }\n\n    const ws = new FileSystemWritableFileStream({\n      start: ctrl => {\n        controller = ctrl\n      },\n      async write(chunk) {\n        const isPlainObject = chunk?.constructor === Object\n\n        if (isPlainObject) {\n          chunk = { ...chunk }\n        } else {\n          chunk = { type: 'write', data: chunk, position }\n        }\n\n        if (chunk.type === 'write') {\n          if (!('data' in chunk)) {\n            await send({ type: 'close' })\n            throw new DOMException(...SYNTAX('write requires a data argument'))\n          }\n\n          chunk.position ??= position\n\n          if (typeof chunk.data === 'string') {\n            chunk.data = textEncoder.encode(chunk.data)\n          }\n\n          else if (chunk.data instanceof ArrayBuffer) {\n            chunk.data = new Uint8Array(chunk.data)\n          }\n\n          else if (!(chunk.data instanceof Uint8Array) && ArrayBuffer.isView(chunk.data)) {\n            chunk.data = new Uint8Array(chunk.data.buffer, chunk.data.byteOffset, chunk.data.byteLength)\n          }\n\n          else if (!(chunk.data instanceof Uint8Array)) {\n            const ab = await new Response(chunk.data).arrayBuffer()\n            chunk.data = new Uint8Array(ab)\n          }\n\n          if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n            position = chunk.position\n          }\n          position += chunk.data.byteLength\n          size += chunk.data.byteLength\n        } else if (chunk.type === 'seek') {\n          if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n            if (size < chunk.position) {\n              throw new DOMException(...INVALID)\n            }\n            console.log('seeking', chunk)\n            position = chunk.position\n            return // Don't need to enqueue seek...\n          } else {\n            await send({ type: 'close' })\n            throw new DOMException(...SYNTAX('seek requires a position argument'))\n          }\n        } else if (chunk.type === 'truncate') {\n          if (Number.isInteger(chunk.size) && chunk.size >= 0) {\n            size = chunk.size\n            if (position > size) { position = size }\n          } else {\n            await send({ type: 'close' })\n            throw new DOMException(...SYNTAX('truncate requires a size argument'))\n          }\n        }\n\n        await send(chunk)\n      },\n      async close () {\n        await send({ type: 'close' })\n        worker.terminate()\n      },\n      async abort (reason) {\n        await send({ type: 'abort', reason })\n        worker.terminate()\n      },\n    })\n\n    return ws\n  }\n\n  const orig = FileSystemDirectoryHandle.prototype.getFileHandle\n  FileSystemDirectoryHandle.prototype.getFileHandle = async function (...args) {\n    const handle = await orig.call(this, ...args)\n    wm.set(handle, this)\n    return handle\n  }\n}\n\nexport default FileSystemFileHandle\nexport { FileSystemFileHandle }\n","export const errors = {\n  INVALID: ['seeking position failed.', 'InvalidStateError'],\n  GONE: ['A requested file or directory could not be found at the time an operation was processed.', 'NotFoundError'],\n  MISMATCH: ['The path supplied exists, but was not an entry of requested type.', 'TypeMismatchError'],\n  MOD_ERR: ['The object can not be modified in this way.', 'InvalidModificationError'],\n  SYNTAX: m => [`Failed to execute 'write' on 'UnderlyingSinkBase': Invalid params passed. ${m}`, 'SyntaxError'],\n  SECURITY: ['It was determined that certain files are unsafe for access within a Web application, or that too many calls are being made on file resources.', 'SecurityError'],\n  DISALLOWED: ['The request is not allowed by the user agent or the platform in the current context.', 'NotAllowedError']\n}\n\nexport const config = {\n  writable: globalThis.WritableStream\n}\n\nexport async function fromDataTransfer (entries) {\n  console.warn('deprecated fromDataTransfer - use `dt.items[0].getAsFileSystemHandle()` instead')\n  const [memory, sandbox, fs] = await Promise.all([\n    import('./adapters/memory.js'),\n    import('./adapters/sandbox.js'),\n    import('./FileSystemDirectoryHandle.js')\n  ])\n\n  const folder = new memory.FolderHandle('', false)\n  folder._entries = entries.map(entry => entry.isFile\n    ? new sandbox.FileHandle(entry, false)\n    : new sandbox.FolderHandle(entry, false)\n  )\n\n  return new fs.FileSystemDirectoryHandle(folder)\n}\n\nexport async function getDirHandlesFromInput (input) {\n  const { FolderHandle, FileHandle } = await import('./adapters/memory.js')\n  const { FileSystemDirectoryHandle } = await import('./FileSystemDirectoryHandle.js')\n\n  const files = Array.from(input.files)\n  const rootName = files[0].webkitRelativePath.split('/', 1)[0]\n  const root = new FolderHandle(rootName, false)\n\n  files.forEach(file => {\n    const path = file.webkitRelativePath.split('/')\n    path.shift()\n    const name = path.pop()\n\n    const dir = path.reduce((dir, path) => {\n      if (!dir._entries[path]) dir._entries[path] = new FolderHandle(path, false)\n      return dir._entries[path]\n    }, root)\n\n    dir._entries[name] = new FileHandle(file.name, file, false)\n  })\n\n  return new FileSystemDirectoryHandle(root)\n}\n\nexport async function getFileHandlesFromInput (input) {\n  const { FileHandle } = await import('./adapters/memory.js')\n  const { FileSystemFileHandle } = await import('./FileSystemFileHandle.js')\n\n  return Array.from(input.files).map(file =>\n    new FileSystemFileHandle(new FileHandle(file.name, file, false))\n  )\n}\n","const config = {\n  ReadableStream: globalThis.ReadableStream,\n  WritableStream: globalThis.WritableStream,\n  TransformStream: globalThis.TransformStream,\n  DOMException: globalThis.DOMException,\n  Blob: globalThis.Blob,\n  File: globalThis.File,\n}\n\nexport default config\n","/** @typedef {import('./FileSystemDirectoryHandle.js').default} FileSystemDirectoryHandle */\n\nconst native = globalThis.showDirectoryPicker\n\n/**\n * @param {Object} [options]\n * @param {boolean} [options._preferPolyfill] If you rather want to use the polyfill instead of the native\n * @returns {Promise<FileSystemDirectoryHandle>}\n */\nasync function showDirectoryPicker (options = {}) {\n  if (native && !options._preferPolyfill) {\n    return native(options)\n  }\n\n  const input = document.createElement('input')\n  input.type = 'file'\n  input.webkitdirectory = true\n  // Fallback to multiple files input for iOS Safari\n  input.multiple = true\n\n  // See https://stackoverflow.com/questions/47664777/javascript-file-input-onchange-not-working-ios-safari-only\n  input.style.position = 'fixed'\n  input.style.top = '-100000px'\n  input.style.left = '-100000px'\n  document.body.appendChild(input)\n\n  // Lazy load while the user is choosing the directory\n  const p = import('./util.js')\n\n  await new Promise(resolve => {\n    input.addEventListener('change', resolve)\n    input.click()\n  })\n\n  return p.then(mod => mod.getDirHandlesFromInput(input))\n}\n\nexport default showDirectoryPicker\nexport { showDirectoryPicker }\n","/** @typedef {import('./FileSystemFileHandle.js').default} FileSystemFileHandle */\n\nconst def = { accepts: [] }\nconst native = globalThis.showOpenFilePicker\n\n/**\n * @param {Object} [options]\n * @param {boolean} [options.multiple] If you want to allow more than one file\n * @param {boolean} [options.excludeAcceptAllOption=false] Prevent user for selecting any\n * @param {Object[]} [options.accepts] Files you want to accept\n * @param {boolean} [options._preferPolyfill] If you rather want to use the polyfill instead of the native\n * @returns {Promise<FileSystemFileHandle[]>}\n */\nasync function showOpenFilePicker (options = {}) {\n  const opts = { ...def, ...options }\n\n  if (native && !options._preferPolyfill) {\n    return native(opts)\n  }\n\n  const input = document.createElement('input')\n  input.type = 'file'\n  input.multiple = opts.multiple\n  input.accept = (opts.accepts || [])\n    .map(e => [\n      ...(e.extensions || []).map(e => '.' + e),\n      ...e.mimeTypes || []]\n    )\n    .flat()\n    .join(',')\n\n  // See https://stackoverflow.com/questions/47664777/javascript-file-input-onchange-not-working-ios-safari-only\n  Object.assign(input.style, {\n    position: 'fixed',\n    top: '-100000px',\n    left: '-100000px'\n  })\n\n  document.body.appendChild(input)\n\n  // Lazy load while the user is choosing the directory\n  const p = import('./util.js')\n\n  await new Promise(resolve => {\n    input.addEventListener('change', resolve, { once: true })\n    input.click()\n  })\n  input.remove()\n\n  return p.then(m => m.getFileHandlesFromInput(input))\n}\n\nexport default showOpenFilePicker\nexport { showOpenFilePicker }\n","/** @typedef {import('./FileSystemFileHandle.js').default} FileSystemFileHandle */\n\nconst native = globalThis.showSaveFilePicker\n\n/**\n * @param {Object} [options]\n * @param {boolean} [options.excludeAcceptAllOption=false] Prevent user for selecting any\n * @param {Object[]} [options.types] Files you want to accept\n * @param {string} [options.suggestedName] the name to fall back to when using polyfill\n * @param {string} [options._name] the name to fall back to when using polyfill\n * @param {boolean} [options._preferPolyfill] If you rather want to use the polyfill instead of the native\n * @return {Promise<FileSystemFileHandle>}\n */\nasync function showSaveFilePicker (options = {}) {\n  if (native && !options._preferPolyfill) {\n    return native(options)\n  }\n\n  if (options._name) {\n    console.warn('deprecated _name, spec now have `suggestedName`')\n    options.suggestedName = options._name\n  }\n\n  const { FileSystemFileHandle } = await import('./FileSystemFileHandle.js')\n  const { FileHandle } = await import('./adapters/downloader.js')\n  return new FileSystemFileHandle(new FileHandle(options.suggestedName))\n}\n\nexport default showSaveFilePicker\nexport { showSaveFilePicker }\n","/** @typedef {import('./FileSystemDirectoryHandle.js').default} FileSystemDirectoryHandle */\n\nif (globalThis.DataTransferItem && !DataTransferItem.prototype.getAsFileSystemHandle) {\n  DataTransferItem.prototype.getAsFileSystemHandle = async function () {\n    const entry = this.webkitGetAsEntry()\n    const [\n      { FileHandle, FolderHandle },\n      { FileSystemDirectoryHandle },\n      { FileSystemFileHandle }\n    ] = await Promise.all([\n      import('./adapters/sandbox.js'),\n      import('./FileSystemDirectoryHandle.js'),\n      import('./FileSystemFileHandle.js')\n    ])\n\n    return entry.isFile\n      ? new FileSystemFileHandle(new FileHandle(entry, false))\n      : new FileSystemDirectoryHandle(new FolderHandle(entry, false))\n  }\n}\n\n/**\n * @param {object=} driver\n * @return {Promise<FileSystemDirectoryHandle>}\n */\nasync function getOriginPrivateDirectory (driver, options = {}) {\n  if (!driver) {\n    return globalThis.navigator?.storage?.getDirectory() || globalThis.getOriginPrivateDirectory()\n  }\n  const {FileSystemDirectoryHandle} = await import('./FileSystemDirectoryHandle.js')\n  const module = await driver\n  const sandbox = await (module.default\n    ? module.default(options)\n    : module(options)\n  )\n  return new FileSystemDirectoryHandle(sandbox)\n}\n\nexport default getOriginPrivateDirectory\n","const kAdapter = Symbol('adapter')\n\n/**\n * @typedef {Object} FileSystemHandlePermissionDescriptor\n * @property {('read'|'readwrite')} [mode='read']\n */\nclass FileSystemHandle {\n  /** @type {FileSystemHandle} */\n  [kAdapter]\n\n  /** @type {string} */\n  name\n  /** @type {('file'|'directory')} */\n  kind\n\n  /** @param {FileSystemHandle & {writable}} adapter */\n  constructor (adapter) {\n    this.kind = adapter.kind\n    this.name = adapter.name\n    this[kAdapter] = adapter\n  }\n\n  /** @param {FileSystemHandlePermissionDescriptor} descriptor */\n  async queryPermission (descriptor = {}) {\n    const { mode = 'read' } = descriptor\n    const handle = this[kAdapter]\n\n    if (handle.queryPermission) {\n      return handle.queryPermission({mode})\n    }\n\n    if (mode === 'read') {\n      return 'granted'\n    } else if (mode === 'readwrite') {\n      return handle.writable ? 'granted' : 'denied'\n    } else {\n      throw new TypeError(`Mode ${mode} must be 'read' or 'readwrite'`)\n    }\n  }\n\n  async requestPermission ({mode = 'read'} = {}) {\n    const handle = this[kAdapter]\n    if (handle.requestPermission) {\n      return handle.requestPermission({mode})\n    }\n\n    if (mode === 'read') {\n      return 'granted'\n    } else if (mode === 'readwrite') {\n      return handle.writable ? 'granted' : 'denied'\n    } else {\n      throw new TypeError(`Mode ${mode} must be 'read' or 'readwrite'`)\n    }\n  }\n\n  /**\n   * Attempts to remove the entry represented by handle from the underlying file system.\n   *\n   * @param {object} options\n   * @param {boolean} [options.recursive=false]\n   */\n  async remove (options = {}) {\n    await this[kAdapter].remove(options)\n  }\n\n  /**\n   * @param {FileSystemHandle} other\n   */\n  async isSameEntry (other) {\n    if (this === other) return true\n    if (\n      (!other) ||\n      (typeof other !== 'object') ||\n      (this.kind !== other.kind) ||\n      (!other[kAdapter])\n    ) return false\n    return this[kAdapter].isSameEntry(other[kAdapter])\n  }\n}\n\nObject.defineProperty(FileSystemHandle.prototype, Symbol.toStringTag, {\n  value: 'FileSystemHandle',\n  writable: false,\n  enumerable: false,\n  configurable: true\n})\n\n// Safari safari doesn't support writable streams yet.\nif (globalThis.FileSystemHandle) {\n  globalThis.FileSystemHandle.prototype.queryPermission ??= function (descriptor) {\n    return 'granted'\n  }\n}\n\nexport default FileSystemHandle\nexport { FileSystemHandle }\n"],"names":["GONE","MOD_ERR","errors","kAdapter","Symbol","FileSystemDirectoryHandle","constructor","adapter","super","this","getDirectoryHandle","name","options","TypeError","includes","create","handle","entries","FileSystemFileHandle","_","entry","kind","getEntries","console","warn","getFileHandle","removeEntry","recursive","resolve","possibleDescendant","isSameEntry","openSet","path","length","current","pop","values","push","keys","asyncIterator","Object","defineProperty","prototype","toStringTag","value","writable","enumerable","configurable","defineProperties","globalThis","proto","async","ensureDoActuallyStillExist","root","navigator","storage","getDirectory","DOMException","call","catch","err","next","done","WritableStream","FileSystemWritableFileStream","writer","setPrototypeOf","_closed","close","w","getWriter","p","releaseLock","seek","position","write","type","truncate","size","data","Promise","reject","result","createWritable","INVALID","SYNTAX","getFile","wm","WeakMap","workerUrl","code","fileHandle","onmessage","port","evt","ports","cmd","file","dir","folder","createSyncAccessHandle","at","flush","postMessage","stringCode","toString","blob","Blob","URL","createObjectURL","worker","Worker","textEncoder","TextEncoder","then","send","message","mc","MessageChannel","port1","Error","port2","parent","get","controller","keepExistingData","start","ctrl","chunk","encode","ArrayBuffer","Uint8Array","isView","ab","Response","arrayBuffer","buffer","byteOffset","byteLength","Number","isInteger","log","terminate","abort","reason","orig","args","set","MISMATCH","m","SECURITY","DISALLOWED","config","fromDataTransfer","memory","sandbox","fs","all","FolderHandle","_entries","map","isFile","FileHandle","getDirHandlesFromInput","input","files","Array","from","rootName","webkitRelativePath","split","forEach","shift","reduce","getFileHandlesFromInput","ReadableStream","TransformStream","File","showDirectoryPicker","showOpenFilePicker","showSaveFilePicker","_preferPolyfill","_name","suggestedName","DataTransferItem","getAsFileSystemHandle","webkitGetAsEntry","FileSystemHandle","queryPermission","descriptor","mode","requestPermission","remove","other"],"sourceRoot":""}