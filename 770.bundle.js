"use strict";(self.webpackChunkwebgpu_basic=self.webpackChunkwebgpu_basic||[]).push([[770],{838:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GE: () => (/* binding */ TextureFormatToChannelSize),\n/* harmony export */   KO: () => (/* binding */ WebGPUToVkFormat),\n/* harmony export */   Oi: () => (/* binding */ VkFormatToWebGPU),\n/* harmony export */   T2: () => (/* binding */ TextureFormatToSize),\n/* harmony export */   vV: () => (/* binding */ TypeSizes)\n/* harmony export */ });\n/* unused harmony export textureTypeToDimension */\n/* harmony import */ var ktx_parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(380);\n\nconst TypeSizes = {\n    mat4x4Count: 16,\n    sizeofMat4x4f: 16 * Float32Array.BYTES_PER_ELEMENT,\n};\nconst VkFormatToWebGPU = {\n    // 8-bit formats\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8_UNORM */ .VIE]: 'r8unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8_SNORM */ .B7n]: 'r8snorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8_UINT */ .W_U]: 'r8uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8_SINT */ .YeG]: 'r8sint',\n    // 16-bit formats\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R16_UINT */ .HYY]: 'r16uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R16_SINT */ .brc]: 'r16sint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R16_SFLOAT */ .eLQ]: 'r16float',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8G8_UNORM */ .sk6]: 'rg8unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8G8_SNORM */ .aiL]: 'rg8snorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8G8_UINT */ .xWH]: 'rg8uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8G8_SINT */ .$Kq]: 'rg8sint',\n    // 32-bit formats\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R32_UINT */ .nR0]: 'r32uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R32_SINT */ .rwM]: 'r32sint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R32_SFLOAT */ .e4n]: 'r32float',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R16G16_UINT */ .P1c]: 'rg16uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R16G16_SINT */ .bc6]: 'rg16sint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R16G16_SFLOAT */ .cps]: 'rg16float',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8G8B8A8_UNORM */ .tsP]: 'rgba8unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8G8B8A8_SRGB */ .Wm_]: 'rgba8unorm-srgb',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8G8B8A8_SNORM */ .zqn]: 'rgba8snorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8G8B8A8_UINT */ .MZV]: 'rgba8uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8G8B8A8_SINT */ ._Je]: 'rgba8sint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_B8G8R8A8_UNORM */ .J6Z]: 'bgra8unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_B8G8R8A8_SRGB */ .mIY]: 'bgra8unorm-srgb',\n    // Packed 32-bit formats\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 */ .KIZ]: 'rgb9e5ufloat',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_A2R10G10B10_UINT_PACK32 */ .eAA]: 'rgb10a2uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_A2R10G10B10_UNORM_PACK32 */ .fJh]: 'rgb10a2unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_B10G11R11_UFLOAT_PACK32 */ .kot]: 'rg11b10ufloat',\n    // 64-bit formats\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R32G32_UINT */ .nlo]: 'rg32uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R32G32_SINT */ .x9e]: 'rg32sint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R32G32_SFLOAT */ .yAK]: 'rg32float',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R16G16B16A16_UINT */ .CSc]: 'rgba16uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R16G16B16A16_SINT */ .GF$]: 'rgba16sint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R16G16B16A16_SFLOAT */ .l2T]: 'rgba16float',\n    // 128-bit formats\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R32G32B32A32_UINT */ .KMX]: 'rgba32uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R32G32B32A32_SINT */ .KBq]: 'rgba32sint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R32G32B32A32_SFLOAT */ .Ze1]: 'rgba32float',\n    // BC compressed formats usable if \"texture-compression-bc\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC1_RGBA_UNORM_BLOCK */ .QFs]: 'bc1-rgba-unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC1_RGBA_SRGB_BLOCK */ .bOE]: 'bc1-rgba-unorm-srgb',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC2_UNORM_BLOCK */ .wt4]: 'bc2-rgba-unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC2_SRGB_BLOCK */ .ZBp]: 'bc2-rgba-unorm-srgb',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC3_UNORM_BLOCK */ .D_t]: 'bc3-rgba-unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC3_SRGB_BLOCK */ .elk]: 'bc3-rgba-unorm-srgb',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC4_UNORM_BLOCK */ .ydS]: 'bc4-r-unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC4_SNORM_BLOCK */ .iIv]: 'bc4-r-snorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC5_UNORM_BLOCK */ .LHP]: 'bc5-rg-unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC5_SNORM_BLOCK */ .xXb]: 'bc5-rg-snorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC6H_UFLOAT_BLOCK */ .mQu]: 'bc6h-rgb-ufloat',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC6H_SFLOAT_BLOCK */ .CpY]: 'bc6h-rgb-float',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC7_UNORM_BLOCK */ .FD_]: 'bc7-rgba-unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC7_SRGB_BLOCK */ .GJu]: 'bc7-rgba-unorm-srgb',\n    // Currently unsupported extension formats:\n    // ETC2 compressed formats usable if \"texture-compression-etc2\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    // \"etc2-rgb8unorm\",\n    // \"etc2-rgb8unorm-srgb\",\n    // \"etc2-rgb8a1unorm\",\n    // \"etc2-rgb8a1unorm-srgb\",\n    // \"etc2-rgba8unorm\",\n    // \"etc2-rgba8unorm-srgb\",\n    // \"eac-r11unorm\",\n    // \"eac-r11snorm\",\n    // \"eac-rg11unorm\",\n    // \"eac-rg11snorm\",\n    // ASTC compressed formats usable if \"texture-compression-astc\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    // \"astc-4x4-unorm\",\n    // \"astc-4x4-unorm-srgb\",\n    // \"astc-5x4-unorm\",\n    // \"astc-5x4-unorm-srgb\",\n    // \"astc-5x5-unorm\",\n    // \"astc-5x5-unorm-srgb\",\n    // \"astc-6x5-unorm\",\n    // \"astc-6x5-unorm-srgb\",\n    // \"astc-6x6-unorm\",\n    // \"astc-6x6-unorm-srgb\",\n    // \"astc-8x5-unorm\",\n    // \"astc-8x5-unorm-srgb\",\n    // \"astc-8x6-unorm\",\n    // \"astc-8x6-unorm-srgb\",\n    // \"astc-8x8-unorm\",\n    // \"astc-8x8-unorm-srgb\",\n    // \"astc-10x5-unorm\",\n    // \"astc-10x5-unorm-srgb\",\n    // \"astc-10x6-unorm\",\n    // \"astc-10x6-unorm-srgb\",\n    // \"astc-10x8-unorm\",\n    // \"astc-10x8-unorm-srgb\",\n    // \"astc-10x10-unorm\",\n    // \"astc-10x10-unorm-srgb\",\n    // \"astc-12x10-unorm\",\n    // \"astc-12x10-unorm-srgb\",\n    // \"astc-12x12-unorm\",\n};\nconst TextureFormatToSize = {\n    // 8-bit formats\n    r8unorm: 1,\n    r8snorm: 1,\n    r8uint: 1,\n    r8sint: 1,\n    // 16-bit formats\n    r16uint: 2,\n    r16sint: 2,\n    r16float: 2,\n    rg8unorm: 2,\n    rg8snorm: 2,\n    rg8uint: 2,\n    rg8sint: 2,\n    // 32-bit formats\n    r32uint: 4,\n    r32sint: 4,\n    r32float: 4,\n    rg16uint: 4,\n    rg16sint: 4,\n    rg16float: 4,\n    rgba8unorm: 4,\n    'rgba8unorm-srgb': 4,\n    rgba8snorm: 4,\n    rgba8uint: 4,\n    rgba8sint: 4,\n    bgra8unorm: 4,\n    'bgra8unorm-srgb': 4,\n    // Packed 32-bit formats\n    rgb9e5ufloat: 4,\n    rgb10a2uint: 4,\n    rgb10a2unorm: 4,\n    rg11b10ufloat: 4,\n    // 64-bit formats\n    rg32uint: 8,\n    rg32sint: 8,\n    rg32float: 8,\n    rgba16uint: 8,\n    rgba16sint: 8,\n    rgba16float: 8,\n    // 128-bit formats\n    rgba32uint: 16,\n    rgba32sint: 16,\n    rgba32float: 16,\n};\nconst TextureFormatToChannelSize = {\n    // 8-bit formats\n    r8unorm: 1,\n    r8snorm: 1,\n    r8uint: 1,\n    r8sint: 1,\n    // 16-bit formats\n    r16uint: 2,\n    r16sint: 2,\n    r16float: 2,\n    rg8unorm: 1,\n    rg8snorm: 1,\n    rg8uint: 1,\n    rg8sint: 1,\n    // 32-bit formats\n    r32uint: 4,\n    r32sint: 4,\n    r32float: 4,\n    rg16uint: 2,\n    rg16sint: 2,\n    rg16float: 2,\n    rgba8unorm: 1,\n    'rgba8unorm-srgb': 1,\n    rgba8snorm: 1,\n    rgba8uint: 1,\n    rgba8sint: 1,\n    bgra8unorm: 1,\n    'bgra8unorm-srgb': 1,\n    // Packed 32-bit formats\n    rgb9e5ufloat: 4,\n    rgb10a2uint: 4,\n    rgb10a2unorm: 4,\n    rg11b10ufloat: 4,\n    // 64-bit formats\n    rg32uint: 4,\n    rg32sint: 4,\n    rg32float: 4,\n    rgba16uint: 2,\n    rgba16sint: 2,\n    rgba16float: 2,\n    // 128-bit formats\n    rgba32uint: 4,\n    rgba32sint: 4,\n    rgba32float: 4,\n};\nconst WebGPUToVkFormat = Object.fromEntries(Object.entries(VkFormatToWebGPU).map(([vk, wgpu]) => [wgpu, parseInt(vk, 10)]));\nconst textureTypeToDimension = {\n    texture_cube: 'cube',\n    texture_3d: '3d',\n    texture_2d: '2d',\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///838\n")},427:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ cubemap_blur_sample)\n});\n\n// EXTERNAL MODULE: ./node_modules/.pnpm/native-file-system-adapter@3.0.1/node_modules/native-file-system-adapter/src/es6.js + 4 modules\nvar es6 = __webpack_require__(777);\n;// CONCATENATED MODULE: ./public/environment-maps/shoreline.ktx2\nconst shoreline_namespaceObject = __webpack_require__.p + \"cbc03dc5dc89564ca7ef.ktx2\";\n;// CONCATENATED MODULE: ./public/environment-maps/papermill.ktx2\nconst papermill_namespaceObject = __webpack_require__.p + \"9415fdbc706f67f268b7.ktx2\";\n;// CONCATENATED MODULE: ./public/environment-maps/leland-market.ktx2\nconst leland_market_namespaceObject = __webpack_require__.p + \"e17791c0693ab4a8220f.ktx2\";\n// EXTERNAL MODULE: ./src/samples/property-listener.ts\nvar property_listener = __webpack_require__(564);\n// EXTERNAL MODULE: ./node_modules/.pnpm/ktx-parse@0.7.0/node_modules/ktx-parse/dist/ktx-parse.modern.js\nvar ktx_parse_modern = __webpack_require__(380);\n// EXTERNAL MODULE: ./src/rendering/constants.ts\nvar constants = __webpack_require__(838);\n// EXTERNAL MODULE: ./src/utils/general.ts\nvar general = __webpack_require__(986);\n;// CONCATENATED MODULE: ./src/utils/data-copy.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\nfunction createAndCopyBuffer(arr, usage, device, label, alignment = 4) {\n    const pad = alignment - 1;\n    const buffer = device.createBuffer({\n        label,\n        usage,\n        size: (arr.byteLength + pad) & ~pad,\n        mappedAtCreation: true,\n    });\n    const writeArray = new Uint8Array(buffer.getMappedRange());\n    const readArray = arr instanceof ArrayBuffer\n        ? new Uint8Array(arr)\n        : new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n    writeArray.set(readArray);\n    buffer.unmap();\n    return buffer;\n}\nfunction createAndCopyCubemap(device, data, format, usage, label) {\n    const pixelSize = TextureFormatToSize[format];\n    if (pixelSize == null) {\n        throw new Error(`copy cubemap -- unsupported format: ${format}`);\n    }\n    const width = Math.sqrt(data.byteLength / (6 * pixelSize));\n    const size = { width, height: width, depthOrArrayLayers: 6 };\n    const texture = device.createTexture({\n        usage: usage | GPUTextureUsage.COPY_DST,\n        label,\n        format,\n        size,\n    });\n    device.queue.writeTexture({ texture }, data, { bytesPerRow: width * pixelSize, rowsPerImage: width }, size);\n    return texture;\n}\nfunction copyKTX(resource, device, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let buf;\n        if (resource instanceof ArrayBuffer) {\n            buf = resource;\n        }\n        else if (resource instanceof File) {\n            buf = yield resource.arrayBuffer();\n        }\n        else {\n            const response = yield fetch(resource);\n            buf = yield response.arrayBuffer();\n        }\n        const ktx = ktx_parse_modern/* read */.LF4(new Uint8Array(buf));\n        const format = constants/* VkFormatToWebGPU */.Oi[ktx.vkFormat];\n        if (format == null) {\n            throw new Error(`ktx texture import -- unsupported format: ${ktx.vkFormat}\\n\\tCould not covert to webgpu`);\n        }\n        const pixelSize = constants/* TextureFormatToSize */.T2[format];\n        if (pixelSize == null) {\n            throw new Error(`ktx texture import -- unsupported format: ${ktx.vkFormat}\\n\\tCould not get pixel byte size`);\n        }\n        const size = {\n            width: ktx.pixelWidth,\n            height: ktx.pixelHeight,\n            depthOrArrayLayers: ktx.faceCount,\n        };\n        const maxMipCount = Math.ceil(Math.log2(Math.max(size.width, size.height))) + 1;\n        let mipLevelCount = ktx.levels.length;\n        if ((options === null || options === void 0 ? void 0 : options.mipLevelCount) === 'max') {\n            mipLevelCount = maxMipCount;\n        }\n        else if (typeof (options === null || options === void 0 ? void 0 : options.mipLevelCount) === 'number') {\n            mipLevelCount = Math.min(maxMipCount, options.mipLevelCount);\n        }\n        let usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n        if (options === null || options === void 0 ? void 0 : options.textureUsage)\n            usage |= options.textureUsage;\n        const texture = device.createTexture({\n            label: options === null || options === void 0 ? void 0 : options.label,\n            size,\n            mipLevelCount,\n            format,\n            usage,\n        });\n        const mipCopies = Math.min(ktx.levels.length, mipLevelCount) - 1;\n        for (let mipLevel = mipCopies; mipLevel >= 0; mipLevel -= 1) {\n            const width = size.width >> mipLevel;\n            const height = size.height >> mipLevel;\n            const { levelData } = ktx.levels[mipLevel];\n            const rawBytesPerRow = width * pixelSize;\n            const bytesPerRow = Math.max(rawBytesPerRow, 256);\n            const rowsPerImage = height;\n            const bytesPerImage = rowsPerImage * bytesPerRow;\n            let imageData = levelData;\n            if (bytesPerRow > rawBytesPerRow) {\n                imageData = new Uint8Array(bytesPerImage * texture.depthOrArrayLayers);\n                for (let h = 0; h < height * texture.depthOrArrayLayers; h += 1) {\n                    for (let w = 0; w < rawBytesPerRow; w += 1) {\n                        imageData[w + h * bytesPerRow] = levelData[w + h * rawBytesPerRow];\n                    }\n                }\n            }\n            const layerBatch = Math.min(Math.floor(device.limits.maxBufferSize / bytesPerImage), ktx.faceCount);\n            const layerCount = Math.ceil(ktx.faceCount / layerBatch);\n            for (let l = 0; l < layerCount; l += 1) {\n                const offset = l * layerBatch;\n                const count = Math.min(layerBatch, ktx.faceCount - offset);\n                const data = layerCount > 1\n                    ? imageData.subarray(offset * bytesPerImage, (offset + count) * bytesPerImage)\n                    : imageData;\n                device.queue.writeTexture({ mipLevel, texture, origin: [0, 0, offset] }, data, { bytesPerRow, rowsPerImage }, [width, height, count]);\n            }\n        }\n        return texture;\n    });\n}\nfunction textureToArrayBuffer(_a) {\n    return __awaiter(this, arguments, void 0, function* ({ device, texture, mipLevel = 0, returnBuffer, storageBuffer, resultBuffer, description, }) {\n        const pixelSize = constants/* TextureFormatToSize */.T2[texture.format];\n        const fullDescription = (0,general/* padTemplate */.OY) `[textureToKTX${description !== null && description !== void 0 ? description : ''}${texture.label}] --`;\n        if (pixelSize == null) {\n            throw new Error(`${fullDescription} format ${texture.format} unsupported`);\n        }\n        const width = texture.width >> mipLevel;\n        const height = texture.height >> mipLevel;\n        const rawBytesPerRow = width * pixelSize;\n        const bytesPerRow = Math.max(rawBytesPerRow, 256);\n        const rowsPerImage = height;\n        const byteSize = rowsPerImage * bytesPerRow * texture.depthOrArrayLayers;\n        const resultSize = rawBytesPerRow * height * texture.depthOrArrayLayers;\n        if (resultBuffer != null && resultBuffer.byteLength < byteSize) {\n            throw new Error(`${fullDescription} given result array not large enough.\r\n${resultBuffer.byteLength} < ${byteSize}`);\n        }\n        if (storageBuffer != null && storageBuffer.size < byteSize) {\n            throw new Error(`${fullDescription} given storage buffer not large enough.\r\n${storageBuffer.size} < ${byteSize}`);\n        }\n        const requiredUsage = GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ;\n        if (storageBuffer != null && (storageBuffer.usage & requiredUsage) !== requiredUsage) {\n            throw new Error(`${fullDescription} given storage does not have correct usage flags.\r\nGiven: ${storageBuffer.usage}\r\nRequired: ${requiredUsage}`);\n        }\n        let imageData = resultBuffer !== null && resultBuffer !== void 0 ? resultBuffer : new Uint8Array(byteSize);\n        const storage = storageBuffer !== null && storageBuffer !== void 0 ? storageBuffer : device.createBuffer({\n            label: `${fullDescription} storage buffer`,\n            size: byteSize,\n            usage: requiredUsage,\n        });\n        const encoder = device.createCommandEncoder({ label: `${fullDescription} encoder` });\n        encoder.copyTextureToBuffer({ texture, mipLevel }, { buffer: storage, rowsPerImage, bytesPerRow }, { width, height, depthOrArrayLayers: texture.depthOrArrayLayers });\n        device.queue.submit([encoder.finish()]);\n        yield device.queue.onSubmittedWorkDone();\n        yield storage.mapAsync(GPUMapMode.READ, 0, byteSize);\n        const mapped = storage.getMappedRange(0, byteSize);\n        imageData.set(new Uint8Array(mapped));\n        storage.unmap();\n        if (bytesPerRow > rawBytesPerRow) {\n            for (let h = 0; h < height * texture.depthOrArrayLayers; h += 1) {\n                for (let w = 0; w < rawBytesPerRow; w += 1) {\n                    imageData[w + h * rawBytesPerRow] = imageData[w + h * bytesPerRow];\n                }\n            }\n            imageData = imageData.slice(0, resultSize);\n        }\n        return {\n            imageData,\n            storageBuffer: returnBuffer ? storage : undefined,\n        };\n    });\n}\nfunction textureToKTX(device_1, texture_1) {\n    return __awaiter(this, arguments, void 0, function* (device, texture, cube = false) {\n        const pixelSize = constants/* TextureFormatToSize */.T2[texture.format];\n        const typeSize = constants/* TextureFormatToChannelSize */.GE[texture.format];\n        if (pixelSize == null || typeSize == null) {\n            throw new Error(`textureToKTX -- format ${texture.format} of ${texture.label} unsupported`);\n        }\n        const container = new ktx_parse_modern/* KTX2Container */.nYd();\n        container.pixelWidth = texture.width;\n        container.pixelHeight = texture.height;\n        container.vkFormat = constants/* WebGPUToVkFormat */.KO[texture.format];\n        container.typeSize = typeSize;\n        delete container.keyValue.KTXswizzle;\n        const dataFormat = container.dataFormatDescriptor[0];\n        dataFormat.colorModel = ktx_parse_modern/* KHR_DF_MODEL_RGBSDA */.Tre;\n        dataFormat.transferFunction = ktx_parse_modern/* KHR_DF_TRANSFER_LINEAR */.T5j;\n        dataFormat.bytesPlane[0] = pixelSize;\n        dataFormat.samples = [0, 1, 2, 3].map((i) => ({\n            channelType: [192, 193, 194, 207][i],\n            samplePosition: [0, 0, 0, 0],\n            bitLength: container.typeSize * 8 - 1,\n            bitOffset: container.typeSize * 8 * i,\n            sampleLower: -1082130432,\n            sampleUpper: 1065353216,\n        }));\n        if (texture.dimension === '3d') {\n            container.faceCount = 1;\n            container.pixelDepth = texture.depthOrArrayLayers;\n        }\n        else if (cube) {\n            const cubeLayers = texture.depthOrArrayLayers / 6;\n            container.layerCount = cubeLayers === 1 ? 0 : cubeLayers;\n            container.faceCount = 6;\n        }\n        else {\n            container.layerCount = texture.depthOrArrayLayers;\n            container.faceCount = 1;\n        }\n        let storageBuffer;\n        let imageData;\n        for (let i = 0; i < texture.mipLevelCount; i += 1) {\n            // eslint-disable-next-line no-await-in-loop\n            ({ imageData, storageBuffer } = yield textureToArrayBuffer({\n                mipLevel: i,\n                returnBuffer: true,\n                device,\n                texture,\n                storageBuffer,\n            }));\n            container.levels.push({\n                levelData: imageData,\n                uncompressedByteLength: imageData.byteLength,\n            });\n        }\n        return ktx_parse_modern/* write */.M98(container);\n    });\n}\n\n;// CONCATENATED MODULE: ./src/samples/cubemap-blur/cubemap-guassian-pyramid.ts\n/* eslint @stylistic/max-len: \"error\" */\nvar cubemap_guassian_pyramid_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n/**\n *  WGSL functions for sampling across adjacent faces of a cubemap\n */\nconst cubemapSampling = /* wgsl */ `\r\n    const INVALID_FACE = 6;\r\n    const INVALID_IDX = 4294967295u; // max u32\r\n\r\n    fn cubeSampleCoord(coord: vec3i, w: u32) -> vec3u {\r\n        // a flattened matrix of destination faces based on\r\n        // starting face and direction\r\n        const dfaces = array(\r\n            //                               I  Up Down Left Right Invalid\r\n            0, 2, 3, 4, 5, INVALID_FACE, // +X  +Y   -Y   +Z   -Z   \r\n            1, 2, 3, 5, 4, INVALID_FACE, // -X  +Y   -Y   -Z   +Z \r\n            2, 5, 4, 1, 0, INVALID_FACE, // +Y  -Z   +Z   -X   +X \r\n            3, 4, 5, 1, 0, INVALID_FACE, // -Y  +Z   -Z   -X   +X \r\n            4, 2, 3, 1, 0, INVALID_FACE, // +Z  +Y   -Y   -X   +X \r\n            5, 2, 3, 0, 1, INVALID_FACE, // -Z  +Y   -Y   +X   -X \r\n        );\r\n\r\n        // a flattend matrix in the same form as dfaces\r\n        // giving the index of the damts array containing \r\n        // the transformation from the starting face to \r\n        // the destination face\r\n        const dindices = array(\r\n            0, 1,  2,  3,  4,  0,\r\n            0, 5,  6,  3,  4,  0,\r\n            0, 7,  8,  9,  10, 0,\r\n            0, 11, 12, 13, 14, 0,\r\n            0, 11, 8,  3,  4,  0,\r\n            0, 7,  12, 3,  4,  0,\r\n        );\r\n\r\n        // 2x4 martices transforming a coordinate vector <u, v, w, 1>\r\n        // from one face to another\r\n        const dmats = array(\r\n            array(// 0\r\n                vec4(1, 0, 0, 0),   // u = u\r\n                vec4(0, 1, 0, 0),   // v = v\r\n            ),\r\n            array(// 1\r\n                vec4(0, 1, 1, 0),   // u = v + w\r\n                vec4(-1, 0, 1, -1), // v = w - u - 1\r\n            ),\r\n            array(// 2\r\n                vec4(0, -1, 2, -1), // u = 2w - v - 1\r\n                vec4(1, 0, 0, 0),   // v = u\r\n            ),\r\n            array(// 3\r\n                vec4(1, 0, 1, 0),   // u = u + w\r\n                vec4(0, 1, 0, 0),   // v = v\r\n            ),\r\n            array(// 4\r\n                vec4(1, 0, -1, 0),  // u = u - w\r\n                vec4(0, 1, 0, 0),   // v = v\r\n            ),\r\n            array(// 5\r\n                vec4(0, -1, 0, -1), // u = -v - 1\r\n                vec4(1, 0, 0, 0),   // v = u\r\n            ),\r\n            array(// 6\r\n                vec4(0, 1, -1, 0),  // u = v - w\r\n                vec4(-1, 0, 1, -1), // v = w - u - 1\r\n            ),\r\n            array(// 7\r\n                vec4(-1, 0, 1, -1), // u = w - u - 1\r\n                vec4(0, -1, 0, -1), // v = -v - 1\r\n            ),\r\n            array(// 8\r\n                vec4(1, 0, 0, 0),   // u = u\r\n                vec4(0, 1, -1, 0),  // v = v - w\r\n            ),\r\n            array(// 9\r\n                vec4(0, 1, 0, 0),   // u = v\r\n                vec4(-1, 0, 0, -1), // v = -u - 1\r\n            ),\r\n            array(// 10\r\n                vec4(0, -1, 1, -1), // u = w - v - 1\r\n                vec4(1, 0, -1, 0),  // v = u - w\r\n            ),\r\n            array(// 11\r\n                vec4(1, 0, 0, 0),   // u = u\r\n                vec4(0, 1, 1, 0),   // v = v + w\r\n            ),\r\n            array(// 12\r\n                vec4(-1, 0, 1, -1), // u = w - u - 1\r\n                vec4(0, -1, 2, -1), // v = 2w - v - 1\r\n            ),\r\n            array(// 13\r\n                vec4(0, -1, 1, -1), // u = w - v - 1\r\n                vec4(1, 0, 1, 0),   // v = u + w\r\n            ),\r\n            array(// 14\r\n                vec4(0, 1, 0, 0),   // u = v\r\n                vec4(-1, 0, 2, -1), // v = 2w - u - 1\r\n            ),\r\n        );\r\n\r\n        let iw = i32(w);\r\n\r\n        var dir = 0;\r\n        if (\r\n            coord.y >= iw * 2 - 1 \r\n            || coord.y <= -iw \r\n            || coord.x >= iw * 2 - 1 \r\n            || coord.x <= -iw\r\n        ) {\r\n            dir = 5;\r\n        } else {\r\n            if (coord.y < 0) {\r\n                dir = 1;\r\n            } else if (coord.y >= iw) {\r\n                dir = 2;\r\n            }\r\n            if (coord.x < 0) {\r\n                dir = select(5, 3, dir == 0);\r\n            } else if (coord.x >= iw) {\r\n                dir = select(5, 4, dir == 0);\r\n            }\r\n        }\r\n\r\n        let idx = coord.z * 6 + dir;\r\n        let samp = vec4(coord.xy, iw, 1);\r\n        let dmat = dmats[dindices[idx]];\r\n        return vec3u(vec3(dot(dmat[0], samp), dot(dmat[1], samp), dfaces[idx]));\r\n    }\r\n\r\n    fn cubeCoordToIdx(coord: vec3u, w: u32) -> u32 {\r\n        return coord.x + coord.y * w + coord.z * w * w;\r\n    }\r\n\r\n    fn cubeIdxToCoord(idx: u32, w: u32) -> vec3u {\r\n        let w2 = w * w;\r\n        let fidx = idx % w2;\r\n        return vec3u(fidx % w, fidx / w, idx / w2);\r\n    }\r\n\r\n    fn cubeSampleIdx(uvf: vec3i, w: u32) -> u32 {\r\n        let coord = cubeSampleCoord(uvf, w);\r\n        return select(\r\n            cubeCoordToIdx(coord, w), \r\n            INVALID_IDX, \r\n            coord.z == INVALID_FACE,\r\n        );\r\n    }\r\n`;\nconst createMipBlurCode = (groups, format) => /* wgsl */ `\r\n    ${cubemapSampling}\r\n\r\n    override STEPS: i32 = 4;\r\n\r\n    fn to_world_coords(coord: vec3u, size: u32) -> vec3f {\r\n        let uv = (2.0 / f32(size)) * (vec2f(coord.xy) + 0.5) - 1.0;\r\n\r\n        var pos: vec3f;\r\n        switch (coord.z) {\r\n            case 0  { pos = vec3(  1.0, -uv.y, -uv.x); }\r\n            case 1  { pos = vec3( -1.0, -uv.y,  uv.x); }\r\n            case 2  { pos = vec3( uv.x,   1.0,  uv.y); }\r\n            case 3  { pos = vec3( uv.x,  -1.0, -uv.y); }\r\n            case 4  { pos = vec3( uv.x, -uv.y,   1.0); }\r\n            default { pos = vec3(-uv.x, -uv.y,  -1.0); }\r\n        }\r\n\r\n        return normalize(pos);\r\n    }\r\n\r\n    @group(0) @binding(0) var previousMip: texture_2d_array<f32>;\r\n\r\n    @group(0) @binding(1) \r\n    var outputTexture: texture_storage_2d_array<${format}, write>;\r\n\r\n    // simga[0] resevered for work offset\r\n    @group(0) @binding(2) var<storage> sigmas : array<f32>;\r\n    \r\n    @compute @workgroup_size(${groups}, 1, 1)\r\n    fn main(@builtin(global_invocation_id) gid: vec3u) {\r\n        let mipSize = textureDimensions(outputTexture).x;\r\n\r\n        let idx = gid.x + u32(sigmas[0]);\r\n        let faceSize = mipSize * mipSize;\r\n        let faceIdx = idx % faceSize;\r\n        let coord = vec3u(\r\n            faceIdx % mipSize, \r\n            faceIdx / mipSize, \r\n            idx / faceSize,\r\n        ); \r\n\r\n        if (coord.x >= mipSize || coord.y >= mipSize || coord.z >= 6) { \r\n            return; \r\n        }\r\n\r\n        let previousSize = textureDimensions(previousMip).x;\r\n        let baseCoord = vec3i(vec3u(coord.x * 2, coord.y * 2, coord.z));\r\n        let pos = to_world_coords(vec3u(coord), mipSize);\r\n\r\n        let size = arrayLength(&sigmas);\r\n        let level = size - u32(ceil(log2(f32(previousSize))));\r\n        let sigma = sigmas[level];\r\n        let guassian_factor = -0.5 / (sigma * sigma);\r\n\r\n        var weight = 0.0;\r\n        var res = vec3(0.0);\r\n\r\n        for (var u = -STEPS; u <= STEPS + 1; u += 1) {\r\n            for (var v = -STEPS; v <= STEPS + 1; v += 1) {\r\n                let offsetCoord = baseCoord + vec3i(u, v, 0);\r\n                let sample = cubeSampleCoord(offsetCoord, previousSize);\r\n                if (sample.z == INVALID_FACE) { continue; }\r\n\r\n                let samplePos = to_world_coords(sample, previousSize);\r\n                let x = max(0.0, acos(dot(samplePos, pos)));\r\n                let w = exp(x * x * guassian_factor);\r\n                let color = textureLoad(previousMip, sample.xy, sample.z, 0);\r\n\r\n                res += color.rgb * w;\r\n                weight += w;\r\n            }\r\n        }\r\n\r\n        textureStore(outputTexture, coord.xy, coord.z, vec4(res / weight, 1));\r\n    }\r\n`;\n// the minimum angular distance between any pixel on a cubemap\n// of the given face width and any pixel lying on a perimeter\n// the given number of steps away\nfunction minStepDistance(steps, width) {\n    // the angular distance\n    // from the uvf: face = 0, u = 0, and v = width - Math.floor(steps / 2) - 1\n    // to the uvf: face = 3, u = 2 * width - baseV - steps - 2, and v = 0 or 1\n    // It's likely possible to programitically determine whether the destition\n    // pixel should be v = 0 or v = 1, but checking both works fine\n    const nextMipWidth = width >> 1;\n    const baseV = nextMipWidth - Math.floor(steps / 4) - 1;\n    const baseVN = (2 / nextMipWidth) * (baseV + 0.5) - 1;\n    const baseUN = (1 / nextMipWidth) - 1;\n    const baseMag2 = 1 + baseVN * baseVN + baseUN * baseUN;\n    const sampU = 2 * width - (baseV * 2) - steps - 2;\n    const sampUN = (2 / width) * (sampU + 0.5) - 1;\n    const samp0VN = (1 / width) - 1;\n    const samp0Mag2 = 1 + sampUN * sampUN + samp0VN * samp0VN;\n    const samp1VN = (3 / width) - 1;\n    const samp1Mag2 = 1 + sampUN * sampUN + samp1VN * samp1VN;\n    const dot0 = (sampUN + baseVN + samp0VN * baseUN)\n        / Math.sqrt(samp0Mag2 * baseMag2);\n    const dot1 = (sampUN + baseVN + samp1VN * baseUN)\n        / Math.sqrt(samp1Mag2 * baseMag2);\n    return Math.min(1 - dot0, 1 - dot1);\n}\nfunction cubemapGuassianPyramid(_a) {\n    return cubemap_guassian_pyramid_awaiter(this, arguments, void 0, function* ({ device, texture, outputTextureLabel, inPlace = false, minWidth = 8, steps = 4, maxOpsPerPass = 6 * (Math.pow((32 * 256), 2)), delayWork = (fn) => { void fn(); }, labelTag = `${cubemapGuassianPyramid.name} --`, }) {\n        const { width, format } = texture;\n        const mipLevelCount = inPlace\n            ? texture.mipLevelCount\n            : (Math.log2(width) - Math.log2(minWidth) + 1);\n        if (mipLevelCount <= 1)\n            return texture;\n        const groups = Math.min(device.limits.maxComputeWorkgroupSizeX, device.limits.maxComputeInvocationsPerWorkgroup);\n        const maxWorkgroups = device.limits.maxComputeWorkgroupsPerDimension;\n        const shader = device.createShaderModule({\n            label: `${labelTag} shader`,\n            code: createMipBlurCode(groups, format),\n        });\n        const bindgroupLayout = device.createBindGroupLayout({\n            label: `${labelTag} bindgroup layout`,\n            entries: [\n                {\n                    binding: 0,\n                    texture: { viewDimension: '2d-array' },\n                    visibility: GPUShaderStage.COMPUTE,\n                },\n                {\n                    binding: 1,\n                    storageTexture: {\n                        access: 'write-only',\n                        viewDimension: '2d-array',\n                        format,\n                    },\n                    visibility: GPUShaderStage.COMPUTE,\n                },\n                {\n                    binding: 2,\n                    buffer: { type: 'read-only-storage' },\n                    visibility: GPUShaderStage.COMPUTE,\n                },\n            ],\n        });\n        const pipeline = device.createComputePipeline({\n            label: `${labelTag} pipeline`,\n            layout: device.createPipelineLayout({\n                label: `${labelTag} -- pipeline layout`,\n                bindGroupLayouts: [bindgroupLayout],\n            }),\n            compute: {\n                module: shader,\n                entryPoint: 'main',\n                constants: { STEPS: Math.ceil(steps) },\n            },\n        });\n        let gaussianPyramid = texture;\n        if (!inPlace) {\n            const size = { width, height: width, depthOrArrayLayers: 6 };\n            gaussianPyramid = device.createTexture({\n                label: outputTextureLabel,\n                usage: GPUTextureUsage.STORAGE_BINDING\n                    | GPUTextureUsage.TEXTURE_BINDING\n                    | GPUTextureUsage.COPY_SRC\n                    | GPUTextureUsage.COPY_DST,\n                dimension: '2d',\n                format,\n                mipLevelCount,\n                size,\n            });\n            const copyEncoder = device.createCommandEncoder({\n                label: `${labelTag} copy encoder`,\n            });\n            copyEncoder.copyTextureToTexture({ texture, mipLevel: 0 }, { texture: gaussianPyramid, mipLevel: 0 }, size);\n            device.queue.submit([copyEncoder.finish()]);\n            yield device.queue.onSubmittedWorkDone();\n        }\n        const mipViews = (0,general/* mapRange */._b)(mipLevelCount, (i) => gaussianPyramid.createView({\n            label: `${labelTag} mip view ${i}`,\n            dimension: '2d-array',\n            baseMipLevel: i,\n            mipLevelCount: 1,\n        }));\n        const maxDispatches = Math.max((maxOpsPerPass / ((Math.pow((1 + (steps * 2)), 2)) * groups)) | 0, 1);\n        const maxLayers = Math.ceil(Math.log2(width));\n        const propertyArray = new Float32Array([0, ...(0,general/* mapRange */._b)(maxLayers, (i) => {\n                const w = width >> i;\n                return Math.acos(1 - minStepDistance(Math.min(w, steps), w)) / 3;\n            })]);\n        const propertyBuffer = createAndCopyBuffer(propertyArray, GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST, device);\n        yield new Promise((resolve) => {\n            let mipLevel = 0;\n            let mipPasses = 0;\n            let requiredMipDispatches = 0;\n            let currentMipDispatches = 0;\n            let batchDispatches = 0;\n            let bindgroup;\n            function runPass() {\n                return cubemap_guassian_pyramid_awaiter(this, void 0, void 0, function* () {\n                    if (currentMipDispatches >= requiredMipDispatches) {\n                        mipLevel += 1;\n                        currentMipDispatches = 0;\n                        mipPasses = 0;\n                        if (mipLevel >= mipLevelCount) {\n                            resolve();\n                            return;\n                        }\n                        const mipPixels = 6 * (Math.pow((width >> mipLevel), 2));\n                        requiredMipDispatches = Math.ceil(mipPixels / groups);\n                        bindgroup = device.createBindGroup({\n                            layout: bindgroupLayout,\n                            entries: [\n                                {\n                                    binding: 0,\n                                    resource: mipViews[mipLevel - 1],\n                                },\n                                {\n                                    binding: 1,\n                                    resource: mipViews[mipLevel],\n                                },\n                                {\n                                    binding: 2,\n                                    resource: { buffer: propertyBuffer },\n                                },\n                            ],\n                        });\n                    }\n                    propertyArray[0] = currentMipDispatches * groups;\n                    device.queue.writeBuffer(propertyBuffer, 0, propertyArray, 0, 1);\n                    const passDispatches = Math.min(requiredMipDispatches - currentMipDispatches, maxDispatches - batchDispatches, maxWorkgroups);\n                    const passEncoder = device.createCommandEncoder({\n                        label: `${labelTag} mip ${mipLevel}, pass ${mipPasses} encoder`,\n                    });\n                    const pass = passEncoder.beginComputePass({\n                        label: `${labelTag} mip ${mipLevel}, pass ${mipPasses}`,\n                    });\n                    pass.setPipeline(pipeline);\n                    pass.setBindGroup(0, bindgroup);\n                    pass.dispatchWorkgroups(passDispatches, 1, 1);\n                    pass.end();\n                    device.queue.submit([passEncoder.finish()]);\n                    currentMipDispatches += passDispatches;\n                    batchDispatches += passDispatches;\n                    mipPasses += 1;\n                    if (batchDispatches >= maxDispatches) {\n                        batchDispatches = 0;\n                        yield device.queue.onSubmittedWorkDone();\n                        delayWork(runPass);\n                    }\n                    else {\n                        void runPass();\n                    }\n                });\n            }\n            void runPass();\n        });\n        return gaussianPyramid;\n    });\n}\n\n;// CONCATENATED MODULE: ./src/samples/cubemap-blur/cubemap-blur-sample.ts\nvar cubemap_blur_sample_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CubemapBlurModel_settings;\n\n\n\n\n\n\n\n\nvar BlurState;\n(function (BlurState) {\n    BlurState[BlurState[\"IDLE\"] = 0] = \"IDLE\";\n    BlurState[BlurState[\"BLUR\"] = 1] = \"BLUR\";\n    BlurState[BlurState[\"WAIT\"] = 2] = \"WAIT\";\n})(BlurState || (BlurState = {}));\nclass CubemapBlurModel {\n    constructor(device, skyboxTarget, target) {\n        this.device = device;\n        this.skyboxTarget = skyboxTarget;\n        this.colorAttachment = {\n            clearValue: { r: 0, g: 0, b: 0, a: 1 },\n            loadOp: 'clear',\n            storeOp: 'store',\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            view: undefined,\n        };\n        this.passDescriptor = { colorAttachments: [this.colorAttachment] };\n        this.state = BlurState.IDLE;\n        _CubemapBlurModel_settings.set(this, (0,property_listener/* default */.A)({\n            nearestSample: {\n                [property_listener/* ListenerSyms */.t.$type]: 'checkbox',\n                [property_listener/* ListenerSyms */.t.$callback]: (val) => {\n                    if (typeof val === 'boolean')\n                        this.skyboxTarget.useNearestSample = val;\n                },\n                value: this.skyboxTarget.useNearestSample,\n                description: 'Disables linear sampling in the viewer.',\n            },\n            mipLevel: {\n                [property_listener/* ListenerSyms */.t.$type]: 'slider',\n                [property_listener/* ListenerSyms */.t.$callback]: (value) => {\n                    if (typeof value === 'number')\n                        this.skyboxTarget.mipLevel = value;\n                },\n                value: 0,\n                min: 0,\n                max: 1,\n                step: 0.1,\n                description: 'The mip level to display in the viewer. 0 is the orignal image, max is completely blurred with 1 pixel faces.',\n            },\n            filterDistance: {\n                [property_listener/* ListenerSyms */.t.$type]: 'slider',\n                [property_listener/* ListenerSyms */.t.$callback]: this.reblur.bind(this),\n                value: 2,\n                max: 64,\n                min: 0,\n                step: 0.1,\n                description: 'The number of pixels to blur from.',\n            },\n            skybox: {\n                [property_listener/* ListenerSyms */.t.$type]: 'file',\n                [property_listener/* ListenerSyms */.t.$callback]: (val, key) => {\n                    if (key === 'value' && val != null)\n                        void val.then(this.setSkybox.bind(this));\n                },\n                accept: '.ktx2',\n                selection: {\n                    value: 'papermill',\n                    initialValues: (0,general/* mapValues */.LG)({ papermill: papermill_namespaceObject, shoreline: shoreline_namespaceObject, market: leland_market_namespaceObject }, this.processSkybox.bind(this)),\n                },\n                process: this.processSkybox.bind(this),\n            },\n            'Download Result': {\n                [property_listener/* ListenerSyms */.t.$type]: 'button',\n                onClick: () => { void this.saveFile(); },\n            },\n        }));\n        this.settings = __classPrivateFieldGet(this, _CubemapBlurModel_settings, \"f\").publicSettings;\n        this.depthTexture = device.createTexture({\n            dimension: '2d',\n            format: 'depth32float',\n            size: { width: 1, height: 1 },\n            usage: GPUTextureUsage.RENDER_ATTACHMENT\n                | GPUTextureUsage.TEXTURE_BINDING,\n        });\n        this.depthTextureView = this.depthTexture.createView();\n        this.colorAttachment.view = target.view;\n        const encoder = device.createCommandEncoder({ label: 'cubemap blur dummy depth encoder' });\n        const pass = encoder.beginRenderPass({\n            colorAttachments: [],\n            depthStencilAttachment: {\n                depthClearValue: 1,\n                depthLoadOp: 'clear',\n                depthStoreOp: 'store',\n                view: this.depthTextureView,\n            },\n        });\n        pass.end();\n        this.device.queue.submit([encoder.finish()]);\n    }\n    render(encoder) {\n        return encoder.beginRenderPass(this.passDescriptor);\n    }\n    setTarget(view) {\n        this.colorAttachment.view = view.view;\n    }\n    processSkybox(file) {\n        return copyKTX(file, this.device, {\n            mipLevelCount: 'max',\n            textureUsage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.COPY_SRC,\n            validate: true,\n        });\n    }\n    setSkybox(resource) {\n        return cubemap_blur_sample_awaiter(this, void 0, void 0, function* () {\n            this.skybox = resource instanceof GPUTexture\n                ? resource\n                : yield this.processSkybox(resource);\n            __classPrivateFieldGet(this, _CubemapBlurModel_settings, \"f\").privateSettings.mipLevel.max = this.skybox.mipLevelCount - 1;\n            __classPrivateFieldGet(this, _CubemapBlurModel_settings, \"f\").privateSettings.mipLevel.value = 1;\n            this.skyboxTarget.mipLevel = 1;\n            void this.reblur();\n        });\n    }\n    resolve() {\n        this.refresh();\n        const lastState = this.state;\n        this.state = BlurState.IDLE;\n        if (lastState === BlurState.WAIT)\n            void this.reblur();\n    }\n    reblur() {\n        return cubemap_blur_sample_awaiter(this, void 0, void 0, function* () {\n            if (this.skybox == null || this.state === BlurState.WAIT)\n                return;\n            if (this.state === BlurState.BLUR) {\n                this.state = BlurState.WAIT;\n                return;\n            }\n            this.state = BlurState.BLUR;\n            yield cubemapGuassianPyramid({\n                device: this.device,\n                texture: this.skybox,\n                inPlace: true,\n                steps: this.settings.filterDistance.value,\n                delayWork: requestAnimationFrame,\n            });\n            this.resolve();\n        });\n    }\n    refresh() {\n        if (this.skybox == null)\n            return;\n        this.skyboxTarget.skyTexture = this.skybox.createView({ dimension: 'cube' });\n    }\n    saveFile() {\n        return cubemap_blur_sample_awaiter(this, void 0, void 0, function* () {\n            if (this.skybox == null)\n                return;\n            try {\n                const proms = Promise.all([\n                    textureToKTX(this.device, this.skybox, true),\n                    (0,es6/* showSaveFilePicker */.H1)({\n                        types: [{ accept: { 'image/ktx2': ['.ktx2'] } }],\n                        suggestedName: 'blured-skybox.ktx2',\n                    }).then((handle) => handle.createWritable({ keepExistingData: false })),\n                ]);\n                const [ktx2, stream] = yield proms;\n                yield new Blob([ktx2], { type: 'image/ktx2' }).stream().pipeTo(stream);\n            }\n            catch (e) {\n                console.warn(e);\n            }\n        });\n    }\n}\n_CubemapBlurModel_settings = new WeakMap();\nCubemapBlurModel.title = '';\nCubemapBlurModel.description = '';\n/* harmony default export */ const cubemap_blur_sample = (CubemapBlurModel);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///427\n")}}]);