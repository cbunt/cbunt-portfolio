/*! For license information see: https://cbunt.ing/oss-licenses.json */
"use strict";(self.webpackChunkcbunt_portfolio=self.webpackChunkcbunt_portfolio||[]).push([[253],{9253:(t,e,n)=>{n.d(e,{$Kq:()=>u,B7n:()=>c,CSc:()=>M,CpY:()=>nt,D_t:()=>G,FD_:()=>st,GF$:()=>P,GJu:()=>it,HYY:()=>x,J6Z:()=>d,KBq:()=>E,KIZ:()=>Z,KMX:()=>j,LHP:()=>$,M98:()=>Ut,MZV:()=>D,P1c:()=>F,QFs:()=>z,T5j:()=>l,Tre:()=>a,VIE:()=>o,W_U:()=>h,Wm_:()=>w,YeG:()=>p,ZBp:()=>q,Ze1:()=>H,_Je:()=>m,aiL:()=>y,bOE:()=>J,bc6:()=>I,brc:()=>k,cps:()=>C,e4n:()=>V,eAA:()=>v,eLQ:()=>A,elk:()=>Q,fJh:()=>L,iIv:()=>R,kot:()=>Y,l2T:()=>S,mIY:()=>B,mQu:()=>et,nR0:()=>T,nYd:()=>at,nlo:()=>W,rwM:()=>O,sk6:()=>g,tsP:()=>U,wt4:()=>X,x9e:()=>K,xWH:()=>f,xXb:()=>tt,yAK:()=>_,ydS:()=>N,zqn:()=>b});const s=0,i=0,a=1,l=1,r=64,o=9,c=10,h=13,p=14,g=16,y=17,f=20,u=21,U=37,b=38,D=41,m=42,w=43,d=44,B=50,L=58,v=62,x=74,k=75,A=76,F=81,I=82,C=83,M=95,P=96,S=97,T=98,O=99,V=100,W=101,K=102,_=103,j=107,E=108,H=109,Y=122,Z=123,z=133,J=134,X=135,q=136,G=137,Q=138,N=139,R=140,$=141,tt=142,et=143,nt=144,st=145,it=146;class at{constructor(){this.vkFormat=0,this.typeSize=1,this.pixelWidth=0,this.pixelHeight=0,this.pixelDepth=0,this.layerCount=0,this.faceCount=1,this.supercompressionScheme=s,this.levels=[],this.dataFormatDescriptor=[{vendorId:0,descriptorType:i,descriptorBlockSize:0,versionNumber:2,colorModel:0,colorPrimaries:1,transferFunction:2,flags:0,texelBlockDimension:[0,0,0,0],bytesPlane:[0,0,0,0,0,0,0,0],samples:[]}],this.keyValue={},this.globalData=null}}const lt=344==n.j?"KTX-Parse v0.7.1":null,rt=new Uint8Array([0]),ot=344==n.j?[171,75,84,88,32,50,48,187,13,10,26,10]:null,ct=68;function ht(t){return(new TextEncoder).encode(t)}function pt(t){let e=0;for(const n of t)e+=n.byteLength;const n=new Uint8Array(e);let s=0;for(const e of t)n.set(new Uint8Array(e),s),s+=e.byteLength;return n}function gt(t,e=4){return Math.ceil(t/e)*e-t}function yt(t){return t.levels[0].levelData.byteLength/function(t,e){let n=1;const s=[t.pixelWidth,t.pixelHeight,t.pixelDepth],i=function(t){const[e,n,s]=t.dataFormatDescriptor[0].texelBlockDimension;return[e+1,n+1,s+1]}(t);for(let t=0;t<3;t++)if(s[t]>0){const a=Math.ceil(Math.floor(s[t]*Math.pow(2,-e))/i[t]);n*=Math.max(1,a)}t.layerCount>0&&(n*=t.layerCount);t.faceCount>0&&(n*=t.faceCount);return n}(t,0)}function ft(){return ft=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(t[s]=n[s])}return t},ft.apply(this,arguments)}const ut={keepWriter:!1};function Ut(t,e={}){e=ft({},ut,e);let n=new ArrayBuffer(0);if(t.globalData){const e=new ArrayBuffer(20+5*t.globalData.imageDescs.length*4),s=new DataView(e);s.setUint16(0,t.globalData.endpointCount,!0),s.setUint16(2,t.globalData.selectorCount,!0),s.setUint32(4,t.globalData.endpointsData.byteLength,!0),s.setUint32(8,t.globalData.selectorsData.byteLength,!0),s.setUint32(12,t.globalData.tablesData.byteLength,!0),s.setUint32(16,t.globalData.extendedData.byteLength,!0);for(let e=0;e<t.globalData.imageDescs.length;e++){const n=t.globalData.imageDescs[e];s.setUint32(20+5*e*4+0,n.imageFlags,!0),s.setUint32(20+5*e*4+4,n.rgbSliceByteOffset,!0),s.setUint32(20+5*e*4+8,n.rgbSliceByteLength,!0),s.setUint32(20+5*e*4+12,n.alphaSliceByteOffset,!0),s.setUint32(20+5*e*4+16,n.alphaSliceByteLength,!0)}n=pt([e,t.globalData.endpointsData,t.globalData.selectorsData,t.globalData.tablesData,t.globalData.extendedData])}const a=[];let l=t.keyValue;e.keepWriter||(l=ft({},t.keyValue,{KTXwriter:lt}));for(const t in l){const e=l[t],n=ht(t),s="string"==typeof e?pt([ht(e),rt]):e,i=n.byteLength+1+s.byteLength,r=gt(i,4);a.push(pt([new Uint32Array([i]),n,rt,s,new Uint8Array(r).fill(0)]))}const o=pt(a);if(1!==t.dataFormatDescriptor.length||t.dataFormatDescriptor[0].descriptorType!==i)throw new Error("Only BASICFORMAT Data Format Descriptor output supported.");const c=t.dataFormatDescriptor[0],h=new ArrayBuffer(28+16*c.samples.length),p=new DataView(h),g=24+16*c.samples.length;if(p.setUint32(0,h.byteLength,!0),p.setUint16(4,c.vendorId,!0),p.setUint16(6,c.descriptorType,!0),p.setUint16(8,c.versionNumber,!0),p.setUint16(10,g,!0),p.setUint8(12,c.colorModel),p.setUint8(13,c.colorPrimaries),p.setUint8(14,c.transferFunction),p.setUint8(15,c.flags),!Array.isArray(c.texelBlockDimension))throw new Error("texelBlockDimension is now an array. For dimensionality `d`, set `d - 1`.");p.setUint8(16,c.texelBlockDimension[0]),p.setUint8(17,c.texelBlockDimension[1]),p.setUint8(18,c.texelBlockDimension[2]),p.setUint8(19,c.texelBlockDimension[3]);for(let t=0;t<8;t++)p.setUint8(20+t,c.bytesPlane[t]);for(let t=0;t<c.samples.length;t++){const e=c.samples[t],n=28+16*t;if(e.channelID)throw new Error("channelID has been renamed to channelType.");p.setUint16(n+0,e.bitOffset,!0),p.setUint8(n+2,e.bitLength),p.setUint8(n+3,e.channelType),p.setUint8(n+4,e.samplePosition[0]),p.setUint8(n+5,e.samplePosition[1]),p.setUint8(n+6,e.samplePosition[2]),p.setUint8(n+7,e.samplePosition[3]),e.channelType&r?(p.setInt32(n+8,e.sampleLower,!0),p.setInt32(n+12,e.sampleUpper,!0)):(p.setUint32(n+8,e.sampleLower,!0),p.setUint32(n+12,e.sampleUpper,!0))}const y=ot.length+ct+3*t.levels.length*8,f=y+h.byteLength;let u=n.byteLength>0?f+o.byteLength:0;u%8&&(u+=8-u%8);const U=[],b=new DataView(new ArrayBuffer(3*t.levels.length*8)),D=new Uint32Array(t.levels.length);let m=0;t.supercompressionScheme===s&&(m=function(t,e){const n=Math.max(t,e),s=Math.min(t,e);let i=n;for(;i%s!=0;)i+=n;return i}(yt(t),4));let w=(u||f+o.byteLength)+n.byteLength;for(let e=t.levels.length-1;e>=0;e--){if(w%m){const t=gt(w,m);U.push(new Uint8Array(t)),w+=t}const n=t.levels[e];U.push(n.levelData),D[e]=w,w+=n.levelData.byteLength}for(let e=0;e<t.levels.length;e++){const n=t.levels[e];b.setBigUint64(24*e+0,BigInt(D[e]),!0),b.setBigUint64(24*e+8,BigInt(n.levelData.byteLength),!0),b.setBigUint64(24*e+16,BigInt(n.uncompressedByteLength),!0)}const d=new ArrayBuffer(ct),B=new DataView(d);return B.setUint32(0,t.vkFormat,!0),B.setUint32(4,t.typeSize,!0),B.setUint32(8,t.pixelWidth,!0),B.setUint32(12,t.pixelHeight,!0),B.setUint32(16,t.pixelDepth,!0),B.setUint32(20,t.layerCount,!0),B.setUint32(24,t.faceCount,!0),B.setUint32(28,t.levels.length,!0),B.setUint32(32,t.supercompressionScheme,!0),B.setUint32(36,y,!0),B.setUint32(40,h.byteLength,!0),B.setUint32(44,f,!0),B.setUint32(48,o.byteLength,!0),B.setBigUint64(52,BigInt(n.byteLength>0?u:0),!0),B.setBigUint64(60,BigInt(n.byteLength),!0),new Uint8Array(pt([new Uint8Array(ot).buffer,d,b.buffer,h,o,u>0?new ArrayBuffer(u-(f+o.byteLength)):new ArrayBuffer(0),n,...U]))}}}]);
//# sourceMappingURL=253.bundle.js.map