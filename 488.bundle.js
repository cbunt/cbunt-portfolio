/*! For license information see: https://cbunt.ing/oss-licenses.json */
"use strict";(self.webpackChunkcbunt_portfolio=self.webpackChunkcbunt_portfolio||[]).push([[488],{3421:(e,t,r)=>{r.d(t,{A:()=>c});var n,i,a,o=r(282),s=r(2323),u=function(e,t,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(e):n?n.value:t.get(e)};class l{constructor(e={}){n.add(this),this.buffer=new ArrayBuffer(i.bufferLength),this.worldToView=new Float32Array(this.buffer,i.worldToViewOffset,s.vV.mat4x4Count),this.viewToClip=new Float32Array(this.buffer,i.viewToClipOffset,s.vV.mat4x4Count),this.worldToClip=new Float32Array(this.buffer,i.worldToClipOffset,s.vV.mat4x4Count),this.viewToWorld=new Float32Array(this.buffer,i.viewToWorldOffset,s.vV.mat4x4Count),this.clipToView=new Float32Array(this.buffer,i.clipToViewOffset,s.vV.mat4x4Count),this.clipToWorld=new Float32Array(this.buffer,i.clipToWorldOffset,s.vV.mat4x4Count),this.location=new Float32Array([0,0,0]),this.rotation=new Float32Array([0,0,0,1]),this.params={nearPlane:.01,farPlane:500,fov:40,width:1920,height:1080,projection:"perspective"},this.updateParams(e)}updateParams(e){this.params={...this.params,...e},u(this,n,"m",a).call(this)}cacheView(){o.pB.fromQuat(this.rotation,this.viewToWorld),o.pB.setTranslation(this.viewToWorld,this.location,this.viewToWorld),o.pB.invert(this.viewToWorld,this.worldToView),o.pB.mul(this.viewToClip,this.worldToView,this.worldToClip),o.pB.mul(this.viewToWorld,this.clipToView,this.clipToWorld)}}i=l,n=new WeakSet,a=function(){if("perspective"===this.params.projection)o.pB.perspective(this.params.fov*(Math.PI/180),this.params.width/this.params.height,this.params.nearPlane,this.params.farPlane,this.viewToClip);else{const e=this.params.width/2,t=this.params.height/2;o.pB.ortho(-e,e,-t,t,this.params.nearPlane,this.params.farPlane,this.viewToClip)}o.pB.invert(this.viewToClip,this.clipToView)},l.worldToViewOffset=0,l.viewToClipOffset=i.worldToViewOffset+s.vV.sizeofMat4x4f,l.worldToClipOffset=i.viewToClipOffset+s.vV.sizeofMat4x4f,l.viewToWorldOffset=i.worldToClipOffset+s.vV.sizeofMat4x4f,l.clipToViewOffset=i.viewToWorldOffset+s.vV.sizeofMat4x4f,l.clipToWorldOffset=i.clipToViewOffset+s.vV.sizeofMat4x4f,l.bufferLength=i.clipToWorldOffset+s.vV.sizeofMat4x4f;const c=l},2323:(e,t,r)=>{r.d(t,{GE:()=>s,KO:()=>u,T2:()=>o,vV:()=>i});var n=r(9253);const i={mat4x4Count:16,sizeofMat4x4f:16*Float32Array.BYTES_PER_ELEMENT},a={[n.VIE]:"r8unorm",[n.B7n]:"r8snorm",[n.W_U]:"r8uint",[n.YeG]:"r8sint",[n.HYY]:"r16uint",[n.brc]:"r16sint",[n.eLQ]:"r16float",[n.sk6]:"rg8unorm",[n.aiL]:"rg8snorm",[n.xWH]:"rg8uint",[n.$Kq]:"rg8sint",[n.nR0]:"r32uint",[n.rwM]:"r32sint",[n.e4n]:"r32float",[n.P1c]:"rg16uint",[n.bc6]:"rg16sint",[n.cps]:"rg16float",[n.tsP]:"rgba8unorm",[n.Wm_]:"rgba8unorm-srgb",[n.zqn]:"rgba8snorm",[n.MZV]:"rgba8uint",[n._Je]:"rgba8sint",[n.J6Z]:"bgra8unorm",[n.mIY]:"bgra8unorm-srgb",[n.KIZ]:"rgb9e5ufloat",[n.eAA]:"rgb10a2uint",[n.fJh]:"rgb10a2unorm",[n.kot]:"rg11b10ufloat",[n.nlo]:"rg32uint",[n.x9e]:"rg32sint",[n.yAK]:"rg32float",[n.CSc]:"rgba16uint",[n.GF$]:"rgba16sint",[n.l2T]:"rgba16float",[n.KMX]:"rgba32uint",[n.KBq]:"rgba32sint",[n.Ze1]:"rgba32float",[n.QFs]:"bc1-rgba-unorm",[n.bOE]:"bc1-rgba-unorm-srgb",[n.wt4]:"bc2-rgba-unorm",[n.ZBp]:"bc2-rgba-unorm-srgb",[n.D_t]:"bc3-rgba-unorm",[n.elk]:"bc3-rgba-unorm-srgb",[n.ydS]:"bc4-r-unorm",[n.iIv]:"bc4-r-snorm",[n.LHP]:"bc5-rg-unorm",[n.xXb]:"bc5-rg-snorm",[n.mQu]:"bc6h-rgb-ufloat",[n.CpY]:"bc6h-rgb-float",[n.FD_]:"bc7-rgba-unorm",[n.GJu]:"bc7-rgba-unorm-srgb"},o={r8unorm:1,r8snorm:1,r8uint:1,r8sint:1,r16uint:2,r16sint:2,r16float:2,rg8unorm:2,rg8snorm:2,rg8uint:2,rg8sint:2,r32uint:4,r32sint:4,r32float:4,rg16uint:4,rg16sint:4,rg16float:4,rgba8unorm:4,"rgba8unorm-srgb":4,rgba8snorm:4,rgba8uint:4,rgba8sint:4,bgra8unorm:4,"bgra8unorm-srgb":4,rgb9e5ufloat:4,rgb10a2uint:4,rgb10a2unorm:4,rg11b10ufloat:4,rg32uint:8,rg32sint:8,rg32float:8,rgba16uint:8,rgba16sint:8,rgba16float:8,rgba32uint:16,rgba32sint:16,rgba32float:16},s={r8unorm:1,r8snorm:1,r8uint:1,r8sint:1,r16uint:2,r16sint:2,r16float:2,rg8unorm:1,rg8snorm:1,rg8uint:1,rg8sint:1,r32uint:4,r32sint:4,r32float:4,rg16uint:2,rg16sint:2,rg16float:2,rgba8unorm:1,"rgba8unorm-srgb":1,rgba8snorm:1,rgba8uint:1,rgba8sint:1,bgra8unorm:1,"bgra8unorm-srgb":1,rgb9e5ufloat:4,rgb10a2uint:4,rgb10a2unorm:4,rg11b10ufloat:4,rg32uint:4,rg32sint:4,rg32float:4,rgba16uint:2,rgba16sint:2,rgba16float:2,rgba32uint:4,rgba32sint:4,rgba32float:4},u=Object.fromEntries(Object.entries(a).map((([e,t])=>[t,parseInt(e,10)])))},5701:(e,t,r)=>{r.d(t,{A:()=>o});var n=r(3421);const i="global uniforms";class a{constructor(e){this.deviceBuffer=e.createBuffer(a.bufferDescriptor),this.bindGroupLayout=e.createBindGroupLayout(a.layoutDescriptor),this.bindGroupDescriptor={label:i,layout:this.bindGroupLayout,entries:[{binding:0,resource:{buffer:this.deviceBuffer,offset:0,size:a.bufferSize}}]},this.bindgroup=e.createBindGroup(this.bindGroupDescriptor)}updateDeviceBuffer(e,t){t.cacheView(),e.writeBuffer(this.deviceBuffer,0,t.buffer)}}a.code=e=>`\n        struct GlobalUniforms {\n            worldToView: mat4x4f,\n            viewToClip: mat4x4f,\n            worldToClip: mat4x4f,\n            inverseWorldToView: mat4x4f,\n            inverseViewToClip: mat4x4f,\n            inverseWorldToClip: mat4x4f,\n        }\n\n        @group(${e}) @binding(0) var<uniform> globals: GlobalUniforms;\n    `,a.bufferSize=n.A.bufferLength,a.layoutDescriptor={label:i,entries:[{binding:0,buffer:{minBindingSize:a.bufferSize},visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT}]},a.bufferDescriptor={label:i,size:a.bufferSize,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST};const o=a},1488:(e,t,r)=>{r.r(t),r.d(t,{default:()=>D});var n=r(3421),i=r(5701),a=r(4581);const o="tonemap pass";class s{constructor(e,t){this.device=e,this.colorAttachment={loadOp:"load",storeOp:"store",view:void 0},this.passDescriptor={label:o,colorAttachments:[this.colorAttachment]},this.renderTarget={format:t},this.bindgroupLayout=e.createBindGroupLayout(s.bindGroupLayoutDescriptor);const r=e.createShaderModule({label:o,code:s.code});this.pipelineDescriptor={label:o,layout:e.createPipelineLayout({label:o,bindGroupLayouts:[this.bindgroupLayout]}),vertex:{module:r,entryPoint:"vs"},fragment:{module:r,entryPoint:"fs",targets:[this.renderTarget]}},this.pipeline=e.createRenderPipeline(this.pipelineDescriptor)}updateInput(e){this.bindgroup=this.device.createBindGroup({label:o,layout:this.bindgroupLayout,entries:[{binding:0,resource:e}]})}render(e,t){if(null==this.bindgroup)return;this.renderTarget.format!==t.format&&(this.renderTarget.format=t.format,this.pipeline=this.device.createRenderPipeline(this.pipelineDescriptor)),this.colorAttachment.view=t.createView({dimension:"2d"});const r=e.beginRenderPass(this.passDescriptor);r.setPipeline(this.pipeline),r.setBindGroup(0,this.bindgroup),r.draw(3),r.end()}}s.code=`\n        @group(0) @binding(0) var colorTexture: texture_2d<f32>;\n\n        ${a.A}\n\n        fn fitRRTAndODT(color: vec3f) -> vec3f {\n            let a = color * (color + 0.0245786) - 0.000090537;\n            let b = color * (0.983729 * color + 0.4329510) + 0.238081;\n            return a / b;\n        }\n\n        fn aces_tone_map(hdr: vec3f) -> vec3f {\n            const inputMat = mat3x3(\n                0.59719, 0.07600, 0.02840,\n                0.35458, 0.90834, 0.13383,\n                0.04823, 0.01566, 0.83777,\n            );\n            const outputMat = mat3x3(\n                1.60475, -0.10208, -0.00327,\n                -0.53108, 1.10813, -0.07276,\n                -0.07367, -0.00605, 1.07602,\n            );\n            const boost = 1.0 / 0.6;\n\n            var color = hdr * boost;\n            color = inputMat * color;\n            color = fitRRTAndODT(color);\n            color = outputMat * color;\n            return saturate(color);\n        }\n\n        fn linear_to_srgb(color: vec3f) -> vec3f {\n            return pow(color, vec3(1.0/2.2));\n        }\n\n        @fragment\n        fn fs(@builtin(position) pos: vec4f) -> @location(0) vec4f {\n            let uv = vec2<i32>(floor(pos.xy));\n\n            var color = textureLoad(colorTexture, uv, 0).rgb;\n            color = aces_tone_map(color);\n            color = linear_to_srgb(color);\n            return vec4f(color, 1.0);\n        }\n    `,s.bindGroupLayoutDescriptor={label:o,entries:[{binding:0,texture:{sampleType:"float",viewDimension:"2d"},visibility:GPUShaderStage.FRAGMENT}]};const u=s;var l,c,d,f,p,h,m=function(e,t,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(e):n?n.value:t.get(e)},v=function(e,t,r,n,i){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?i.call(e,r):i?i.value=r:t.set(e,r),r};const g="skybox pass";class b{get mipLevel(){return this.uniformArray[0]}set mipLevel(e){e!==this.uniformArray[0]&&(this.uniformArray[0]=e,this.device.queue.writeBuffer(this.uniformBuffer,0,this.uniformArray,0,1))}get useNearestSample(){return m(this,p,"f")}set useNearestSample(e){e!==m(this,p,"f")&&(v(this,p,e,"f"),m(this,l,"m",h).call(this))}get targetFormat(){return m(this,f,"f")}set targetFormat(e){e!==m(this,f,"f")&&(v(this,f,e,"f"),this.pipeline=this.device.createRenderPipeline({label:g,layout:this.pipelineLayout,vertex:{entryPoint:"vs",module:this.shader},fragment:{entryPoint:"fs",targets:[{format:e}],module:this.shader}}))}set skyTexture(e){e!==m(this,c,"f")&&(v(this,c,e,"f"),m(this,l,"m",h).call(this))}set depthTexture(e){e!==m(this,d,"f")&&(v(this,d,e,"f"),m(this,l,"m",h).call(this))}constructor(e,t,r,n){l.add(this),this.device=e,this.globals=t,this.uniformArray=new Float32Array(8),c.set(this,void 0),d.set(this,void 0),f.set(this,void 0),p.set(this,!1),this.target={clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store",view:void 0},this.passDescriptor={colorAttachments:[this.target]},this.bindgroupLayout=e.createBindGroupLayout({label:g,entries:[{binding:0,texture:{viewDimension:"cube"},visibility:GPUShaderStage.FRAGMENT|GPUShaderStage.VERTEX},{binding:1,texture:{viewDimension:"2d",sampleType:"depth"},visibility:GPUShaderStage.FRAGMENT},{binding:2,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:3,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}}]}),this.linearSampler=e.createSampler({minFilter:"linear",magFilter:"linear",mipmapFilter:"linear"}),this.nearestSampler=e.createSampler({minFilter:"nearest",magFilter:"nearest",mipmapFilter:"nearest"}),this.shader=e.createShaderModule({code:b.code,label:g}),this.pipelineLayout=e.createPipelineLayout({label:g,bindGroupLayouts:[t.bindGroupLayout,this.bindgroupLayout]}),this.uniformBuffer=e.createBuffer({label:g,size:32,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM}),this.targetFormat=r,null!=n&&(this.skyTexture=n)}render(e){return null!=this.textureBindgroup&&null!=this.pipeline&&(e.setPipeline(this.pipeline),e.setBindGroup(0,this.globals.bindgroup),e.setBindGroup(1,this.textureBindgroup),e.draw(3),!0)}}c=new WeakMap,d=new WeakMap,f=new WeakMap,p=new WeakMap,l=new WeakSet,h=function(){null!=m(this,c,"f")&&null!=m(this,d,"f")&&(this.textureBindgroup=this.device.createBindGroup({label:g,layout:this.bindgroupLayout,entries:[{binding:0,resource:m(this,c,"f")},{binding:1,resource:m(this,d,"f")},{binding:2,resource:this.useNearestSample?this.nearestSampler:this.linearSampler},{binding:3,resource:{buffer:this.uniformBuffer}}]}))},b.code=`\n        ${i.A.code(0)}\n\n        struct SkyboxUniforms {\n            mipBias: f32,\n        };\n\n        @group(1) @binding(0) var environmentTexture: texture_cube<f32>;\n        @group(1) @binding(1) var depthTexture: texture_depth_2d;\n        @group(1) @binding(2) var environmentSampler: sampler;\n        @group(1) @binding(3) var<uniform> skyboxUniforms: SkyboxUniforms;\n\n        struct Varyings {\n            @builtin(position) position: vec4f,\n            @location(0) pos: vec4f,\n            @location(1) mipBias: f32,\n        };\n    \n        @vertex \n        fn vs(@builtin(vertex_index) vNdx: u32) -> Varyings {\n            const pos = array(\n                vec2(-1.0,  3.0),\n                vec2(-1.0, -1.0),\n                vec2( 3.0, -1.0),\n            );\n    \n            var vsOut: Varyings;\n            vsOut.position = vec4(pos[vNdx], 0.0, 1.0);\n    \n            // Ignores the camera's translation without needing a separate rotation matrix.\n            vsOut.pos = globals.inverseViewToClip * vsOut.position;\n            let w = vsOut.pos.w;\n            vsOut.pos.w = 0.0;\n            vsOut.pos = globals.inverseWorldToView * vsOut.pos;\n            vsOut.pos.w = w;\n\n            vsOut.mipBias = clamp(skyboxUniforms.mipBias, 0, f32(textureNumLevels(environmentTexture)));\n            return vsOut;\n        }\n\n        @fragment\n        fn fs(in: Varyings) -> @location(0) vec4f {\n            let dimensions = textureDimensions(depthTexture);\n            let uv = min(vec2<u32>(floor(in.position.xy)), dimensions - 1);\n            let depth = textureLoad(depthTexture, uv, 0);\n            if (depth < 1.0) { discard; }\n\n            let t = normalize(in.pos.xyz / in.pos.w);\n            let color = textureSampleLevel(environmentTexture, environmentSampler, t, in.mipBias).rgb;\n            return vec4(color, 1.0);\n        }\n    `;const w=b;class y{get size(){return this._size}set size(e){this._size=e,this.textures.forEach((e=>{this.createTexture(e)})),this.bindgroup=this.updateBindgroup(),this.passDescriptor=this.updatePassDescriptor()}constructor(e,t){this.device=e,this._size=t,this.normal=this.createTexture({format:"rgba16float",name:"normal",clearValue:{r:0,g:0,b:1,a:1}}),this.albedo=this.createTexture({format:"rgba8unorm",name:"albedo",clearValue:{r:0,g:0,b:0,a:1}}),this.emission=this.createTexture({format:"rgba16float",name:"emission",clearValue:{r:0,g:0,b:0,a:1}}),this.metallicRoughness=this.createTexture({format:"rg8unorm",name:"metallic roughness",clearValue:{r:0,g:0,b:0,a:0}}),this.depth=this.createTexture({format:"depth32float",name:"depth"}),this.textures=[this.normal,this.albedo,this.emission,this.metallicRoughness,this.depth],this.targets=this.textures.slice(0,-1).map((({format:e})=>({format:e}))),this.bindGroupLayout=this.device.createBindGroupLayout(y.layoutDescription),this.bindgroup=this.updateBindgroup(),this.passDescriptor=this.updatePassDescriptor()}updateBindgroup(){const e=this.textures.map((({view:e},t)=>({binding:t,resource:e})));return this.device.createBindGroup({label:"gbuffer bind group",layout:this.bindGroupLayout,entries:e})}updatePassDescriptor(){return{label:"forward pass encoder",colorAttachments:this.textures.slice(0,-1).map((({view:e,clearValue:t})=>({view:e,clearValue:t,loadOp:"clear",storeOp:"store"}))),depthStencilAttachment:{view:this.depth.view,depthLoadOp:"clear",depthStoreOp:"store",depthClearValue:1}}}createTexture(e){const t=`gbuffer ${e.name}`;return e.texture=this.device.createTexture({label:t,size:this._size,format:e.format,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING}),e.view=e.texture.createView({label:t}),e}}y.code=e=>`\n        @group(${e}) @binding(0) \n        var gBufferNormal: texture_2d<f32>;\n        \n        @group(${e}) @binding(1) \n        var gBufferAlbedo: texture_2d<f32>;\n        \n        @group(${e}) @binding(2) \n        var gBufferEmission: texture_2d<f32>;\n\n        @group(${e}) @binding(3) \n        var gBufferMetallicRoughness: texture_2d<f32>;\n        \n        @group(${e}) @binding(4)  \n        var gBufferDepth: texture_depth_2d;\n    `,y.layoutDescription={label:"gbuffer bind group layout",entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"unfilterable-float"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"float"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"float"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"unfilterable-float"}},{binding:4,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"depth"}}]};const x=y,T="\n    fn hammersley(i: u32, N: u32) -> vec2f {\n        var bits = (i << 16u) | (i >> 16u);\n        bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\n        bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\n        bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\n        bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\n        let rdi = f32(bits) * 2.3283064365386963e-10; // / 0x100000000\n        return vec2(f32(i) / f32(N), rdi);\n    }\n\n    fn tangentSampleGGX(N: vec3f, Xi: vec2f, a2: f32) -> vec3f {\n        const PI = 3.14159265359;\n\n        let phi = 2.0 * PI * Xi.x;\n        let cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a2 - 1.0) * Xi.y));\n        let sinTheta = sqrt(1.0 - cosTheta * cosTheta);\n        \n        var H: vec3f;\n        H.x = cos(phi) * sinTheta;\n        H.y = sin(phi) * sinTheta;\n        H.z = cosTheta;\n\n        let up = select(vec3(0.0, 0.0, 1.0), vec3(1.0, 0.0, 0.0), abs(N.z) >= 0.999);\n        let T = normalize(cross(up, N));\n        let B = cross(N, T);\n\n        let S = T * H.x + B * H.y + N * H.z;\n        return normalize(S);\n    }\n\n    fn vPartLambda(NoV: f32, a2: f32) -> f32 {\n        return sqrt(NoV * NoV * (1.0 - a2) + a2);\n    }\n\n    fn vCorrelatedGGX(NoV: f32, NoL: f32, a2: f32) -> f32 {\n        let GGXV = NoL * vPartLambda(NoV, a2);\n        let GGXL = NoV * vPartLambda(NoL, a2);\n        return 0.5 / (GGXV + GGXL);\n    }\n\n    fn dS2GGX(NoH: f32, a2: f32) -> f32 {\n        let s = (a2 - 1.0) * NoH * NoH + 1.0;\n        return s * s;\n    }\n\n    fn dGGX(NoH: f32, a2: f32) -> f32 {\n        const invPI = 1.0 / 3.14159265359;\n\n        let s2 = dS2GGX(NoH, a2);\n        return invPI * select(1, a2 / s2, a2 != s2);\n    }\n",P=`\noverride SAMPLE_COUNT: u32 = 1024u;\n\n${a.A}\n${T}\n\n@fragment\nfn fs(@location(0) uv: vec2f) -> @location(0) vec4f  {\n    let NoV = uv.x;\n    let roughness = uv.y;\n    let alpha = roughness * roughness;\n    let a2 = alpha * alpha;\n    let V = vec3(sqrt(1.0 - NoV * NoV), NoV, 0.0);\n    let N = vec3(0.0, 1.0, 0.0);\n\n    var brdf = vec2(0.0);\n\n    for (var i = 0u; i < SAMPLE_COUNT; i++) {\n        let Xi = hammersley(i, SAMPLE_COUNT);\n        let H = tangentSampleGGX(N, Xi, a2);\n        let L = normalize(2.0 * dot(V, H) * H - V);\n\n        let NoL = saturate(L.y);\n        let NoH = saturate(H.y);\n        let VoH = saturate(dot(V, H));\n\n        if (NoL > 0.0) {\n            let pdf = vCorrelatedGGX(NoV, NoL, a2) * VoH * NoL / NoH;\n            let Fc = pow(1.0 - VoH, 5.0);\n            brdf += vec2(1.0 - Fc, Fc) * pdf;\n        }\n    }\n\n    return vec4f(brdf * 4.0 / f32(SAMPLE_COUNT), 0.0, 1.0);\n}\n`;var S=r(5753),A=r(3936);const L=`\n    const PI = 3.14159265359;\n\n    override SAMPLES: u32 = 2048u;\n\n    struct Params {\n        face: u32,\n        size: u32,\n    }\n\n    @group(0) @binding(0) var environment: texture_cube<f32>;\n    @group(0) @binding(1) var environmentSampler: sampler;\n    @group(0) @binding(2) var<uniform> params: Params;\n\n    ${S.V}\n    ${T}\n    ${a.A}\n\n    @fragment\n    fn fs(@builtin(position) pos: vec4f) -> @location(0) vec4f {\n        let coord = vec3u(vec2u(floor(pos.xy)), params.face);\n        let size = f32(textureDimensions(environment).x);\n        let lodFactor = 6.0 * size * size / f32(SAMPLES);\n\n        let N = toWorldDir(coord, params.size);\n        let right = normalize(cross(vec3(0.0, 1.0, 0.0), N));\n        let up = normalize(cross(N, right));\n        let TBN = mat3x3(right, up, N);\n        \n        var irradiance = vec3(0.0);\n        var samples = 0.0;\n\n        for (var i = 0u; i < SAMPLES; i += 1) {\n            let xi = hammersley(i, SAMPLES);\n            let cosTheta = sqrt(1.0 - xi.y);\n            let sinTheta = sqrt(xi.y);\n            let phi = 2.0 * PI * xi.x;\n            let invPdf = PI / cosTheta;\n            let localDir = normalize(vec3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta));\n            let worldDir = TBN * localDir;\n            let lod = 0.5 * log2(lodFactor * invPdf);\n            irradiance += textureSampleLevel(environment, environmentSampler, worldDir, lod).rgb;\n        }\n\n        return vec4(irradiance / f32(SAMPLES), 1.0);\n    }\n`;const G=`\n    override SAMPLES: u32 = 1024u;\n\n    const PI = 3.14159265359;\n    const invPI = 1.0 / PI;\n\n    struct Params {\n        face: u32,\n        mipSize: u32,\n        invOmegaP: f32,\n        a2: f32,\n    }\n\n    @group(0) @binding(0) var environment: texture_cube<f32>;\n    @group(0) @binding(1) var environmentSampler: sampler;\n    @group(0) @binding(2) var<uniform> params: Params;\n\n    ${S.V}\n    ${T}\n    ${a.A}\n\n    @fragment\n    fn fs(@location(0) uv: vec2f) -> @location(0) vec4f {\n        let N = toWorldDirF32(uv, params.face);\n\n        var radiance = vec3(0.0);\n        var totalWeight = 0.0;\n        \n        for (var i = 0u; i < SAMPLES; i += 1) {\n            let Xi = hammersley(i, SAMPLES);\n            let H = tangentSampleGGX(N, Xi, params.a2);\n            let HoV = saturate(dot(H, N));\n            let L = normalize(2.0 * HoV * H - N);\n            let NoL = saturate(dot(N, L));\n\n            if (NoL <= 0.0) { continue; }\n\n            let pdf = dGGX(HoV, params.a2) / 4.0 + 0.001;\n            let omegaS = 1.0 / (f32(SAMPLES) * pdf);\n            let mipLevel = 0.5 * log2(omegaS * params.invOmegaP) + params.a2;\n\n            radiance += textureSampleLevel(environment, environmentSampler, L, mipLevel).rgb * NoL;\n            totalWeight += NoL;\n        }\n    \n        return vec4(radiance / totalWeight, 1.0);\n    }\n`;class E{set skybox(e){this.irradianceTexture=function({device:e,texture:t,label:r="irradiance",usage:n=0,samples:i=2048,outputWidth:a,outputFormat:o,outputTexture:s}){const u=s?.format??o??t.format,l=s?.width??a??64,c=e.createBindGroupLayout({label:r,entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"cube"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:2,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}}]}),d=e.createSampler({minFilter:"linear",magFilter:"linear",mipmapFilter:"linear"}),f=6===s?.depthOrArrayLayers?s:e.createTexture({label:r,format:u,dimension:"2d",usage:GPUTextureUsage.RENDER_ATTACHMENT|n,size:{width:l,height:l,depthOrArrayLayers:6}}),p=new Uint32Array([0,f.width]),h=(0,A.Lr)(p,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM,e),m=e.createBindGroup({label:r,layout:c,entries:[{binding:0,resource:t.createView({dimension:"cube"})},{binding:1,resource:d},{binding:2,resource:{buffer:h}}]}),v=e.createPipelineLayout({label:r,bindGroupLayouts:[c]}),g=e.createShaderModule({label:r,code:L}),b=e.createRenderPipeline({label:r,layout:v,vertex:{module:g,entryPoint:"vs"},fragment:{entryPoint:"fs",constants:{SAMPLES:i},module:g,targets:[{format:u}]}});for(let t=0;t<6;t+=1){p[0]=t,e.queue.writeBuffer(h,0,p,0,1);const r=f.createView({dimension:"2d",arrayLayerCount:1,baseArrayLayer:t}),n=e.createCommandEncoder(),i=n.beginRenderPass({colorAttachments:[{view:r,loadOp:"clear",storeOp:"store"}]});i.setPipeline(b),i.setBindGroup(0,m),i.draw(3),i.end(),e.queue.submit([n.finish()])}return f}({texture:e,device:this.device,usage:GPUTextureUsage.TEXTURE_BINDING}),this.radianceTexture=function({device:e,texture:t,targetFormat:r,usage:n=0,label:i="radiance",samples:a=1024,outputWidth:o,outputTexture:s}){const u=s?.format??r??t.format,l=s?.width??o??t.width,c=e.createBindGroupLayout({label:i,entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"cube"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:2,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}}]}),d=e.createSampler({minFilter:"linear",magFilter:"linear",mipmapFilter:"linear"}),f=new ArrayBuffer(16),p=new Uint32Array(f,0,2),h=new Float32Array(f,8,2),m=(0,A.Lr)(f,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM,e),v=6===s?.depthOrArrayLayers?s:e.createTexture({label:i,format:u,dimension:"2d",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_DST|n,size:{width:l,height:l,depthOrArrayLayers:6},mipLevelCount:Math.max((0|Math.log2(l))-2,1)}),g=e.createCommandEncoder({label:`${i} copy encoder`});g.copyTextureToTexture({texture:t,mipLevel:0},{texture:v,mipLevel:0},{width:l,height:l,depthOrArrayLayers:6}),e.queue.submit([g.finish()]);const b=e.createPipelineLayout({label:i,bindGroupLayouts:[c]}),w=e.createShaderModule({label:i,code:G}),y=e.createRenderPipeline({label:i,layout:b,vertex:{module:w,entryPoint:"vs"},fragment:{entryPoint:"fs",targets:[{format:v.format}],constants:{SAMPLES:a},module:w}});return h[0]=6*t.width*t.width/(4*Math.PI),Promise.resolve().then((async()=>{const r=e.createBindGroup({label:i,layout:c,entries:[{binding:0,resource:t.createView({dimension:"cube"})},{binding:1,resource:d},{binding:2,resource:{buffer:m}}]});for(let t=1;t<v.mipLevelCount;t+=1){const n=t/(v.mipLevelCount-1);h[1]=n**4,p[1]=v.width>>t;for(let n=0;n<6;n+=1){await e.queue.onSubmittedWorkDone(),p[0]=n,e.queue.writeBuffer(m,0,f);const i=v.createView({dimension:"2d",arrayLayerCount:1,baseArrayLayer:n,mipLevelCount:1,baseMipLevel:t}),a=e.createCommandEncoder(),o=a.beginRenderPass({colorAttachments:[{view:i,loadOp:"clear",storeOp:"store"}]});o.setPipeline(y),o.setBindGroup(0,r),o.draw(3),o.end(),e.queue.submit([a.finish()])}}})),v}({texture:e,device:this.device,usage:GPUTextureUsage.TEXTURE_BINDING}),this.irradianceView=this.irradianceTexture.createView({dimension:"cube"}),this.radianceView=this.radianceTexture.createView({dimension:"cube"}),this.bindgroup=this.device.createBindGroup({layout:this.bindgroupLayout,entries:[{binding:0,resource:this.radianceView},{binding:1,resource:this.irradianceView},{binding:2,resource:this.bfrdLutView},{binding:3,resource:this.sampler}]})}constructor(e,t,r,n,i){this.device=e,this.globals=t,this.gbuffer=r,this.target={view:void 0,clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"},this.bfrdLut=function({device:e,label:t,sampleCount:r,width:n=1024,height:i=1024,format:a="rg32float"}){const o=e.createTexture({label:t,format:a,dimension:"2d",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,size:{width:n,height:i}}),s=e.createShaderModule({label:"bfrdLut shader",code:P}),u=e.createRenderPipeline({label:"bfrd lut pipeline",layout:"auto",vertex:{entryPoint:"vs",module:s},fragment:{entryPoint:"fs",targets:[{format:a}],constants:r?{SAMPLE_COUNT:r}:void 0,module:s}}),l=e.createCommandEncoder(),c=l.beginRenderPass({label:"brdf lut render pass",colorAttachments:[{view:o.createView(),loadOp:"clear",storeOp:"store"}]});return c.setPipeline(u),c.draw(3),c.end(),e.queue.submit([l.finish()]),o}({device:this.device}),this.bfrdLutView=this.bfrdLut.createView(),this.passDescriptor={colorAttachments:[this.target]},this.sampler=e.createSampler({magFilter:"linear",minFilter:"linear",mipmapFilter:"linear"}),null!=i&&(this.skybox=i),this.bindgroupLayout=e.createBindGroupLayout({label:"deferred pass",entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"cube"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"cube"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"2d"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,sampler:{}}]});const a=e.createPipelineLayout({label:"deferred pass bindgroup layout",bindGroupLayouts:[this.globals.bindGroupLayout,this.gbuffer.bindGroupLayout,this.bindgroupLayout]}),o=e.createShaderModule({code:E.code,label:"deferred pass shader"});this.pipeline=e.createRenderPipeline({layout:a,vertex:{entryPoint:"vs",module:o},fragment:{entryPoint:"fs",targets:[{format:n}],module:o}})}render(e){null!=this.bindgroup&&(e.setPipeline(this.pipeline),e.setBindGroup(0,this.globals.bindgroup),e.setBindGroup(1,this.gbuffer.bindgroup),e.setBindGroup(2,this.bindgroup),e.draw(3))}}E.code=`\n        ${i.A.code(0)}\n        ${x.code(1)}\n\n        @group(2) @binding(0) var radianceTexture: texture_cube<f32>;\n        @group(2) @binding(1) var irradianceTexture: texture_cube<f32>;\n        @group(2) @binding(2) var brdfTexture: texture_2d<f32>;\n        @group(2) @binding(3) var generalSampler: sampler;\n\n        ${T}\n        ${a.A}\n\n        @fragment\n        fn fs(@builtin(position) pos: vec4f, @location(0) uv: vec2f) -> @location(0) vec4f {\n            let uvi = vec2<u32>(pos.xy);\n            let depth = textureLoad(gBufferDepth, uvi, 0);\n\n            if (depth >= 1.0) { discard; }\n\n            let uvClip = vec2(uv.x * 2.0 - 1.0, 1.0 - uv.y * 2.0);\n            let clipPos = vec4(uvClip, depth, 1.0);\n            let viewPos = globals.inverseViewToClip * clipPos;\n            let worldDir = globals.inverseWorldToView * vec4(viewPos.xyz / viewPos.w, 0.0);\n            let view = -normalize(worldDir.xyz);\n\n            let normal = textureLoad(gBufferNormal, uvi, 0).rgb;\n            let albedo = textureLoad(gBufferAlbedo, uvi, 0).rgb;\n            let emission = textureLoad(gBufferEmission, uvi, 0).rgb;\n            let metallicRoughnessSample = textureLoad(gBufferMetallicRoughness, uvi, 0);\n            let metallic = metallicRoughnessSample.r;\n            let roughness = metallicRoughnessSample.g;\n            let alpha = roughness * roughness;\n            let a2 = alpha * alpha;\n\n            let NoV = saturate(dot(normal, view));\n            let F0 = mix(vec3f(0.04), albedo, metallic);\n            let R = reflect(-view, normal);\n\n            let level = roughness * f32(textureNumLevels(radianceTexture) - 1u);\n            let radiance = textureSampleLevel(radianceTexture, generalSampler, R, level).rgb;\n            let irradiance = textureSample(irradianceTexture, generalSampler, normal).rgb;\n            let brdf = textureSample(brdfTexture, generalSampler, saturate(vec2f(NoV, roughness))).xy;\n\n            // Roughness dependent fresnel\n            let Fr = max(vec3f(1.0 - roughness), F0) - F0;\n            let kS = F0 + Fr * pow(1.0 - NoV, 5.0);\n            let FssEss = kS * brdf.x + brdf.y;\n\n            // Multiple scattering, originally proposed by Fdez-Aguera\n            // and here adapted from https://bruop.github.io/ibl\n            let Ems = 1.0 - (brdf.x + brdf.y);\n            let Favg = F0 + (1.0 - F0) / 21.0;\n            let FmsEms = Ems * FssEss * Favg / (1.0 - Favg * Ems);\n            let kD = albedo * (1.0 - 0.04) * (1.0 - metallic) * (1.0 - FssEss + FmsEms);\n\n            let specular = FssEss * radiance;\n            let diffuse = (FmsEms + kD) * irradiance;\n            let ambient = specular + diffuse + emission;\n\n            return vec4f(ambient, 1.0);\n        }\n    `;const F=E;var N,V,C=r(2349),B=function(e,t,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(e):n?n.value:t.get(e)};class U{set skybox(e){this.deferredPass.skybox=e,this.skyboxPass.skyTexture=this.deferredPass.radianceView}constructor(e,t){N.add(this),this.canvas=e,this.device=t,this.colorAttachment={clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store",view:void 0},this.passDescriptor={colorAttachments:[this.colorAttachment]},this.forwardPasses=[],this.render=()=>{requestAnimationFrame(this.render),this.globals.updateDeviceBuffer(this.device.queue,this.camera);const e=this.device.createCommandEncoder({label:"main render encoder"}),t={encoder:e,globals:this.globals,gbuffer:this.gbuffer};for(const e of this.forwardPasses)e.render(t);const r=e.beginRenderPass(this.passDescriptor);this.deferredPass.render(r),this.skyboxPass.render(r),r.end(),this.tonemapPass.render(e,this.context.getCurrentTexture()),this.device.queue.submit([e.finish()])};const r={width:this.canvas.width,height:this.canvas.height};this.camera=new n.A(r),this.globals=new i.A(this.device),this.gbuffer=new x(t,r),this.deferredPass=new F(t,this.globals,this.gbuffer,U.postProcessFormat),this.skyboxPass=new w(this.device,this.globals,U.postProcessFormat),this.tonemapPass=new u(this.device,U.outputFormat);const a=this.canvas.getContext("webgpu");if(null==a)throw new Error("renderer -- given canvas already initialized to non-webgpu context");this.context=a,this.context.configure({device:this.device,format:U.outputFormat,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC,alphaMode:"opaque",colorSpace:"srgb"}),this.updateBackings(r),B(this,N,"m",V).call(this)}static async CreateInitialized(e){const t=await navigator.gpu.requestAdapter();if(null==t)throw new Error("Could not initialize GPU.");const{maxComputeWorkgroupSizeX:r,maxComputeWorkgroupsPerDimension:n,maxComputeInvocationsPerWorkgroup:i}=t.limits,a=await t.requestDevice({label:"main logical device",requiredFeatures:U.requiredFeatures,requiredLimits:{maxComputeWorkgroupSizeX:r,maxComputeWorkgroupsPerDimension:n,maxComputeInvocationsPerWorkgroup:i}});return new U(e,a)}updateBackings(e){this.camera.updateParams(e),this.postprocessTarget=this.device.createTexture({dimension:"2d",format:U.postProcessFormat,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,size:e}),this.colorAttachment.view=this.postprocessTarget.createView(),this.tonemapPass.updateInput(this.colorAttachment.view),this.gbuffer.size=e,this.skyboxPass.depthTexture=this.gbuffer.depth.view}addForwardPass(e){(0,C.nn)(this.forwardPasses,e,((e,t)=>e.priority-t.priority))}}N=new WeakSet,V=function(){const e=(0,C.sg)(((e,t)=>{const r=Math.max(1,Math.min(0|e,this.device.limits.maxTextureDimension2D)),n=Math.max(1,Math.min(0|t,this.device.limits.maxTextureDimension2D)),i={width:r,height:n};this.canvas.width=r,this.canvas.height=n,this.updateBackings(i)}),20);try{new ResizeObserver((t=>{const[{inlineSize:r,blockSize:n}]=t[t.length-1].devicePixelContentBoxSize;e(r,n)})).observe(this.canvas,{box:"device-pixel-content-box"})}catch{new ResizeObserver((t=>{const[{inlineSize:r,blockSize:n}]=t[t.length-1].contentBoxSize;e(r*devicePixelRatio,n*devicePixelRatio)})).observe(this.canvas,{box:"content-box"})}},U.requiredFeatures=["float32-filterable"],U.outputFormat=navigator.gpu.getPreferredCanvasFormat(),U.postProcessFormat="rgba32float";const D=U},4581:(e,t,r)=>{r.d(t,{A:()=>n});const n="\n    struct VertOut {\n        @builtin(position) pos: vec4f,\n        @location(0) uv: vec2f,\n    }\n\n    @vertex\n    fn vs(@builtin(vertex_index) idx: u32) -> VertOut {\n        const pos = array(\n            vec2f(-1,  3),\n            vec2f(3, -1),\n            vec2f(-1, -1),\n        );\n        var res: VertOut;\n        res.pos = vec4f(pos[idx], 0.0, 1.0);\n        res.uv = pos[idx] * vec2f(0.5, -0.5) + 0.5;\n        return res;\n    }\n"},5753:(e,t,r)=>{r.d(t,{V:()=>n,X:()=>i});const n="\n    fn toWorldDir(coord: vec3u, size: u32) -> vec3f {\n        let uv = (2.0 / f32(size)) * (vec2f(coord.xy) + 0.5) - 1.0;\n\n        var pos: vec3f;\n        switch (coord.z) {\n            case 0  { pos = vec3(  1.0, -uv.y, -uv.x); }\n            case 1  { pos = vec3( -1.0, -uv.y,  uv.x); }\n            case 2  { pos = vec3( uv.x,   1.0,  uv.y); }\n            case 3  { pos = vec3( uv.x,  -1.0, -uv.y); }\n            case 4  { pos = vec3( uv.x, -uv.y,   1.0); }\n            default { pos = vec3(-uv.x, -uv.y,  -1.0); }\n        }\n\n        return normalize(pos);\n    }\n\n    fn toWorldDirF32(coord: vec2f, face: u32) -> vec3f {\n        let uv = 2.0 * coord - 1.0;\n\n        var pos: vec3f;\n        switch (face) {\n            case 0  { pos = vec3(  1.0, -uv.y, -uv.x); }\n            case 1  { pos = vec3( -1.0, -uv.y,  uv.x); }\n            case 2  { pos = vec3( uv.x,   1.0,  uv.y); }\n            case 3  { pos = vec3( uv.x,  -1.0, -uv.y); }\n            case 4  { pos = vec3( uv.x, -uv.y,   1.0); }\n            default { pos = vec3(-uv.x, -uv.y,  -1.0); }\n        }\n\n        return normalize(pos);\n    }\n",i="\n    const INVALID_FACE = 6;\n    const INVALID_IDX = 4294967295u; // max u32\n\n    fn cubeSampleCoord(coord: vec3i, w: u32) -> vec3u {\n        // a flattened matrix of destination faces based on\n        // starting face and direction\n        const dfaces = array(\n            //                               I  Up Down Left Right Invalid\n            0, 2, 3, 4, 5, INVALID_FACE, // +X  +Y   -Y   +Z   -Z   \n            1, 2, 3, 5, 4, INVALID_FACE, // -X  +Y   -Y   -Z   +Z \n            2, 5, 4, 1, 0, INVALID_FACE, // +Y  -Z   +Z   -X   +X \n            3, 4, 5, 1, 0, INVALID_FACE, // -Y  +Z   -Z   -X   +X \n            4, 2, 3, 1, 0, INVALID_FACE, // +Z  +Y   -Y   -X   +X \n            5, 2, 3, 0, 1, INVALID_FACE, // -Z  +Y   -Y   +X   -X \n        );\n\n        // a flattened matrix in the same form as dfaces\n        // giving the index of the dmat array containing \n        // the transformation from the starting face to \n        // the destination face\n        const dindices = array(\n            0, 1,  2,  3,  4,  0,\n            0, 5,  6,  3,  4,  0,\n            0, 7,  8,  9,  10, 0,\n            0, 11, 12, 13, 14, 0,\n            0, 11, 8,  3,  4,  0,\n            0, 7,  12, 3,  4,  0,\n        );\n\n        // 2x4 matrices transforming a coordinate vector <u, v, w, 1>\n        // from one face to another\n        const dmats = array(\n            array(// 0\n                vec4(1, 0, 0, 0),   // u = u\n                vec4(0, 1, 0, 0),   // v = v\n            ),\n            array(// 1\n                vec4(0, 1, 1, 0),   // u = v + w\n                vec4(-1, 0, 1, -1), // v = w - u - 1\n            ),\n            array(// 2\n                vec4(0, -1, 2, -1), // u = 2w - v - 1\n                vec4(1, 0, 0, 0),   // v = u\n            ),\n            array(// 3\n                vec4(1, 0, 1, 0),   // u = u + w\n                vec4(0, 1, 0, 0),   // v = v\n            ),\n            array(// 4\n                vec4(1, 0, -1, 0),  // u = u - w\n                vec4(0, 1, 0, 0),   // v = v\n            ),\n            array(// 5\n                vec4(0, -1, 0, -1), // u = -v - 1\n                vec4(1, 0, 0, 0),   // v = u\n            ),\n            array(// 6\n                vec4(0, 1, -1, 0),  // u = v - w\n                vec4(-1, 0, 1, -1), // v = w - u - 1\n            ),\n            array(// 7\n                vec4(-1, 0, 1, -1), // u = w - u - 1\n                vec4(0, -1, 0, -1), // v = -v - 1\n            ),\n            array(// 8\n                vec4(1, 0, 0, 0),   // u = u\n                vec4(0, 1, -1, 0),  // v = v - w\n            ),\n            array(// 9\n                vec4(0, 1, 0, 0),   // u = v\n                vec4(-1, 0, 0, -1), // v = -u - 1\n            ),\n            array(// 10\n                vec4(0, -1, 1, -1), // u = w - v - 1\n                vec4(1, 0, -1, 0),  // v = u - w\n            ),\n            array(// 11\n                vec4(1, 0, 0, 0),   // u = u\n                vec4(0, 1, 1, 0),   // v = v + w\n            ),\n            array(// 12\n                vec4(-1, 0, 1, -1), // u = w - u - 1\n                vec4(0, -1, 2, -1), // v = 2w - v - 1\n            ),\n            array(// 13\n                vec4(0, -1, 1, -1), // u = w - v - 1\n                vec4(1, 0, 1, 0),   // v = u + w\n            ),\n            array(// 14\n                vec4(0, 1, 0, 0),   // u = v\n                vec4(-1, 0, 2, -1), // v = 2w - u - 1\n            ),\n        );\n\n        let iw = i32(w);\n\n        var dir = 0;\n        if (\n            coord.y >= iw * 2 - 1 \n            || coord.y <= -iw \n            || coord.x >= iw * 2 - 1 \n            || coord.x <= -iw\n        ) {\n            dir = 5;\n        } else {\n            if (coord.y < 0) {\n                dir = 1;\n            } else if (coord.y >= iw) {\n                dir = 2;\n            }\n            if (coord.x < 0) {\n                dir = select(5, 3, dir == 0);\n            } else if (coord.x >= iw) {\n                dir = select(5, 4, dir == 0);\n            }\n        }\n\n        let idx = coord.z * 6 + dir;\n        let samp = vec4(coord.xy, iw, 1);\n        let dmat = dmats[dindices[idx]];\n        return vec3u(vec3(dot(dmat[0], samp), dot(dmat[1], samp), dfaces[idx]));\n    }\n\n    fn cubeCoordToIdx(coord: vec3u, w: u32) -> u32 {\n        return coord.x + coord.y * w + coord.z * w * w;\n    }\n\n    fn cubeIdxToCoord(idx: u32, w: u32) -> vec3u {\n        let w2 = w * w;\n        let fidx = idx % w2;\n        return vec3u(fidx % w, fidx / w, idx / w2);\n    }\n\n    fn cubeSampleIdx(uvf: vec3i, w: u32) -> u32 {\n        let coord = cubeSampleCoord(uvf, w);\n        return select(\n            cubeCoordToIdx(coord, w), \n            INVALID_IDX, \n            coord.z == INVALID_FACE,\n        );\n    }\n"},3936:(e,t,r)=>{if(r.d(t,{Lr:()=>o,gU:()=>u}),344==r.j)var n=r(9253);var i=r(2323);if(344==r.j)var a=r(2349);function o(e,t,r,n,i=4){const a=i-1,o=r.createBuffer({label:n,usage:t,size:e.byteLength+a&~a,mappedAtCreation:!0}),s=new Uint8Array(o.getMappedRange()),u=e instanceof ArrayBuffer?new Uint8Array(e):new Uint8Array(e.buffer,e.byteOffset,e.byteLength);return s.set(u),o.unmap(),o}async function s({device:e,texture:t,mipLevel:r=0,returnBuffer:n,storageBuffer:o,resultBuffer:s,description:u}){const l=i.T2[t.format],c=a.OY`[textureToKTX${u??""}${t.label}] --`;if(null==l)throw new Error(`${c} format ${t.format} unsupported`);const d=t.width>>r,f=t.height>>r,p=d*l,h=Math.max(p,256),m=f,v=m*h*t.depthOrArrayLayers,g=p*f*t.depthOrArrayLayers;if(null!=s&&s.byteLength<v)throw new Error(`${c} given result array not large enough.\n${s.byteLength} < ${v}`);if(null!=o&&o.size<v)throw new Error(`${c} given storage buffer not large enough.\n${o.size} < ${v}`);const b=GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ;if(null!=o&&(o.usage&b)!==b)throw new Error(`${c} given storage does not have correct usage flags.\nGiven: ${o.usage}\nRequired: ${b}`);let w=s??new Uint8Array(v);const y=o??e.createBuffer({label:`${c} storage buffer`,size:v,usage:b}),x=e.createCommandEncoder({label:`${c} encoder`});x.copyTextureToBuffer({texture:t,mipLevel:r},{buffer:y,rowsPerImage:m,bytesPerRow:h},{width:d,height:f,depthOrArrayLayers:t.depthOrArrayLayers}),e.queue.submit([x.finish()]),await Promise.all([y.mapAsync(GPUMapMode.READ,0,v),e.queue.onSubmittedWorkDone()]);const T=y.getMappedRange(0,v);if(w.set(new Uint8Array(T)),y.unmap(),h>p){for(let e=0;e<f*t.depthOrArrayLayers;e+=1)for(let t=0;t<p;t+=1)w[t+e*p]=w[t+e*h];w=w.slice(0,g)}return{imageData:w,storageBuffer:n?y:void 0}}async function u(e,t,r=!1){const o=i.T2[t.format],u=i.GE[t.format];if(null==o||null==u)throw new Error(`textureToKTX -- format ${t.format} of ${t.label} unsupported`);const l=new n.nYd;l.pixelWidth=t.width,l.pixelHeight=t.height,l.vkFormat=i.KO[t.format],l.typeSize=u,delete l.keyValue.KTXswizzle;const c=l.dataFormatDescriptor[0];if(c.colorModel=n.Tre,c.transferFunction=n.T5j,c.bytesPlane[0]=o,c.samples=(0,a._b)(4,(e=>({channelType:[192,193,194,207][e],samplePosition:[0,0,0,0],bitLength:8*l.typeSize-1,bitOffset:8*l.typeSize*e,sampleLower:-1082130432,sampleUpper:1065353216}))),"3d"===t.dimension)l.faceCount=1,l.pixelDepth=t.depthOrArrayLayers;else if(r){const e=t.depthOrArrayLayers/6;l.layerCount=1===e?0:e,l.faceCount=6}else l.layerCount=t.depthOrArrayLayers,l.faceCount=1;let d,f;for(let r=0;r<t.mipLevelCount;r+=1)({imageData:f,storageBuffer:d}=await s({mipLevel:r,returnBuffer:!0,device:e,texture:t,storageBuffer:d})),l.levels.push({levelData:f,uncompressedByteLength:f.byteLength});return n.M98(l)}}}]);
//# sourceMappingURL=488.bundle.js.map