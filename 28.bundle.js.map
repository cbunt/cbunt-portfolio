{"version":3,"file":"28.bundle.js","mappings":"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","sources":["webpack://cbunt-portfolio/./node_modules/.pnpm/ktx-parse@0.7.1/node_modules/ktx-parse/dist/ktx-parse.modern.js","webpack://cbunt-portfolio/./node_modules/.pnpm/wgpu-matrix@3.2.0/node_modules/wgpu-matrix/dist/3.x/wgpu-matrix.module.js"],"sourcesContent":["///////////////////////////////////////////////////\n// KTX2 Header.\n///////////////////////////////////////////////////\nconst KHR_SUPERCOMPRESSION_NONE = 0;\nconst KHR_SUPERCOMPRESSION_BASISLZ = 1;\nconst KHR_SUPERCOMPRESSION_ZSTD = 2;\nconst KHR_SUPERCOMPRESSION_ZLIB = 3;\n///////////////////////////////////////////////////\n// Data Format Descriptor (DFD).\n///////////////////////////////////////////////////\nconst KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT = 0;\nconst KHR_DF_VENDORID_KHRONOS = 0;\nconst KHR_DF_VERSION = 2;\nconst KHR_DF_MODEL_UNSPECIFIED = 0;\nconst KHR_DF_MODEL_RGBSDA = 1;\n// ...\nconst KHR_DF_MODEL_ETC1 = 160;\nconst KHR_DF_MODEL_ETC2 = 161;\nconst KHR_DF_MODEL_ASTC = 162;\nconst KHR_DF_MODEL_ETC1S = 163;\nconst KHR_DF_MODEL_UASTC = 166;\nconst KHR_DF_FLAG_ALPHA_STRAIGHT = 0;\nconst KHR_DF_FLAG_ALPHA_PREMULTIPLIED = 1;\nconst KHR_DF_TRANSFER_UNSPECIFIED = 0;\nconst KHR_DF_TRANSFER_LINEAR = 1;\nconst KHR_DF_TRANSFER_SRGB = 2;\nconst KHR_DF_TRANSFER_ITU = 3;\nconst KHR_DF_TRANSFER_NTSC = 4;\nconst KHR_DF_TRANSFER_SLOG = 5;\nconst KHR_DF_TRANSFER_SLOG2 = 6;\nconst KHR_DF_TRANSFER_BT1886 = 7;\nconst KHR_DF_TRANSFER_HLG_OETF = 8;\nconst KHR_DF_TRANSFER_HLG_EOTF = 9;\nconst KHR_DF_TRANSFER_PQ_EOTF = 10;\nconst KHR_DF_TRANSFER_PQ_OETF = 11;\nconst KHR_DF_TRANSFER_DCIP3 = 12;\nconst KHR_DF_TRANSFER_PAL_OETF = 13;\nconst KHR_DF_TRANSFER_PAL625_EOTF = 14;\nconst KHR_DF_TRANSFER_ST240 = 15;\nconst KHR_DF_TRANSFER_ACESCC = 16;\nconst KHR_DF_TRANSFER_ACESCCT = 17;\nconst KHR_DF_TRANSFER_ADOBERGB = 18;\nconst KHR_DF_PRIMARIES_UNSPECIFIED = 0;\nconst KHR_DF_PRIMARIES_BT709 = 1;\nconst KHR_DF_PRIMARIES_BT601_EBU = 2;\nconst KHR_DF_PRIMARIES_BT601_SMPTE = 3;\nconst KHR_DF_PRIMARIES_BT2020 = 4;\nconst KHR_DF_PRIMARIES_CIEXYZ = 5;\nconst KHR_DF_PRIMARIES_ACES = 6;\nconst KHR_DF_PRIMARIES_ACESCC = 7;\nconst KHR_DF_PRIMARIES_NTSC1953 = 8;\nconst KHR_DF_PRIMARIES_PAL525 = 9;\nconst KHR_DF_PRIMARIES_DISPLAYP3 = 10;\nconst KHR_DF_PRIMARIES_ADOBERGB = 11;\nconst KHR_DF_CHANNEL_RGBSDA_RED = 0;\nconst KHR_DF_CHANNEL_RGBSDA_GREEN = 1;\nconst KHR_DF_CHANNEL_RGBSDA_BLUE = 2;\nconst KHR_DF_CHANNEL_RGBSDA_STENCIL = 13;\nconst KHR_DF_CHANNEL_RGBSDA_DEPTH = 14;\nconst KHR_DF_CHANNEL_RGBSDA_ALPHA = 15;\nconst KHR_DF_SAMPLE_DATATYPE_FLOAT = 0x80;\nconst KHR_DF_SAMPLE_DATATYPE_SIGNED = 0x40;\nconst KHR_DF_SAMPLE_DATATYPE_EXPONENT = 0x20;\nconst KHR_DF_SAMPLE_DATATYPE_LINEAR = 0x10;\n///////////////////////////////////////////////////\n// VK FORMAT.\n///////////////////////////////////////////////////\nconst VK_FORMAT_UNDEFINED = 0;\nconst VK_FORMAT_R4G4_UNORM_PACK8 = 1;\nconst VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2;\nconst VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3;\nconst VK_FORMAT_R5G6B5_UNORM_PACK16 = 4;\nconst VK_FORMAT_B5G6R5_UNORM_PACK16 = 5;\nconst VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6;\nconst VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7;\nconst VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8;\nconst VK_FORMAT_R8_UNORM = 9;\nconst VK_FORMAT_R8_SNORM = 10;\nconst VK_FORMAT_R8_UINT = 13;\nconst VK_FORMAT_R8_SINT = 14;\nconst VK_FORMAT_R8_SRGB = 15;\nconst VK_FORMAT_R8G8_UNORM = 16;\nconst VK_FORMAT_R8G8_SNORM = 17;\nconst VK_FORMAT_R8G8_UINT = 20;\nconst VK_FORMAT_R8G8_SINT = 21;\nconst VK_FORMAT_R8G8_SRGB = 22;\nconst VK_FORMAT_R8G8B8_UNORM = 23;\nconst VK_FORMAT_R8G8B8_SNORM = 24;\nconst VK_FORMAT_R8G8B8_UINT = 27;\nconst VK_FORMAT_R8G8B8_SINT = 28;\nconst VK_FORMAT_R8G8B8_SRGB = 29;\nconst VK_FORMAT_B8G8R8_UNORM = 30;\nconst VK_FORMAT_B8G8R8_SNORM = 31;\nconst VK_FORMAT_B8G8R8_UINT = 34;\nconst VK_FORMAT_B8G8R8_SINT = 35;\nconst VK_FORMAT_B8G8R8_SRGB = 36;\nconst VK_FORMAT_R8G8B8A8_UNORM = 37;\nconst VK_FORMAT_R8G8B8A8_SNORM = 38;\nconst VK_FORMAT_R8G8B8A8_UINT = 41;\nconst VK_FORMAT_R8G8B8A8_SINT = 42;\nconst VK_FORMAT_R8G8B8A8_SRGB = 43;\nconst VK_FORMAT_B8G8R8A8_UNORM = 44;\nconst VK_FORMAT_B8G8R8A8_SNORM = 45;\nconst VK_FORMAT_B8G8R8A8_UINT = 48;\nconst VK_FORMAT_B8G8R8A8_SINT = 49;\nconst VK_FORMAT_B8G8R8A8_SRGB = 50;\nconst VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58;\nconst VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59;\nconst VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62;\nconst VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63;\nconst VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64;\nconst VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65;\nconst VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68;\nconst VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69;\nconst VK_FORMAT_R16_UNORM = 70;\nconst VK_FORMAT_R16_SNORM = 71;\nconst VK_FORMAT_R16_UINT = 74;\nconst VK_FORMAT_R16_SINT = 75;\nconst VK_FORMAT_R16_SFLOAT = 76;\nconst VK_FORMAT_R16G16_UNORM = 77;\nconst VK_FORMAT_R16G16_SNORM = 78;\nconst VK_FORMAT_R16G16_UINT = 81;\nconst VK_FORMAT_R16G16_SINT = 82;\nconst VK_FORMAT_R16G16_SFLOAT = 83;\nconst VK_FORMAT_R16G16B16_UNORM = 84;\nconst VK_FORMAT_R16G16B16_SNORM = 85;\nconst VK_FORMAT_R16G16B16_UINT = 88;\nconst VK_FORMAT_R16G16B16_SINT = 89;\nconst VK_FORMAT_R16G16B16_SFLOAT = 90;\nconst VK_FORMAT_R16G16B16A16_UNORM = 91;\nconst VK_FORMAT_R16G16B16A16_SNORM = 92;\nconst VK_FORMAT_R16G16B16A16_UINT = 95;\nconst VK_FORMAT_R16G16B16A16_SINT = 96;\nconst VK_FORMAT_R16G16B16A16_SFLOAT = 97;\nconst VK_FORMAT_R32_UINT = 98;\nconst VK_FORMAT_R32_SINT = 99;\nconst VK_FORMAT_R32_SFLOAT = 100;\nconst VK_FORMAT_R32G32_UINT = 101;\nconst VK_FORMAT_R32G32_SINT = 102;\nconst VK_FORMAT_R32G32_SFLOAT = 103;\nconst VK_FORMAT_R32G32B32_UINT = 104;\nconst VK_FORMAT_R32G32B32_SINT = 105;\nconst VK_FORMAT_R32G32B32_SFLOAT = 106;\nconst VK_FORMAT_R32G32B32A32_UINT = 107;\nconst VK_FORMAT_R32G32B32A32_SINT = 108;\nconst VK_FORMAT_R32G32B32A32_SFLOAT = 109;\nconst VK_FORMAT_R64_UINT = 110;\nconst VK_FORMAT_R64_SINT = 111;\nconst VK_FORMAT_R64_SFLOAT = 112;\nconst VK_FORMAT_R64G64_UINT = 113;\nconst VK_FORMAT_R64G64_SINT = 114;\nconst VK_FORMAT_R64G64_SFLOAT = 115;\nconst VK_FORMAT_R64G64B64_UINT = 116;\nconst VK_FORMAT_R64G64B64_SINT = 117;\nconst VK_FORMAT_R64G64B64_SFLOAT = 118;\nconst VK_FORMAT_R64G64B64A64_UINT = 119;\nconst VK_FORMAT_R64G64B64A64_SINT = 120;\nconst VK_FORMAT_R64G64B64A64_SFLOAT = 121;\nconst VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122;\nconst VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123;\nconst VK_FORMAT_D16_UNORM = 124;\nconst VK_FORMAT_X8_D24_UNORM_PACK32 = 125;\nconst VK_FORMAT_D32_SFLOAT = 126;\nconst VK_FORMAT_S8_UINT = 127;\nconst VK_FORMAT_D16_UNORM_S8_UINT = 128;\nconst VK_FORMAT_D24_UNORM_S8_UINT = 129;\nconst VK_FORMAT_D32_SFLOAT_S8_UINT = 130;\nconst VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131;\nconst VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132;\nconst VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133;\nconst VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134;\nconst VK_FORMAT_BC2_UNORM_BLOCK = 135;\nconst VK_FORMAT_BC2_SRGB_BLOCK = 136;\nconst VK_FORMAT_BC3_UNORM_BLOCK = 137;\nconst VK_FORMAT_BC3_SRGB_BLOCK = 138;\nconst VK_FORMAT_BC4_UNORM_BLOCK = 139;\nconst VK_FORMAT_BC4_SNORM_BLOCK = 140;\nconst VK_FORMAT_BC5_UNORM_BLOCK = 141;\nconst VK_FORMAT_BC5_SNORM_BLOCK = 142;\nconst VK_FORMAT_BC6H_UFLOAT_BLOCK = 143;\nconst VK_FORMAT_BC6H_SFLOAT_BLOCK = 144;\nconst VK_FORMAT_BC7_UNORM_BLOCK = 145;\nconst VK_FORMAT_BC7_SRGB_BLOCK = 146;\nconst VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147;\nconst VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148;\nconst VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149;\nconst VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150;\nconst VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151;\nconst VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152;\nconst VK_FORMAT_EAC_R11_UNORM_BLOCK = 153;\nconst VK_FORMAT_EAC_R11_SNORM_BLOCK = 154;\nconst VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155;\nconst VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156;\nconst VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157;\nconst VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158;\nconst VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159;\nconst VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160;\nconst VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161;\nconst VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162;\nconst VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163;\nconst VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164;\nconst VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165;\nconst VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166;\nconst VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167;\nconst VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168;\nconst VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169;\nconst VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170;\nconst VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171;\nconst VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172;\nconst VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173;\nconst VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174;\nconst VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175;\nconst VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176;\nconst VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177;\nconst VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178;\nconst VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179;\nconst VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180;\nconst VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181;\nconst VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182;\nconst VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183;\nconst VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184;\nconst VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007;\nconst VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008;\nconst VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009;\nconst VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010;\nconst VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011;\nconst VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017;\nconst VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018;\nconst VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019;\nconst VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020;\nconst VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021;\nconst VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000;\nconst VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001;\nconst VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002;\nconst VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003;\nconst VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004;\nconst VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005;\nconst VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006;\nconst VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007;\nconst VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000;\nconst VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001;\nconst VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002;\nconst VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003;\nconst VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004;\nconst VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005;\nconst VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006;\nconst VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007;\nconst VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008;\nconst VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009;\nconst VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010;\nconst VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011;\nconst VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012;\nconst VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013;\nconst VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = 1000340000;\nconst VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = 1000340001;\n\n/**\n * Represents an unpacked KTX 2.0 texture container. Data for individual mip levels are stored in\n * the `.levels` array, typically compressed in Basis Universal formats. Additional properties\n * provide metadata required to process, transcode, and upload these textures.\n */\nclass KTX2Container {\n  constructor() {\n    /**\n     * Specifies the image format using Vulkan VkFormat enum values. When using Basis Universal\n     * texture formats, `vkFormat` must be VK_FORMAT_UNDEFINED.\n     */\n    this.vkFormat = VK_FORMAT_UNDEFINED;\n    /**\n     * Size of the data type in bytes used to upload the data to a graphics API. When `vkFormat` is\n     * VK_FORMAT_UNDEFINED, `typeSize` must be 1.\n     */\n    this.typeSize = 1;\n    /** Width of the texture image for level 0, in pixels. */\n    this.pixelWidth = 0;\n    /** Height of the texture image for level 0, in pixels. */\n    this.pixelHeight = 0;\n    /** Depth of the texture image for level 0, in pixels (3D textures only). */\n    this.pixelDepth = 0;\n    /** Number of array elements (array textures only). */\n    this.layerCount = 0;\n    /**\n     * Number of cubemap faces. For cubemaps and cubemap arrays, `faceCount` must be 6. For all\n     * other textures, `faceCount` must be 1. Cubemap faces are stored in +X, -X, +Y, -Y, +Z, -Z\n     * order.\n     */\n    this.faceCount = 1;\n    /** Indicates which supercompression scheme has been applied to mip level images, if any. */\n    this.supercompressionScheme = KHR_SUPERCOMPRESSION_NONE;\n    /** Mip levels, ordered largest (original) to smallest (~1px). */\n    this.levels = [];\n    /** Data Format Descriptor. */\n    this.dataFormatDescriptor = [{\n      vendorId: KHR_DF_VENDORID_KHRONOS,\n      descriptorType: KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT,\n      descriptorBlockSize: 0,\n      versionNumber: KHR_DF_VERSION,\n      colorModel: KHR_DF_MODEL_UNSPECIFIED,\n      colorPrimaries: KHR_DF_PRIMARIES_BT709,\n      transferFunction: KHR_DF_TRANSFER_SRGB,\n      flags: KHR_DF_FLAG_ALPHA_STRAIGHT,\n      texelBlockDimension: [0, 0, 0, 0],\n      bytesPlane: [0, 0, 0, 0, 0, 0, 0, 0],\n      samples: []\n    }];\n    /** Key/Value Data. */\n    this.keyValue = {};\n    /** Supercompression Global Data. */\n    this.globalData = null;\n  }\n}\n\nclass BufferReader {\n  constructor(data, byteOffset, byteLength, littleEndian) {\n    this._dataView = void 0;\n    this._littleEndian = void 0;\n    this._offset = void 0;\n    this._dataView = new DataView(data.buffer, data.byteOffset + byteOffset, byteLength);\n    this._littleEndian = littleEndian;\n    this._offset = 0;\n  }\n  _nextUint8() {\n    const value = this._dataView.getUint8(this._offset);\n    this._offset += 1;\n    return value;\n  }\n  _nextUint16() {\n    const value = this._dataView.getUint16(this._offset, this._littleEndian);\n    this._offset += 2;\n    return value;\n  }\n  _nextUint32() {\n    const value = this._dataView.getUint32(this._offset, this._littleEndian);\n    this._offset += 4;\n    return value;\n  }\n  _nextUint64() {\n    const left = this._dataView.getUint32(this._offset, this._littleEndian);\n    const right = this._dataView.getUint32(this._offset + 4, this._littleEndian);\n    // TODO(cleanup): Just test this...\n    // const value = this._littleEndian ? left + (2 ** 32 * right) : (2 ** 32 * left) + right;\n    const value = left + 2 ** 32 * right;\n    this._offset += 8;\n    return value;\n  }\n  _nextInt32() {\n    const value = this._dataView.getInt32(this._offset, this._littleEndian);\n    this._offset += 4;\n    return value;\n  }\n  _nextUint8Array(len) {\n    const value = new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + this._offset, len);\n    this._offset += len;\n    return value;\n  }\n  _skip(bytes) {\n    this._offset += bytes;\n    return this;\n  }\n  _scan(maxByteLength, term = 0x00) {\n    const byteOffset = this._offset;\n    let byteLength = 0;\n    while (this._dataView.getUint8(this._offset) !== term && byteLength < maxByteLength) {\n      byteLength++;\n      this._offset++;\n    }\n    if (byteLength < maxByteLength) this._offset++;\n    return new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + byteOffset, byteLength);\n  }\n}\n\n///////////////////////////////////////////////////\n// Common.\n///////////////////////////////////////////////////\nconst KTX_WRITER = `KTX-Parse v${\"0.7.1\"}`;\nconst NUL = new Uint8Array([0x00]);\n///////////////////////////////////////////////////\n// KTX2 Header.\n///////////////////////////////////////////////////\nconst KTX2_ID = [\n// '´', 'K', 'T', 'X', '2', '0', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n0xab, 0x4b, 0x54, 0x58, 0x20, 0x32, 0x30, 0xbb, 0x0d, 0x0a, 0x1a, 0x0a];\nconst HEADER_BYTE_LENGTH = 68; // 13 * 4 + 2 * 8\n\n/** Encodes text to an ArrayBuffer. */\nfunction encodeText(text) {\n  return new TextEncoder().encode(text);\n}\n/** Decodes an ArrayBuffer to text. */\nfunction decodeText(buffer) {\n  return new TextDecoder().decode(buffer);\n}\n/** Concatenates N ArrayBuffers. */\nfunction concat(buffers) {\n  let totalByteLength = 0;\n  for (const buffer of buffers) {\n    totalByteLength += buffer.byteLength;\n  }\n  const result = new Uint8Array(totalByteLength);\n  let byteOffset = 0;\n  for (const buffer of buffers) {\n    result.set(new Uint8Array(buffer), byteOffset);\n    byteOffset += buffer.byteLength;\n  }\n  return result;\n}\n/** Returns the least common multiple (LCM) for two positive integers. */\nfunction leastCommonMultiple(a, b) {\n  const max = Math.max(a, b);\n  const min = Math.min(a, b);\n  let lcm = max;\n  while (lcm % min !== 0) {\n    lcm += max;\n  }\n  return lcm;\n}\n/**\n * Returns amount of padding, in bytes, required to pad a value V to N-byte\n * boundaries. Both V and N must be positive integers.\n */\nfunction getPadding(v, n = 4) {\n  return Math.ceil(v / n) * n - v;\n}\n/** Returns byte length per texel block. */\nfunction getBlockByteLength(container) {\n  return container.levels[0].levelData.byteLength / getBlockCount(container, 0);\n}\n/**\n * Returns total number of blocks for given level. For VK_FORMAT_UNDEFINED, DFD is required.\n *\n * References:\n * - https://github.khronos.org/KTX-Specification/ktxspec.v2.html#levelImages\n */\nfunction getBlockCount(container, levelIndex) {\n  let blockCount = 1;\n  const pixelDimensions = [container.pixelWidth, container.pixelHeight, container.pixelDepth];\n  const blockDimensions = getBlockDimensions(container);\n  for (let i = 0; i < 3; i++) {\n    if (pixelDimensions[i] > 0) {\n      const dimBlockCount = Math.ceil(Math.floor(pixelDimensions[i] * Math.pow(2, -levelIndex)) / blockDimensions[i]);\n      blockCount *= Math.max(1, dimBlockCount);\n    }\n  }\n  if (container.layerCount > 0) {\n    blockCount *= container.layerCount;\n  }\n  if (container.faceCount > 0) {\n    blockCount *= container.faceCount;\n  }\n  return blockCount;\n}\n/**\n * Given a KTX2 container, returns block dimensions as [width, height, depth]. Requires valid DFD.\n */\nfunction getBlockDimensions(container) {\n  const [x, y, z] = container.dataFormatDescriptor[0].texelBlockDimension;\n  return [x + 1, y + 1, z + 1];\n}\n\n/**\n * Parses a KTX 2.0 file, returning an unpacked {@link KTX2Container} instance with all associated\n * data. The container's mip levels and other binary data are pointers into the original file, not\n * copies, so the original file should not be overwritten after reading.\n *\n * @param data Bytes of KTX 2.0 file, as Uint8Array or Buffer.\n */\nfunction read(data) {\n  ///////////////////////////////////////////////////\n  // KTX 2.0 Identifier.\n  ///////////////////////////////////////////////////\n  const id = new Uint8Array(data.buffer, data.byteOffset, KTX2_ID.length);\n  if (id[0] !== KTX2_ID[0] ||\n  // '´'\n  id[1] !== KTX2_ID[1] ||\n  // 'K'\n  id[2] !== KTX2_ID[2] ||\n  // 'T'\n  id[3] !== KTX2_ID[3] ||\n  // 'X'\n  id[4] !== KTX2_ID[4] ||\n  // ' '\n  id[5] !== KTX2_ID[5] ||\n  // '2'\n  id[6] !== KTX2_ID[6] ||\n  // '0'\n  id[7] !== KTX2_ID[7] ||\n  // 'ª'\n  id[8] !== KTX2_ID[8] ||\n  // '\\r'\n  id[9] !== KTX2_ID[9] ||\n  // '\\n'\n  id[10] !== KTX2_ID[10] ||\n  // '\\x1A'\n  id[11] !== KTX2_ID[11] // '\\n'\n  ) {\n    throw new Error('Missing KTX 2.0 identifier.');\n  }\n  const container = new KTX2Container();\n  ///////////////////////////////////////////////////\n  // Header.\n  ///////////////////////////////////////////////////\n  const headerByteLength = 17 * Uint32Array.BYTES_PER_ELEMENT;\n  const headerReader = new BufferReader(data, KTX2_ID.length, headerByteLength, true);\n  container.vkFormat = headerReader._nextUint32();\n  container.typeSize = headerReader._nextUint32();\n  container.pixelWidth = headerReader._nextUint32();\n  container.pixelHeight = headerReader._nextUint32();\n  container.pixelDepth = headerReader._nextUint32();\n  container.layerCount = headerReader._nextUint32();\n  container.faceCount = headerReader._nextUint32();\n  const levelCount = headerReader._nextUint32();\n  container.supercompressionScheme = headerReader._nextUint32();\n  const dfdByteOffset = headerReader._nextUint32();\n  const dfdByteLength = headerReader._nextUint32();\n  const kvdByteOffset = headerReader._nextUint32();\n  const kvdByteLength = headerReader._nextUint32();\n  const sgdByteOffset = headerReader._nextUint64();\n  const sgdByteLength = headerReader._nextUint64();\n  ///////////////////////////////////////////////////\n  // Level Index.\n  ///////////////////////////////////////////////////\n  const levelByteLength = levelCount * 3 * 8;\n  const levelReader = new BufferReader(data, KTX2_ID.length + headerByteLength, levelByteLength, true);\n  for (let i = 0; i < levelCount; i++) {\n    container.levels.push({\n      levelData: new Uint8Array(data.buffer, data.byteOffset + levelReader._nextUint64(), levelReader._nextUint64()),\n      uncompressedByteLength: levelReader._nextUint64()\n    });\n  }\n  ///////////////////////////////////////////////////\n  // Data Format Descriptor (DFD).\n  ///////////////////////////////////////////////////\n  const dfdReader = new BufferReader(data, dfdByteOffset, dfdByteLength, true);\n  const dfd = {\n    vendorId: dfdReader._skip(4 /* totalSize */)._nextUint16(),\n    descriptorType: dfdReader._nextUint16(),\n    versionNumber: dfdReader._nextUint16(),\n    descriptorBlockSize: dfdReader._nextUint16(),\n    colorModel: dfdReader._nextUint8(),\n    colorPrimaries: dfdReader._nextUint8(),\n    transferFunction: dfdReader._nextUint8(),\n    flags: dfdReader._nextUint8(),\n    texelBlockDimension: [dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8()],\n    bytesPlane: [dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8()],\n    samples: []\n  };\n  const sampleStart = 6;\n  const sampleWords = 4;\n  const numSamples = (dfd.descriptorBlockSize / 4 - sampleStart) / sampleWords;\n  for (let i = 0; i < numSamples; i++) {\n    const sample = {\n      bitOffset: dfdReader._nextUint16(),\n      bitLength: dfdReader._nextUint8(),\n      channelType: dfdReader._nextUint8(),\n      samplePosition: [dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8()],\n      sampleLower: -Infinity,\n      sampleUpper: Infinity\n    };\n    if (sample.channelType & KHR_DF_SAMPLE_DATATYPE_SIGNED) {\n      sample.sampleLower = dfdReader._nextInt32();\n      sample.sampleUpper = dfdReader._nextInt32();\n    } else {\n      sample.sampleLower = dfdReader._nextUint32();\n      sample.sampleUpper = dfdReader._nextUint32();\n    }\n    dfd.samples[i] = sample;\n  }\n  container.dataFormatDescriptor.length = 0;\n  container.dataFormatDescriptor.push(dfd);\n  ///////////////////////////////////////////////////\n  // Key/Value Data (KVD).\n  ///////////////////////////////////////////////////\n  const kvdReader = new BufferReader(data, kvdByteOffset, kvdByteLength, true);\n  while (kvdReader._offset < kvdByteLength) {\n    const keyValueByteLength = kvdReader._nextUint32();\n    const keyData = kvdReader._scan(keyValueByteLength);\n    const key = decodeText(keyData);\n    container.keyValue[key] = kvdReader._nextUint8Array(keyValueByteLength - keyData.byteLength - 1);\n    if (key.match(/^ktx/i)) {\n      const text = decodeText(container.keyValue[key]);\n      container.keyValue[key] = text.substring(0, text.lastIndexOf('\\x00'));\n    }\n    const kvPadding = keyValueByteLength % 4 ? 4 - keyValueByteLength % 4 : 0; // align(4)\n    // 4-byte alignment.\n    kvdReader._skip(kvPadding);\n  }\n  ///////////////////////////////////////////////////\n  // Supercompression Global Data (SGD).\n  ///////////////////////////////////////////////////\n  if (sgdByteLength <= 0) return container;\n  const sgdReader = new BufferReader(data, sgdByteOffset, sgdByteLength, true);\n  const endpointCount = sgdReader._nextUint16();\n  const selectorCount = sgdReader._nextUint16();\n  const endpointsByteLength = sgdReader._nextUint32();\n  const selectorsByteLength = sgdReader._nextUint32();\n  const tablesByteLength = sgdReader._nextUint32();\n  const extendedByteLength = sgdReader._nextUint32();\n  const imageDescs = [];\n  for (let i = 0; i < levelCount; i++) {\n    imageDescs.push({\n      imageFlags: sgdReader._nextUint32(),\n      rgbSliceByteOffset: sgdReader._nextUint32(),\n      rgbSliceByteLength: sgdReader._nextUint32(),\n      alphaSliceByteOffset: sgdReader._nextUint32(),\n      alphaSliceByteLength: sgdReader._nextUint32()\n    });\n  }\n  const endpointsByteOffset = sgdByteOffset + sgdReader._offset;\n  const selectorsByteOffset = endpointsByteOffset + endpointsByteLength;\n  const tablesByteOffset = selectorsByteOffset + selectorsByteLength;\n  const extendedByteOffset = tablesByteOffset + tablesByteLength;\n  const endpointsData = new Uint8Array(data.buffer, data.byteOffset + endpointsByteOffset, endpointsByteLength);\n  const selectorsData = new Uint8Array(data.buffer, data.byteOffset + selectorsByteOffset, selectorsByteLength);\n  const tablesData = new Uint8Array(data.buffer, data.byteOffset + tablesByteOffset, tablesByteLength);\n  const extendedData = new Uint8Array(data.buffer, data.byteOffset + extendedByteOffset, extendedByteLength);\n  container.globalData = {\n    endpointCount,\n    selectorCount,\n    imageDescs,\n    endpointsData,\n    selectorsData,\n    tablesData,\n    extendedData\n  };\n  return container;\n}\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nconst DEFAULT_OPTIONS = {\n  keepWriter: false\n};\n/**\n * Serializes a {@link KTX2Container} instance to a KTX 2.0 file. Mip levels and other binary data\n * are copied into the resulting Uint8Array, so the original container can safely be edited or\n * destroyed after it is serialized.\n *\n * Options:\n * - keepWriter: If true, 'KTXWriter' key/value field is written as provided by the container.\n * \t\tOtherwise, a string for the current ktx-parse version is generated. Default: false.\n *\n * @param container\n * @param options\n */\nfunction write(container, options = {}) {\n  options = _extends({}, DEFAULT_OPTIONS, options);\n  ///////////////////////////////////////////////////\n  // Supercompression Global Data (SGD).\n  ///////////////////////////////////////////////////\n  let sgdBuffer = new ArrayBuffer(0);\n  if (container.globalData) {\n    const sgdHeaderBuffer = new ArrayBuffer(20 + container.globalData.imageDescs.length * 5 * 4);\n    const sgdHeaderView = new DataView(sgdHeaderBuffer);\n    sgdHeaderView.setUint16(0, container.globalData.endpointCount, true);\n    sgdHeaderView.setUint16(2, container.globalData.selectorCount, true);\n    sgdHeaderView.setUint32(4, container.globalData.endpointsData.byteLength, true);\n    sgdHeaderView.setUint32(8, container.globalData.selectorsData.byteLength, true);\n    sgdHeaderView.setUint32(12, container.globalData.tablesData.byteLength, true);\n    sgdHeaderView.setUint32(16, container.globalData.extendedData.byteLength, true);\n    for (let i = 0; i < container.globalData.imageDescs.length; i++) {\n      const imageDesc = container.globalData.imageDescs[i];\n      sgdHeaderView.setUint32(20 + i * 5 * 4 + 0, imageDesc.imageFlags, true);\n      sgdHeaderView.setUint32(20 + i * 5 * 4 + 4, imageDesc.rgbSliceByteOffset, true);\n      sgdHeaderView.setUint32(20 + i * 5 * 4 + 8, imageDesc.rgbSliceByteLength, true);\n      sgdHeaderView.setUint32(20 + i * 5 * 4 + 12, imageDesc.alphaSliceByteOffset, true);\n      sgdHeaderView.setUint32(20 + i * 5 * 4 + 16, imageDesc.alphaSliceByteLength, true);\n    }\n    sgdBuffer = concat([sgdHeaderBuffer, container.globalData.endpointsData, container.globalData.selectorsData, container.globalData.tablesData, container.globalData.extendedData]);\n  }\n  ///////////////////////////////////////////////////\n  // Key/Value Data (KVD).\n  ///////////////////////////////////////////////////\n  const keyValueData = [];\n  let keyValue = container.keyValue;\n  if (!options.keepWriter) {\n    keyValue = _extends({}, container.keyValue, {\n      KTXwriter: KTX_WRITER\n    });\n  }\n  for (const key in keyValue) {\n    const value = keyValue[key];\n    const keyData = encodeText(key);\n    const valueData = typeof value === 'string' ? concat([encodeText(value), NUL]) : value;\n    const kvByteLength = keyData.byteLength + 1 + valueData.byteLength;\n    const kvPadding = getPadding(kvByteLength, 4); // align(4)\n    keyValueData.push(concat([new Uint32Array([kvByteLength]), keyData, NUL, valueData, new Uint8Array(kvPadding).fill(0x00) // align(4)\n    ]));\n  }\n  const kvdBuffer = concat(keyValueData);\n  ///////////////////////////////////////////////////\n  // Data Format Descriptor (DFD).\n  ///////////////////////////////////////////////////\n  if (container.dataFormatDescriptor.length !== 1 || container.dataFormatDescriptor[0].descriptorType !== KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT) {\n    throw new Error('Only BASICFORMAT Data Format Descriptor output supported.');\n  }\n  const dfd = container.dataFormatDescriptor[0];\n  const dfdBuffer = new ArrayBuffer(28 + dfd.samples.length * 16);\n  const dfdView = new DataView(dfdBuffer);\n  const descriptorBlockSize = 24 + dfd.samples.length * 16;\n  dfdView.setUint32(0, dfdBuffer.byteLength, true);\n  dfdView.setUint16(4, dfd.vendorId, true);\n  dfdView.setUint16(6, dfd.descriptorType, true);\n  dfdView.setUint16(8, dfd.versionNumber, true);\n  dfdView.setUint16(10, descriptorBlockSize, true);\n  dfdView.setUint8(12, dfd.colorModel);\n  dfdView.setUint8(13, dfd.colorPrimaries);\n  dfdView.setUint8(14, dfd.transferFunction);\n  dfdView.setUint8(15, dfd.flags);\n  if (!Array.isArray(dfd.texelBlockDimension)) {\n    throw new Error('texelBlockDimension is now an array. For dimensionality `d`, set `d - 1`.');\n  }\n  dfdView.setUint8(16, dfd.texelBlockDimension[0]);\n  dfdView.setUint8(17, dfd.texelBlockDimension[1]);\n  dfdView.setUint8(18, dfd.texelBlockDimension[2]);\n  dfdView.setUint8(19, dfd.texelBlockDimension[3]);\n  for (let i = 0; i < 8; i++) dfdView.setUint8(20 + i, dfd.bytesPlane[i]);\n  for (let i = 0; i < dfd.samples.length; i++) {\n    const sample = dfd.samples[i];\n    const sampleByteOffset = 28 + i * 16;\n    if (sample.channelID) {\n      throw new Error('channelID has been renamed to channelType.');\n    }\n    dfdView.setUint16(sampleByteOffset + 0, sample.bitOffset, true);\n    dfdView.setUint8(sampleByteOffset + 2, sample.bitLength);\n    dfdView.setUint8(sampleByteOffset + 3, sample.channelType);\n    dfdView.setUint8(sampleByteOffset + 4, sample.samplePosition[0]);\n    dfdView.setUint8(sampleByteOffset + 5, sample.samplePosition[1]);\n    dfdView.setUint8(sampleByteOffset + 6, sample.samplePosition[2]);\n    dfdView.setUint8(sampleByteOffset + 7, sample.samplePosition[3]);\n    if (sample.channelType & KHR_DF_SAMPLE_DATATYPE_SIGNED) {\n      dfdView.setInt32(sampleByteOffset + 8, sample.sampleLower, true);\n      dfdView.setInt32(sampleByteOffset + 12, sample.sampleUpper, true);\n    } else {\n      dfdView.setUint32(sampleByteOffset + 8, sample.sampleLower, true);\n      dfdView.setUint32(sampleByteOffset + 12, sample.sampleUpper, true);\n    }\n  }\n  ///////////////////////////////////////////////////\n  // Data alignment.\n  ///////////////////////////////////////////////////\n  const dfdByteOffset = KTX2_ID.length + HEADER_BYTE_LENGTH + container.levels.length * 3 * 8;\n  const kvdByteOffset = dfdByteOffset + dfdBuffer.byteLength;\n  let sgdByteOffset = sgdBuffer.byteLength > 0 ? kvdByteOffset + kvdBuffer.byteLength : 0;\n  if (sgdByteOffset % 8) sgdByteOffset += 8 - sgdByteOffset % 8; // align(8)\n  ///////////////////////////////////////////////////\n  // Level Index.\n  ///////////////////////////////////////////////////\n  const levelData = [];\n  const levelIndex = new DataView(new ArrayBuffer(container.levels.length * 3 * 8));\n  const levelDataByteOffsets = new Uint32Array(container.levels.length);\n  let levelAlign = 0;\n  if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n    levelAlign = leastCommonMultiple(getBlockByteLength(container), 4);\n  }\n  // Level data is ordered small → large.\n  let levelDataByteOffset = (sgdByteOffset || kvdByteOffset + kvdBuffer.byteLength) + sgdBuffer.byteLength;\n  for (let i = container.levels.length - 1; i >= 0; i--) {\n    // Level padding.\n    if (levelDataByteOffset % levelAlign) {\n      const paddingBytes = getPadding(levelDataByteOffset, levelAlign);\n      levelData.push(new Uint8Array(paddingBytes));\n      levelDataByteOffset += paddingBytes;\n    }\n    // Level data.\n    const level = container.levels[i];\n    levelData.push(level.levelData);\n    levelDataByteOffsets[i] = levelDataByteOffset;\n    levelDataByteOffset += level.levelData.byteLength;\n  }\n  // Level index is ordered large → small.\n  for (let i = 0; i < container.levels.length; i++) {\n    const level = container.levels[i];\n    levelIndex.setBigUint64(i * 24 + 0, BigInt(levelDataByteOffsets[i]), true);\n    levelIndex.setBigUint64(i * 24 + 8, BigInt(level.levelData.byteLength), true);\n    levelIndex.setBigUint64(i * 24 + 16, BigInt(level.uncompressedByteLength), true);\n  }\n  ///////////////////////////////////////////////////\n  // Header.\n  ///////////////////////////////////////////////////\n  const headerBuffer = new ArrayBuffer(HEADER_BYTE_LENGTH);\n  const headerView = new DataView(headerBuffer);\n  headerView.setUint32(0, container.vkFormat, true);\n  headerView.setUint32(4, container.typeSize, true);\n  headerView.setUint32(8, container.pixelWidth, true);\n  headerView.setUint32(12, container.pixelHeight, true);\n  headerView.setUint32(16, container.pixelDepth, true);\n  headerView.setUint32(20, container.layerCount, true);\n  headerView.setUint32(24, container.faceCount, true);\n  headerView.setUint32(28, container.levels.length, true);\n  headerView.setUint32(32, container.supercompressionScheme, true);\n  headerView.setUint32(36, dfdByteOffset, true);\n  headerView.setUint32(40, dfdBuffer.byteLength, true);\n  headerView.setUint32(44, kvdByteOffset, true);\n  headerView.setUint32(48, kvdBuffer.byteLength, true);\n  headerView.setBigUint64(52, BigInt(sgdBuffer.byteLength > 0 ? sgdByteOffset : 0), true);\n  headerView.setBigUint64(60, BigInt(sgdBuffer.byteLength), true);\n  ///////////////////////////////////////////////////\n  // Compose.\n  ///////////////////////////////////////////////////\n  return new Uint8Array(concat([new Uint8Array(KTX2_ID).buffer, headerBuffer, levelIndex.buffer, dfdBuffer, kvdBuffer, sgdByteOffset > 0 ? new ArrayBuffer(sgdByteOffset - (kvdByteOffset + kvdBuffer.byteLength)) // align(8)\n  : new ArrayBuffer(0), sgdBuffer, ...levelData]));\n}\n\nexport { KHR_DF_CHANNEL_RGBSDA_ALPHA, KHR_DF_CHANNEL_RGBSDA_BLUE, KHR_DF_CHANNEL_RGBSDA_DEPTH, KHR_DF_CHANNEL_RGBSDA_GREEN, KHR_DF_CHANNEL_RGBSDA_RED, KHR_DF_CHANNEL_RGBSDA_STENCIL, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, KHR_DF_FLAG_ALPHA_STRAIGHT, KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT, KHR_DF_MODEL_ASTC, KHR_DF_MODEL_ETC1, KHR_DF_MODEL_ETC1S, KHR_DF_MODEL_ETC2, KHR_DF_MODEL_RGBSDA, KHR_DF_MODEL_UASTC, KHR_DF_MODEL_UNSPECIFIED, KHR_DF_PRIMARIES_ACES, KHR_DF_PRIMARIES_ACESCC, KHR_DF_PRIMARIES_ADOBERGB, KHR_DF_PRIMARIES_BT2020, KHR_DF_PRIMARIES_BT601_EBU, KHR_DF_PRIMARIES_BT601_SMPTE, KHR_DF_PRIMARIES_BT709, KHR_DF_PRIMARIES_CIEXYZ, KHR_DF_PRIMARIES_DISPLAYP3, KHR_DF_PRIMARIES_NTSC1953, KHR_DF_PRIMARIES_PAL525, KHR_DF_PRIMARIES_UNSPECIFIED, KHR_DF_SAMPLE_DATATYPE_EXPONENT, KHR_DF_SAMPLE_DATATYPE_FLOAT, KHR_DF_SAMPLE_DATATYPE_LINEAR, KHR_DF_SAMPLE_DATATYPE_SIGNED, KHR_DF_TRANSFER_ACESCC, KHR_DF_TRANSFER_ACESCCT, KHR_DF_TRANSFER_ADOBERGB, KHR_DF_TRANSFER_BT1886, KHR_DF_TRANSFER_DCIP3, KHR_DF_TRANSFER_HLG_EOTF, KHR_DF_TRANSFER_HLG_OETF, KHR_DF_TRANSFER_ITU, KHR_DF_TRANSFER_LINEAR, KHR_DF_TRANSFER_NTSC, KHR_DF_TRANSFER_PAL625_EOTF, KHR_DF_TRANSFER_PAL_OETF, KHR_DF_TRANSFER_PQ_EOTF, KHR_DF_TRANSFER_PQ_OETF, KHR_DF_TRANSFER_SLOG, KHR_DF_TRANSFER_SLOG2, KHR_DF_TRANSFER_SRGB, KHR_DF_TRANSFER_ST240, KHR_DF_TRANSFER_UNSPECIFIED, KHR_DF_VENDORID_KHRONOS, KHR_DF_VERSION, KHR_SUPERCOMPRESSION_BASISLZ, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZLIB, KHR_SUPERCOMPRESSION_ZSTD, KTX2Container, VK_FORMAT_A1R5G5B5_UNORM_PACK16, VK_FORMAT_A2B10G10R10_SINT_PACK32, VK_FORMAT_A2B10G10R10_SNORM_PACK32, VK_FORMAT_A2B10G10R10_UINT_PACK32, VK_FORMAT_A2B10G10R10_UNORM_PACK32, VK_FORMAT_A2R10G10B10_SINT_PACK32, VK_FORMAT_A2R10G10B10_SNORM_PACK32, VK_FORMAT_A2R10G10B10_UINT_PACK32, VK_FORMAT_A2R10G10B10_UNORM_PACK32, VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT, VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT, VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_10x10_SRGB_BLOCK, VK_FORMAT_ASTC_10x10_UNORM_BLOCK, VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_10x5_SRGB_BLOCK, VK_FORMAT_ASTC_10x5_UNORM_BLOCK, VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_10x6_SRGB_BLOCK, VK_FORMAT_ASTC_10x6_UNORM_BLOCK, VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_10x8_SRGB_BLOCK, VK_FORMAT_ASTC_10x8_UNORM_BLOCK, VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_12x10_SRGB_BLOCK, VK_FORMAT_ASTC_12x10_UNORM_BLOCK, VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_12x12_SRGB_BLOCK, VK_FORMAT_ASTC_12x12_UNORM_BLOCK, VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_4x4_SRGB_BLOCK, VK_FORMAT_ASTC_4x4_UNORM_BLOCK, VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_5x4_SRGB_BLOCK, VK_FORMAT_ASTC_5x4_UNORM_BLOCK, VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_5x5_SRGB_BLOCK, VK_FORMAT_ASTC_5x5_UNORM_BLOCK, VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_6x5_SRGB_BLOCK, VK_FORMAT_ASTC_6x5_UNORM_BLOCK, VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_6x6_SRGB_BLOCK, VK_FORMAT_ASTC_6x6_UNORM_BLOCK, VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_8x5_SRGB_BLOCK, VK_FORMAT_ASTC_8x5_UNORM_BLOCK, VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_8x6_SRGB_BLOCK, VK_FORMAT_ASTC_8x6_UNORM_BLOCK, VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_8x8_SRGB_BLOCK, VK_FORMAT_ASTC_8x8_UNORM_BLOCK, VK_FORMAT_B10G11R11_UFLOAT_PACK32, VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16, VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16, VK_FORMAT_B4G4R4A4_UNORM_PACK16, VK_FORMAT_B5G5R5A1_UNORM_PACK16, VK_FORMAT_B5G6R5_UNORM_PACK16, VK_FORMAT_B8G8R8A8_SINT, VK_FORMAT_B8G8R8A8_SNORM, VK_FORMAT_B8G8R8A8_SRGB, VK_FORMAT_B8G8R8A8_UINT, VK_FORMAT_B8G8R8A8_UNORM, VK_FORMAT_B8G8R8_SINT, VK_FORMAT_B8G8R8_SNORM, VK_FORMAT_B8G8R8_SRGB, VK_FORMAT_B8G8R8_UINT, VK_FORMAT_B8G8R8_UNORM, VK_FORMAT_BC1_RGBA_SRGB_BLOCK, VK_FORMAT_BC1_RGBA_UNORM_BLOCK, VK_FORMAT_BC1_RGB_SRGB_BLOCK, VK_FORMAT_BC1_RGB_UNORM_BLOCK, VK_FORMAT_BC2_SRGB_BLOCK, VK_FORMAT_BC2_UNORM_BLOCK, VK_FORMAT_BC3_SRGB_BLOCK, VK_FORMAT_BC3_UNORM_BLOCK, VK_FORMAT_BC4_SNORM_BLOCK, VK_FORMAT_BC4_UNORM_BLOCK, VK_FORMAT_BC5_SNORM_BLOCK, VK_FORMAT_BC5_UNORM_BLOCK, VK_FORMAT_BC6H_SFLOAT_BLOCK, VK_FORMAT_BC6H_UFLOAT_BLOCK, VK_FORMAT_BC7_SRGB_BLOCK, VK_FORMAT_BC7_UNORM_BLOCK, VK_FORMAT_D16_UNORM, VK_FORMAT_D16_UNORM_S8_UINT, VK_FORMAT_D24_UNORM_S8_UINT, VK_FORMAT_D32_SFLOAT, VK_FORMAT_D32_SFLOAT_S8_UINT, VK_FORMAT_E5B9G9R9_UFLOAT_PACK32, VK_FORMAT_EAC_R11G11_SNORM_BLOCK, VK_FORMAT_EAC_R11G11_UNORM_BLOCK, VK_FORMAT_EAC_R11_SNORM_BLOCK, VK_FORMAT_EAC_R11_UNORM_BLOCK, VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK, VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK, VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK, VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK, VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK, VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK, VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16, VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16, VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG, VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG, VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG, VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG, VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG, VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG, VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG, VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG, VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16, VK_FORMAT_R10X6G10X6_UNORM_2PACK16, VK_FORMAT_R10X6_UNORM_PACK16, VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16, VK_FORMAT_R12X4G12X4_UNORM_2PACK16, VK_FORMAT_R12X4_UNORM_PACK16, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R16G16B16A16_SINT, VK_FORMAT_R16G16B16A16_SNORM, VK_FORMAT_R16G16B16A16_UINT, VK_FORMAT_R16G16B16A16_UNORM, VK_FORMAT_R16G16B16_SFLOAT, VK_FORMAT_R16G16B16_SINT, VK_FORMAT_R16G16B16_SNORM, VK_FORMAT_R16G16B16_UINT, VK_FORMAT_R16G16B16_UNORM, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R16G16_SINT, VK_FORMAT_R16G16_SNORM, VK_FORMAT_R16G16_UINT, VK_FORMAT_R16G16_UNORM, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R16_SINT, VK_FORMAT_R16_SNORM, VK_FORMAT_R16_UINT, VK_FORMAT_R16_UNORM, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R32G32B32A32_SINT, VK_FORMAT_R32G32B32A32_UINT, VK_FORMAT_R32G32B32_SFLOAT, VK_FORMAT_R32G32B32_SINT, VK_FORMAT_R32G32B32_UINT, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R32G32_SINT, VK_FORMAT_R32G32_UINT, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R32_SINT, VK_FORMAT_R32_UINT, VK_FORMAT_R4G4B4A4_UNORM_PACK16, VK_FORMAT_R4G4_UNORM_PACK8, VK_FORMAT_R5G5B5A1_UNORM_PACK16, VK_FORMAT_R5G6B5_UNORM_PACK16, VK_FORMAT_R64G64B64A64_SFLOAT, VK_FORMAT_R64G64B64A64_SINT, VK_FORMAT_R64G64B64A64_UINT, VK_FORMAT_R64G64B64_SFLOAT, VK_FORMAT_R64G64B64_SINT, VK_FORMAT_R64G64B64_UINT, VK_FORMAT_R64G64_SFLOAT, VK_FORMAT_R64G64_SINT, VK_FORMAT_R64G64_UINT, VK_FORMAT_R64_SFLOAT, VK_FORMAT_R64_SINT, VK_FORMAT_R64_UINT, VK_FORMAT_R8G8B8A8_SINT, VK_FORMAT_R8G8B8A8_SNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R8G8B8A8_UINT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8_SINT, VK_FORMAT_R8G8B8_SNORM, VK_FORMAT_R8G8B8_SRGB, VK_FORMAT_R8G8B8_UINT, VK_FORMAT_R8G8B8_UNORM, VK_FORMAT_R8G8_SINT, VK_FORMAT_R8G8_SNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R8G8_UINT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8_SINT, VK_FORMAT_R8_SNORM, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UINT, VK_FORMAT_R8_UNORM, VK_FORMAT_S8_UINT, VK_FORMAT_UNDEFINED, VK_FORMAT_X8_D24_UNORM_PACK32, read, write };\n//# sourceMappingURL=ktx-parse.modern.js.map\n","/* wgpu-matrix@3.2.0, license MIT */\nfunction wrapConstructor(OriginalConstructor, modifier) {\n    return class extends OriginalConstructor {\n        constructor(...args) {\n            super(...args);\n            modifier(this);\n        }\n    }; // Type assertion is necessary here\n}\nconst ZeroArray = wrapConstructor((Array), a => a.fill(0));\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nlet EPSILON = 0.000001;\n/**\n * Set the value for EPSILON for various checks\n * @param v - Value to use for EPSILON.\n * @returns previous value of EPSILON;\n */\nfunction setEpsilon(v) {\n    const old = EPSILON;\n    EPSILON = v;\n    return old;\n}\n/**\n * Convert degrees to radians\n * @param degrees - Angle in degrees\n * @returns angle converted to radians\n */\nfunction degToRad(degrees) {\n    return degrees * Math.PI / 180;\n}\n/**\n * Convert radians to degrees\n * @param radians - Angle in radians\n * @returns angle converted to degrees\n */\nfunction radToDeg(radians) {\n    return radians * 180 / Math.PI;\n}\n/**\n * Lerps between a and b via t\n * @param a - starting value\n * @param b - ending value\n * @param t - value where 0 = a and 1 = b\n * @returns a + (b - a) * t\n */\nfunction lerp(a, b, t) {\n    return a + (b - a) * t;\n}\n/**\n * Compute the opposite of lerp. Given a and b and a value between\n * a and b returns a value between 0 and 1. 0 if a, 1 if b.\n * Note: no clamping is done.\n * @param a - start value\n * @param b - end value\n * @param v - value between a and b\n * @returns (v - a) / (b - a)\n */\nfunction inverseLerp(a, b, v) {\n    const d = b - a;\n    return (Math.abs(b - a) < EPSILON)\n        ? a\n        : (v - a) / d;\n}\n/**\n * Compute the euclidean modulo\n *\n * ```\n * // table for n / 3\n * -5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5   <- n\n * ------------------------------------\n * -2  -1  -0  -2  -1   0,  1,  2,  0,  1,  2   <- n % 3\n *  1   2   0   1   2   0,  1,  2,  0,  1,  2   <- euclideanModule(n, 3)\n * ```\n *\n * @param n - dividend\n * @param m - divisor\n * @returns the euclidean modulo of n / m\n */\nfunction euclideanModulo(n, m) {\n    return ((n % m) + m) % m;\n}\n\nvar utils = {\n    __proto__: null,\n    get EPSILON () { return EPSILON; },\n    degToRad: degToRad,\n    euclideanModulo: euclideanModulo,\n    inverseLerp: inverseLerp,\n    lerp: lerp,\n    radToDeg: radToDeg,\n    setEpsilon: setEpsilon\n};\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates am typed API for Vec3\n */\nfunction getAPIImpl$5(Ctor) {\n    /**\n     * Creates a Vec2; may be called with x, y, z to set initial values.\n     *\n     * Note: Since passing in a raw JavaScript array\n     * is valid in all circumstances, if you want to\n     * force a JavaScript array into a Vec2's specified type\n     * it would be faster to use\n     *\n     * ```\n     * const v = vec2.clone(someJSArray);\n     * ```\n     *\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @returns the created vector\n     */\n    function create(x = 0, y = 0) {\n        const newDst = new Ctor(2);\n        if (x !== undefined) {\n            newDst[0] = x;\n            if (y !== undefined) {\n                newDst[1] = y;\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Creates a Vec2; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Vec2\n     * Also see {@link vec2.create} and {@link vec2.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = x;\n        newDst[1] = y;\n        return newDst;\n    }\n    /**\n     * Applies Math.ceil to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the ceil of each element of v.\n     */\n    function ceil(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.ceil(v[0]);\n        newDst[1] = Math.ceil(v[1]);\n        return newDst;\n    }\n    /**\n     * Applies Math.floor to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the floor of each element of v.\n     */\n    function floor(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.floor(v[0]);\n        newDst[1] = Math.floor(v[1]);\n        return newDst;\n    }\n    /**\n     * Applies Math.round to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the round of each element of v.\n     */\n    function round(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.round(v[0]);\n        newDst[1] = Math.round(v[1]);\n        return newDst;\n    }\n    /**\n     * Clamp each element of vector between min and max\n     * @param v - Operand vector.\n     * @param max - Min value, default 0\n     * @param min - Max value, default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that the clamped value of each element of v.\n     */\n    function clamp(v, min = 0, max = 1, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.min(max, Math.max(min, v[0]));\n        newDst[1] = Math.min(max, Math.max(min, v[1]));\n        return newDst;\n    }\n    /**\n     * Adds two vectors; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] + b[0];\n        newDst[1] = a[1] + b[1];\n        return newDst;\n    }\n    /**\n     * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param scale - Amount to scale b\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a + b * scale.\n     */\n    function addScaled(a, b, scale, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] + b[0] * scale;\n        newDst[1] = a[1] + b[1] * scale;\n        return newDst;\n    }\n    /**\n     * Returns the angle in radians between two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns The angle in radians between the 2 vectors.\n     */\n    function angle(a, b) {\n        const ax = a[0];\n        const ay = a[1];\n        const bx = b[0];\n        const by = b[1];\n        const mag1 = Math.sqrt(ax * ax + ay * ay);\n        const mag2 = Math.sqrt(bx * bx + by * by);\n        const mag = mag1 * mag2;\n        const cosine = mag && dot(a, b) / mag;\n        return Math.acos(cosine);\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] - b[0];\n        newDst[1] = a[1] - b[1];\n        return newDst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Check if 2 vectors are approximately equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON;\n    }\n    /**\n     * Check if 2 vectors are exactly equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1];\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficient.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] + t * (b[0] - a[0]);\n        newDst[1] = a[1] + t * (b[1] - a[1]);\n        return newDst;\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient vector t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficients vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns the linear interpolated result.\n     */\n    function lerpV(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n        newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n        return newDst;\n    }\n    /**\n     * Return max values of two vectors.\n     * Given vectors a and b returns\n     * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The max components vector.\n     */\n    function max(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.max(a[0], b[0]);\n        newDst[1] = Math.max(a[1], b[1]);\n        return newDst;\n    }\n    /**\n     * Return min values of two vectors.\n     * Given vectors a and b returns\n     * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The min components vector.\n     */\n    function min(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = Math.min(a[0], b[0]);\n        newDst[1] = Math.min(a[1], b[1]);\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function mulScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = v[0] * k;\n        newDst[1] = v[1] * k;\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar. (same as mulScalar)\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function divScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = v[0] / k;\n        newDst[1] = v[1] / k;\n        return newDst;\n    }\n    /**\n     * Inverse a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    function inverse(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = 1 / v[0];\n        newDst[1] = 1 / v[1];\n        return newDst;\n    }\n    /**\n     * Invert a vector. (same as inverse)\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    const invert = inverse;\n    /**\n     * Computes the cross product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of a cross b.\n     */\n    function cross(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const z = a[0] * b[1] - a[1] * b[0];\n        newDst[0] = 0;\n        newDst[1] = 0;\n        newDst[2] = z;\n        return newDst;\n    }\n    /**\n     * Computes the dot product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return a[0] * b[0] + a[1] * b[1];\n    }\n    /**\n     * Computes the length of vector\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        return Math.sqrt(v0 * v0 + v1 * v1);\n    }\n    /**\n     * Computes the length of vector (same as length)\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of vector\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        return v0 * v0 + v1 * v1;\n    }\n    /**\n     * Computes the square of the length of vector (same as lengthSq)\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Computes the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    function distance(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n    /**\n     * Computes the distance between 2 points (same as distance)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    const dist = distance;\n    /**\n     * Computes the square of the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    function distanceSq(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        return dx * dx + dy * dy;\n    }\n    /**\n     * Computes the square of the distance between 2 points (same as distanceSq)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    const distSq = distanceSq;\n    /**\n     * Divides a vector by its Euclidean length and returns the quotient.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The normalized vector.\n     */\n    function normalize(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        const v0 = v[0];\n        const v1 = v[1];\n        const len = Math.sqrt(v0 * v0 + v1 * v1);\n        if (len > 0.00001) {\n            newDst[0] = v0 / len;\n            newDst[1] = v1 / len;\n        }\n        else {\n            newDst[0] = 0;\n            newDst[1] = 0;\n        }\n        return newDst;\n    }\n    /**\n     * Negates a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns -v.\n     */\n    function negate(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = -v[0];\n        newDst[1] = -v[1];\n        return newDst;\n    }\n    /**\n     * Copies a vector. (same as {@link vec2.clone})\n     * Also see {@link vec2.create} and {@link vec2.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    function copy(v, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = v[0];\n        newDst[1] = v[1];\n        return newDst;\n    }\n    /**\n     * Clones a vector. (same as {@link vec2.copy})\n     * Also see {@link vec2.create} and {@link vec2.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    const clone = copy;\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] * b[0];\n        newDst[1] = a[1] * b[1];\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as mul)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    function divide(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = a[0] / b[0];\n        newDst[1] = a[1] / b[1];\n        return newDst;\n    }\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as divide)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    const div = divide;\n    /**\n     * Creates a random unit vector * scale\n     * @param scale - Default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The random vector.\n     */\n    function random(scale = 1, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        const angle = Math.random() * 2 * Math.PI;\n        newDst[0] = Math.cos(angle) * scale;\n        newDst[1] = Math.sin(angle) * scale;\n        return newDst;\n    }\n    /**\n     * Zero's a vector\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The zeroed vector.\n     */\n    function zero(dst) {\n        const newDst = (dst ?? new Ctor(2));\n        newDst[0] = 0;\n        newDst[1] = 0;\n        return newDst;\n    }\n    /**\n     * transform Vec2 by 4x4 matrix\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional Vec2 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat4(v, m, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        const x = v[0];\n        const y = v[1];\n        newDst[0] = x * m[0] + y * m[4] + m[12];\n        newDst[1] = x * m[1] + y * m[5] + m[13];\n        return newDst;\n    }\n    /**\n     * Transforms vec4 by 3x3 matrix\n     *\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional Vec2 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat3(v, m, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        const x = v[0];\n        const y = v[1];\n        newDst[0] = m[0] * x + m[4] * y + m[8];\n        newDst[1] = m[1] * x + m[5] * y + m[9];\n        return newDst;\n    }\n    /**\n     * Rotate a 2D vector\n     *\n     * @param a The vec2 point to rotate\n     * @param b The origin of the rotation\n     * @param rad The angle of rotation in radians\n     * @returns the rotated vector\n     */\n    function rotate(a, b, rad, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        // Translate point to the origin\n        const p0 = a[0] - b[0];\n        const p1 = a[1] - b[1];\n        const sinC = Math.sin(rad);\n        const cosC = Math.cos(rad);\n        //perform rotation and translate to correct position\n        newDst[0] = p0 * cosC - p1 * sinC + b[0];\n        newDst[1] = p0 * sinC + p1 * cosC + b[1];\n        return newDst;\n    }\n    /**\n     * Treat a 2D vector as a direction and set it's length\n     *\n     * @param a The vec2 to lengthen\n     * @param len The length of the resulting vector\n     * @returns The lengthened vector\n     */\n    function setLength(a, len, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        normalize(a, newDst);\n        return mulScalar(newDst, len, newDst);\n    }\n    /**\n     * Ensure a vector is not longer than a max length\n     *\n     * @param a The vec2 to limit\n     * @param maxLen The longest length of the resulting vector\n     * @returns The vector, shortened to maxLen if it's too long\n     */\n    function truncate(a, maxLen, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        if (length(a) > maxLen) {\n            return setLength(a, maxLen, newDst);\n        }\n        return copy(a, newDst);\n    }\n    /**\n     * Return the vector exactly between 2 endpoint vectors\n     *\n     * @param a Endpoint 1\n     * @param b Endpoint 2\n     * @returns The vector exactly residing between endpoints 1 and 2\n     */\n    function midpoint(a, b, dst) {\n        const newDst = (dst ?? new Ctor(2));\n        return lerp(a, b, 0.5, newDst);\n    }\n    return {\n        create,\n        fromValues,\n        set,\n        ceil,\n        floor,\n        round,\n        clamp,\n        add,\n        addScaled,\n        angle,\n        subtract,\n        sub,\n        equalsApproximately,\n        equals,\n        lerp,\n        lerpV,\n        max,\n        min,\n        mulScalar,\n        scale,\n        divScalar,\n        inverse,\n        invert,\n        cross,\n        dot,\n        length,\n        len,\n        lengthSq,\n        lenSq,\n        distance,\n        dist,\n        distanceSq,\n        distSq,\n        normalize,\n        negate,\n        copy,\n        clone,\n        multiply,\n        mul,\n        divide,\n        div,\n        random,\n        zero,\n        transformMat4,\n        transformMat3,\n        rotate,\n        setLength,\n        truncate,\n        midpoint,\n    };\n}\nconst cache$5 = new Map();\nfunction getAPI$5(Ctor) {\n    let api = cache$5.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$5(Ctor);\n        cache$5.set(Ctor, api);\n    }\n    return api;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates am typed API for Vec3\n * */\nfunction getAPIImpl$4(Ctor) {\n    /**\n     * Creates a vec3; may be called with x, y, z to set initial values.\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @returns the created vector\n     */\n    function create(x, y, z) {\n        const newDst = new Ctor(3);\n        if (x !== undefined) {\n            newDst[0] = x;\n            if (y !== undefined) {\n                newDst[1] = y;\n                if (z !== undefined) {\n                    newDst[2] = z;\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Creates a vec3; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Vec3\n     * Also see {@link vec3.create} and {@link vec3.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param z third value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, z, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = x;\n        newDst[1] = y;\n        newDst[2] = z;\n        return newDst;\n    }\n    /**\n     * Applies Math.ceil to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the ceil of each element of v.\n     */\n    function ceil(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.ceil(v[0]);\n        newDst[1] = Math.ceil(v[1]);\n        newDst[2] = Math.ceil(v[2]);\n        return newDst;\n    }\n    /**\n     * Applies Math.floor to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the floor of each element of v.\n     */\n    function floor(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.floor(v[0]);\n        newDst[1] = Math.floor(v[1]);\n        newDst[2] = Math.floor(v[2]);\n        return newDst;\n    }\n    /**\n     * Applies Math.round to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the round of each element of v.\n     */\n    function round(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.round(v[0]);\n        newDst[1] = Math.round(v[1]);\n        newDst[2] = Math.round(v[2]);\n        return newDst;\n    }\n    /**\n     * Clamp each element of vector between min and max\n     * @param v - Operand vector.\n     * @param max - Min value, default 0\n     * @param min - Max value, default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that the clamped value of each element of v.\n     */\n    function clamp(v, min = 0, max = 1, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.min(max, Math.max(min, v[0]));\n        newDst[1] = Math.min(max, Math.max(min, v[1]));\n        newDst[2] = Math.min(max, Math.max(min, v[2]));\n        return newDst;\n    }\n    /**\n     * Adds two vectors; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] + b[0];\n        newDst[1] = a[1] + b[1];\n        newDst[2] = a[2] + b[2];\n        return newDst;\n    }\n    /**\n     * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param scale - Amount to scale b\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a + b * scale.\n     */\n    function addScaled(a, b, scale, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] + b[0] * scale;\n        newDst[1] = a[1] + b[1] * scale;\n        newDst[2] = a[2] + b[2] * scale;\n        return newDst;\n    }\n    /**\n     * Returns the angle in radians between two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns The angle in radians between the 2 vectors.\n     */\n    function angle(a, b) {\n        const ax = a[0];\n        const ay = a[1];\n        const az = a[2];\n        const bx = b[0];\n        const by = b[1];\n        const bz = b[2];\n        const mag1 = Math.sqrt(ax * ax + ay * ay + az * az);\n        const mag2 = Math.sqrt(bx * bx + by * by + bz * bz);\n        const mag = mag1 * mag2;\n        const cosine = mag && dot(a, b) / mag;\n        return Math.acos(cosine);\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] - b[0];\n        newDst[1] = a[1] - b[1];\n        newDst[2] = a[2] - b[2];\n        return newDst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Check if 2 vectors are approximately equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON;\n    }\n    /**\n     * Check if 2 vectors are exactly equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficient.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] + t * (b[0] - a[0]);\n        newDst[1] = a[1] + t * (b[1] - a[1]);\n        newDst[2] = a[2] + t * (b[2] - a[2]);\n        return newDst;\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient vector t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficients vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns the linear interpolated result.\n     */\n    function lerpV(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n        newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n        newDst[2] = a[2] + t[2] * (b[2] - a[2]);\n        return newDst;\n    }\n    /**\n     * Return max values of two vectors.\n     * Given vectors a and b returns\n     * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The max components vector.\n     */\n    function max(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.max(a[0], b[0]);\n        newDst[1] = Math.max(a[1], b[1]);\n        newDst[2] = Math.max(a[2], b[2]);\n        return newDst;\n    }\n    /**\n     * Return min values of two vectors.\n     * Given vectors a and b returns\n     * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The min components vector.\n     */\n    function min(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = Math.min(a[0], b[0]);\n        newDst[1] = Math.min(a[1], b[1]);\n        newDst[2] = Math.min(a[2], b[2]);\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function mulScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = v[0] * k;\n        newDst[1] = v[1] * k;\n        newDst[2] = v[2] * k;\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar. (same as mulScalar)\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function divScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = v[0] / k;\n        newDst[1] = v[1] / k;\n        newDst[2] = v[2] / k;\n        return newDst;\n    }\n    /**\n     * Inverse a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    function inverse(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = 1 / v[0];\n        newDst[1] = 1 / v[1];\n        newDst[2] = 1 / v[2];\n        return newDst;\n    }\n    /**\n     * Invert a vector. (same as inverse)\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    const invert = inverse;\n    /**\n     * Computes the cross product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of a cross b.\n     */\n    function cross(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const t1 = a[2] * b[0] - a[0] * b[2];\n        const t2 = a[0] * b[1] - a[1] * b[0];\n        newDst[0] = a[1] * b[2] - a[2] * b[1];\n        newDst[1] = t1;\n        newDst[2] = t2;\n        return newDst;\n    }\n    /**\n     * Computes the dot product of two vectors; assumes both vectors have\n     * three entries.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);\n    }\n    /**\n     * Computes the length of vector\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n    }\n    /**\n     * Computes the length of vector (same as length)\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of vector\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        return v0 * v0 + v1 * v1 + v2 * v2;\n    }\n    /**\n     * Computes the square of the length of vector (same as lengthSq)\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Computes the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    function distance(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n    /**\n     * Computes the distance between 2 points (same as distance)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    const dist = distance;\n    /**\n     * Computes the square of the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    function distanceSq(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        return dx * dx + dy * dy + dz * dz;\n    }\n    /**\n     * Computes the square of the distance between 2 points (same as distanceSq)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    const distSq = distanceSq;\n    /**\n     * Divides a vector by its Euclidean length and returns the quotient.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The normalized vector.\n     */\n    function normalize(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2);\n        if (len > 0.00001) {\n            newDst[0] = v0 / len;\n            newDst[1] = v1 / len;\n            newDst[2] = v2 / len;\n        }\n        else {\n            newDst[0] = 0;\n            newDst[1] = 0;\n            newDst[2] = 0;\n        }\n        return newDst;\n    }\n    /**\n     * Negates a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns -v.\n     */\n    function negate(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = -v[0];\n        newDst[1] = -v[1];\n        newDst[2] = -v[2];\n        return newDst;\n    }\n    /**\n     * Copies a vector. (same as {@link vec3.clone})\n     * Also see {@link vec3.create} and {@link vec3.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    function copy(v, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = v[0];\n        newDst[1] = v[1];\n        newDst[2] = v[2];\n        return newDst;\n    }\n    /**\n     * Clones a vector. (same as {@link vec3.copy})\n     * Also see {@link vec3.create} and {@link vec3.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    const clone = copy;\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] * b[0];\n        newDst[1] = a[1] * b[1];\n        newDst[2] = a[2] * b[2];\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as mul)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    function divide(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = a[0] / b[0];\n        newDst[1] = a[1] / b[1];\n        newDst[2] = a[2] / b[2];\n        return newDst;\n    }\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as divide)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    const div = divide;\n    /**\n     * Creates a random vector\n     * @param scale - Default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The random vector.\n     */\n    function random(scale = 1, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const angle = Math.random() * 2 * Math.PI;\n        const z = Math.random() * 2 - 1;\n        const zScale = Math.sqrt(1 - z * z) * scale;\n        newDst[0] = Math.cos(angle) * zScale;\n        newDst[1] = Math.sin(angle) * zScale;\n        newDst[2] = z * scale;\n        return newDst;\n    }\n    /**\n     * Zero's a vector\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The zeroed vector.\n     */\n    function zero(dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = 0;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        return newDst;\n    }\n    /**\n     * transform vec3 by 4x4 matrix\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat4(v, m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        const w = (m[3] * x + m[7] * y + m[11] * z + m[15]) || 1;\n        newDst[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n        newDst[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n        newDst[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n        return newDst;\n    }\n    /**\n     * Transform vec3 by upper 3x3 matrix inside 4x4 matrix.\n     * @param v - The direction.\n     * @param m - The matrix.\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns The transformed vector.\n     */\n    function transformMat4Upper3x3(v, m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        newDst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n        newDst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n        newDst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n        return newDst;\n    }\n    /**\n     * Transforms vec3 by 3x3 matrix\n     *\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat3(v, m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        newDst[0] = x * m[0] + y * m[4] + z * m[8];\n        newDst[1] = x * m[1] + y * m[5] + z * m[9];\n        newDst[2] = x * m[2] + y * m[6] + z * m[10];\n        return newDst;\n    }\n    /**\n     * Transforms vec3 by Quaternion\n     * @param v - the vector to transform\n     * @param q - the quaternion to transform by\n     * @param dst - optional vec3 to store result. If not passed a new one is created.\n     * @returns the transformed\n     */\n    function transformQuat(v, q, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const w2 = q[3] * 2;\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        const uvX = qy * z - qz * y;\n        const uvY = qz * x - qx * z;\n        const uvZ = qx * y - qy * x;\n        newDst[0] = x + uvX * w2 + (qy * uvZ - qz * uvY) * 2;\n        newDst[1] = y + uvY * w2 + (qz * uvX - qx * uvZ) * 2;\n        newDst[2] = z + uvZ * w2 + (qx * uvY - qy * uvX) * 2;\n        return newDst;\n    }\n    /**\n     * Returns the translation component of a 4-by-4 matrix as a vector with 3\n     * entries.\n     * @param m - The matrix.\n     * @param dst - vector to hold result. If not passed a new one is created.\n     * @returns The translation component of m.\n     */\n    function getTranslation(m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        newDst[0] = m[12];\n        newDst[1] = m[13];\n        newDst[2] = m[14];\n        return newDst;\n    }\n    /**\n     * Returns an axis of a 4x4 matrix as a vector with 3 entries\n     * @param m - The matrix.\n     * @param axis - The axis 0 = x, 1 = y, 2 = z;\n     * @returns The axis component of m.\n     */\n    function getAxis(m, axis, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const off = axis * 4;\n        newDst[0] = m[off + 0];\n        newDst[1] = m[off + 1];\n        newDst[2] = m[off + 2];\n        return newDst;\n    }\n    /**\n     * Returns the scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function getScaling(m, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const xx = m[0];\n        const xy = m[1];\n        const xz = m[2];\n        const yx = m[4];\n        const yy = m[5];\n        const yz = m[6];\n        const zx = m[8];\n        const zy = m[9];\n        const zz = m[10];\n        newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n        newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n        newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n        return newDst;\n    }\n    /**\n     * Rotate a 3D vector around the x-axis\n     *\n     * @param {ReadonlyVec3} a The vec3 point to rotate\n     * @param {ReadonlyVec3} b The origin of the rotation\n     * @param {Number} rad The angle of rotation in radians\n     * @param dst - The vector to set. If not passed a new one is created.\n     * @returns the rotated vector\n     */\n    function rotateX(a, b, rad, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const p = [];\n        const r = [];\n        //Translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n        //perform rotation\n        r[0] = p[0];\n        r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n        r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);\n        //translate to correct position\n        newDst[0] = r[0] + b[0];\n        newDst[1] = r[1] + b[1];\n        newDst[2] = r[2] + b[2];\n        return newDst;\n    }\n    /**\n     * Rotate a 3D vector around the y-axis\n     *\n     * @param {ReadonlyVec3} a The vec3 point to rotate\n     * @param {ReadonlyVec3} b The origin of the rotation\n     * @param {Number} rad The angle of rotation in radians\n     * @param dst - The vector to set. If not passed a new one is created.\n     * @returns the rotated vector\n     */\n    function rotateY(a, b, rad, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const p = [];\n        const r = [];\n        // translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n        // perform rotation\n        r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n        r[1] = p[1];\n        r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);\n        // translate to correct position\n        newDst[0] = r[0] + b[0];\n        newDst[1] = r[1] + b[1];\n        newDst[2] = r[2] + b[2];\n        return newDst;\n    }\n    /**\n     * Rotate a 3D vector around the z-axis\n     *\n     * @param {ReadonlyVec3} a The vec3 point to rotate\n     * @param {ReadonlyVec3} b The origin of the rotation\n     * @param {Number} rad The angle of rotation in radians\n     * @param dst - The vector to set. If not passed a new one is created.\n     * @returns {vec3} out\n     */\n    function rotateZ(a, b, rad, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        const p = [];\n        const r = [];\n        // translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n        // perform rotation\n        r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n        r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n        r[2] = p[2];\n        // translate to correct position\n        newDst[0] = r[0] + b[0];\n        newDst[1] = r[1] + b[1];\n        newDst[2] = r[2] + b[2];\n        return newDst;\n    }\n    /**\n     * Treat a 3D vector as a direction and set it's length\n     *\n     * @param a The vec3 to lengthen\n     * @param len The length of the resulting vector\n     * @returns The lengthened vector\n     */\n    function setLength(a, len, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        normalize(a, newDst);\n        return mulScalar(newDst, len, newDst);\n    }\n    /**\n     * Ensure a vector is not longer than a max length\n     *\n     * @param a The vec3 to limit\n     * @param maxLen The longest length of the resulting vector\n     * @returns The vector, shortened to maxLen if it's too long\n     */\n    function truncate(a, maxLen, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        if (length(a) > maxLen) {\n            return setLength(a, maxLen, newDst);\n        }\n        return copy(a, newDst);\n    }\n    /**\n     * Return the vector exactly between 2 endpoint vectors\n     *\n     * @param a Endpoint 1\n     * @param b Endpoint 2\n     * @returns The vector exactly residing between endpoints 1 and 2\n     */\n    function midpoint(a, b, dst) {\n        const newDst = (dst ?? new Ctor(3));\n        return lerp(a, b, 0.5, newDst);\n    }\n    return {\n        create,\n        fromValues,\n        set,\n        ceil,\n        floor,\n        round,\n        clamp,\n        add,\n        addScaled,\n        angle,\n        subtract,\n        sub,\n        equalsApproximately,\n        equals,\n        lerp,\n        lerpV,\n        max,\n        min,\n        mulScalar,\n        scale,\n        divScalar,\n        inverse,\n        invert,\n        cross,\n        dot,\n        length,\n        len,\n        lengthSq,\n        lenSq,\n        distance,\n        dist,\n        distanceSq,\n        distSq,\n        normalize,\n        negate,\n        copy,\n        clone,\n        multiply,\n        mul,\n        divide,\n        div,\n        random,\n        zero,\n        transformMat4,\n        transformMat4Upper3x3,\n        transformMat3,\n        transformQuat,\n        getTranslation,\n        getAxis,\n        getScaling,\n        rotateX,\n        rotateY,\n        rotateZ,\n        setLength,\n        truncate,\n        midpoint,\n    };\n}\nconst cache$4 = new Map();\nfunction getAPI$4(Ctor) {\n    let api = cache$4.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$4(Ctor);\n        cache$4.set(Ctor, api);\n    }\n    return api;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates a typed API for Mat3\n * */\nfunction getAPIImpl$3(Ctor) {\n    const vec2 = getAPI$5(Ctor);\n    const vec3 = getAPI$4(Ctor);\n    /**\n     * Create a Mat3 from values\n     *\n     * Note: Since passing in a raw JavaScript array\n     * is valid in all circumstances, if you want to\n     * force a JavaScript array into a Mat3's specified type\n     * it would be faster to use\n     *\n     * ```\n     * const m = mat3.clone(someJSArray);\n     * ```\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @returns matrix created from values.\n     */\n    function create(v0, v1, v2, v3, v4, v5, v6, v7, v8) {\n        const newDst = new Ctor(12);\n        // to make the array homogenous\n        newDst[3] = 0;\n        newDst[7] = 0;\n        newDst[11] = 0;\n        if (v0 !== undefined) {\n            newDst[0] = v0;\n            if (v1 !== undefined) {\n                newDst[1] = v1;\n                if (v2 !== undefined) {\n                    newDst[2] = v2;\n                    if (v3 !== undefined) {\n                        newDst[4] = v3;\n                        if (v4 !== undefined) {\n                            newDst[5] = v4;\n                            if (v5 !== undefined) {\n                                newDst[6] = v5;\n                                if (v6 !== undefined) {\n                                    newDst[8] = v6;\n                                    if (v7 !== undefined) {\n                                        newDst[9] = v7;\n                                        if (v8 !== undefined) {\n                                            newDst[10] = v8;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Sets the values of a Mat3\n     * Also see {@link mat3.create} and {@link mat3.copy}\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat3 set from values.\n     */\n    function set(v0, v1, v2, v3, v4, v5, v6, v7, v8, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = v0;\n        newDst[1] = v1;\n        newDst[2] = v2;\n        newDst[3] = 0;\n        newDst[4] = v3;\n        newDst[5] = v4;\n        newDst[6] = v5;\n        newDst[7] = 0;\n        newDst[8] = v6;\n        newDst[9] = v7;\n        newDst[10] = v8;\n        newDst[11] = 0;\n        return newDst;\n    }\n    /**\n     * Creates a Mat3 from the upper left 3x3 part of a Mat4\n     * @param m4 - source matrix\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat3 made from m4\n     */\n    function fromMat4(m4, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = m4[0];\n        newDst[1] = m4[1];\n        newDst[2] = m4[2];\n        newDst[3] = 0;\n        newDst[4] = m4[4];\n        newDst[5] = m4[5];\n        newDst[6] = m4[6];\n        newDst[7] = 0;\n        newDst[8] = m4[8];\n        newDst[9] = m4[9];\n        newDst[10] = m4[10];\n        newDst[11] = 0;\n        return newDst;\n    }\n    /**\n     * Creates a Mat3 rotation matrix from a quaternion\n     * @param q - quaternion to create matrix from\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat3 made from q\n     */\n    function fromQuat(q, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const x = q[0];\n        const y = q[1];\n        const z = q[2];\n        const w = q[3];\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const yx = y * x2;\n        const yy = y * y2;\n        const zx = z * x2;\n        const zy = z * y2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n        newDst[0] = 1 - yy - zz;\n        newDst[1] = yx + wz;\n        newDst[2] = zx - wy;\n        newDst[3] = 0;\n        newDst[4] = yx - wz;\n        newDst[5] = 1 - xx - zz;\n        newDst[6] = zy + wx;\n        newDst[7] = 0;\n        newDst[8] = zx + wy;\n        newDst[9] = zy - wx;\n        newDst[10] = 1 - xx - yy;\n        newDst[11] = 0;\n        return newDst;\n    }\n    /**\n     * Negates a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns -m.\n     */\n    function negate(m, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = -m[0];\n        newDst[1] = -m[1];\n        newDst[2] = -m[2];\n        newDst[4] = -m[4];\n        newDst[5] = -m[5];\n        newDst[6] = -m[6];\n        newDst[8] = -m[8];\n        newDst[9] = -m[9];\n        newDst[10] = -m[10];\n        return newDst;\n    }\n    /**\n     * Copies a matrix. (same as {@link mat3.clone})\n     * Also see {@link mat3.create} and {@link mat3.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    function copy(m, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = m[0];\n        newDst[1] = m[1];\n        newDst[2] = m[2];\n        newDst[4] = m[4];\n        newDst[5] = m[5];\n        newDst[6] = m[6];\n        newDst[8] = m[8];\n        newDst[9] = m[9];\n        newDst[10] = m[10];\n        return newDst;\n    }\n    /**\n     * Copies a matrix (same as {@link mat3.copy})\n     * Also see {@link mat3.create} and {@link mat3.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    const clone = copy;\n    /**\n     * Check if 2 matrices are approximately equal\n     * @param a Operand matrix.\n     * @param b Operand matrix.\n     * @returns true if matrices are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[4] - b[4]) < EPSILON &&\n            Math.abs(a[5] - b[5]) < EPSILON &&\n            Math.abs(a[6] - b[6]) < EPSILON &&\n            Math.abs(a[8] - b[8]) < EPSILON &&\n            Math.abs(a[9] - b[9]) < EPSILON &&\n            Math.abs(a[10] - b[10]) < EPSILON;\n    }\n    /**\n     * Check if 2 matrices are exactly equal\n     * @param a Operand matrix.\n     * @param b Operand matrix.\n     * @returns true if matrices are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] &&\n            a[1] === b[1] &&\n            a[2] === b[2] &&\n            a[4] === b[4] &&\n            a[5] === b[5] &&\n            a[6] === b[6] &&\n            a[8] === b[8] &&\n            a[9] === b[9] &&\n            a[10] === b[10];\n    }\n    /**\n     * Creates a 3-by-3 identity matrix.\n     *\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A 3-by-3 identity matrix.\n     */\n    function identity(dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Takes the transpose of a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The transpose of m.\n     */\n    function transpose(m, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        if (newDst === m) {\n            let t;\n            // 0 1 2\n            // 4 5 6\n            // 8 9 10\n            t = m[1];\n            m[1] = m[4];\n            m[4] = t;\n            t = m[2];\n            m[2] = m[8];\n            m[8] = t;\n            t = m[6];\n            m[6] = m[9];\n            m[9] = t;\n            return newDst;\n        }\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        newDst[0] = m00;\n        newDst[1] = m10;\n        newDst[2] = m20;\n        newDst[4] = m01;\n        newDst[5] = m11;\n        newDst[6] = m21;\n        newDst[8] = m02;\n        newDst[9] = m12;\n        newDst[10] = m22;\n        return newDst;\n    }\n    /**\n     * Computes the inverse of a 3-by-3 matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    function inverse(m, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const b01 = m22 * m11 - m12 * m21;\n        const b11 = -m22 * m10 + m12 * m20;\n        const b21 = m21 * m10 - m11 * m20;\n        const invDet = 1 / (m00 * b01 + m01 * b11 + m02 * b21);\n        newDst[0] = b01 * invDet;\n        newDst[1] = (-m22 * m01 + m02 * m21) * invDet;\n        newDst[2] = (m12 * m01 - m02 * m11) * invDet;\n        newDst[4] = b11 * invDet;\n        newDst[5] = (m22 * m00 - m02 * m20) * invDet;\n        newDst[6] = (-m12 * m00 + m02 * m10) * invDet;\n        newDst[8] = b21 * invDet;\n        newDst[9] = (-m21 * m00 + m01 * m20) * invDet;\n        newDst[10] = (m11 * m00 - m01 * m10) * invDet;\n        return newDst;\n    }\n    /**\n     * Compute the determinant of a matrix\n     * @param m - the matrix\n     * @returns the determinant\n     */\n    function determinant(m) {\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        return m00 * (m11 * m22 - m21 * m12) -\n            m10 * (m01 * m22 - m21 * m02) +\n            m20 * (m01 * m12 - m11 * m02);\n    }\n    /**\n     * Computes the inverse of a 3-by-3 matrix. (same as inverse)\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    const invert = inverse;\n    /**\n     * Multiplies two 3-by-3 matrices with a on the left and b on the right\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const a00 = a[0];\n        const a01 = a[1];\n        const a02 = a[2];\n        const a10 = a[4 + 0];\n        const a11 = a[4 + 1];\n        const a12 = a[4 + 2];\n        const a20 = a[8 + 0];\n        const a21 = a[8 + 1];\n        const a22 = a[8 + 2];\n        const b00 = b[0];\n        const b01 = b[1];\n        const b02 = b[2];\n        const b10 = b[4 + 0];\n        const b11 = b[4 + 1];\n        const b12 = b[4 + 2];\n        const b20 = b[8 + 0];\n        const b21 = b[8 + 1];\n        const b22 = b[8 + 2];\n        newDst[0] = a00 * b00 + a10 * b01 + a20 * b02;\n        newDst[1] = a01 * b00 + a11 * b01 + a21 * b02;\n        newDst[2] = a02 * b00 + a12 * b01 + a22 * b02;\n        newDst[4] = a00 * b10 + a10 * b11 + a20 * b12;\n        newDst[5] = a01 * b10 + a11 * b11 + a21 * b12;\n        newDst[6] = a02 * b10 + a12 * b11 + a22 * b12;\n        newDst[8] = a00 * b20 + a10 * b21 + a20 * b22;\n        newDst[9] = a01 * b20 + a11 * b21 + a21 * b22;\n        newDst[10] = a02 * b20 + a12 * b21 + a22 * b22;\n        return newDst;\n    }\n    /**\n     * Multiplies two 3-by-3 matrices with a on the left and b on the right (same as multiply)\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Sets the translation component of a 3-by-3 matrix to the given\n     * vector.\n     * @param a - The matrix.\n     * @param v - The vector.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix with translation set.\n     */\n    function setTranslation(a, v, dst) {\n        const newDst = (dst ?? identity());\n        if (a !== newDst) {\n            newDst[0] = a[0];\n            newDst[1] = a[1];\n            newDst[2] = a[2];\n            newDst[4] = a[4];\n            newDst[5] = a[5];\n            newDst[6] = a[6];\n        }\n        newDst[8] = v[0];\n        newDst[9] = v[1];\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Returns the translation component of a 3-by-3 matrix as a vector with 3\n     * entries.\n     * @param m - The matrix.\n     * @param dst - vector to hold result. If not passed a new one is created.\n     * @returns The translation component of m.\n     */\n    function getTranslation(m, dst) {\n        const newDst = (dst ?? vec2.create());\n        newDst[0] = m[8];\n        newDst[1] = m[9];\n        return newDst;\n    }\n    /**\n     * Returns an axis of a 3x3 matrix as a vector with 2 entries\n     * @param m - The matrix.\n     * @param axis - The axis 0 = x, 1 = y,\n     * @returns The axis component of m.\n     */\n    function getAxis(m, axis, dst) {\n        const newDst = (dst ?? vec2.create());\n        const off = axis * 4;\n        newDst[0] = m[off + 0];\n        newDst[1] = m[off + 1];\n        return newDst;\n    }\n    /**\n     * Sets an axis of a 3x3 matrix as a vector with 2 entries\n     * @param m - The matrix.\n     * @param v - the axis vector\n     * @param axis - The axis  0 = x, 1 = y;\n     * @param dst - The matrix to set. If not passed a new one is created.\n     * @returns The matrix with axis set.\n     */\n    function setAxis(m, v, axis, dst) {\n        const newDst = (dst === m ? m : copy(m, dst));\n        const off = axis * 4;\n        newDst[off + 0] = v[0];\n        newDst[off + 1] = v[1];\n        return newDst;\n    }\n    /**\n     * Returns the \"2d\" scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function getScaling(m, dst) {\n        const newDst = (dst ?? vec2.create());\n        const xx = m[0];\n        const xy = m[1];\n        const yx = m[4];\n        const yy = m[5];\n        newDst[0] = Math.sqrt(xx * xx + xy * xy);\n        newDst[1] = Math.sqrt(yx * yx + yy * yy);\n        return newDst;\n    }\n    /**\n     * Returns the \"3d\" scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function get3DScaling(m, dst) {\n        const newDst = (dst ?? vec3.create());\n        const xx = m[0];\n        const xy = m[1];\n        const xz = m[2];\n        const yx = m[4];\n        const yy = m[5];\n        const yz = m[6];\n        const zx = m[8];\n        const zy = m[9];\n        const zz = m[10];\n        newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n        newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n        newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which translates by the given vector v.\n     * @param v - The vector by which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translation matrix.\n     */\n    function translation(v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[8] = v[0];\n        newDst[9] = v[1];\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Translates the given 3-by-3 matrix by the given vector v.\n     * @param m - The matrix.\n     * @param v - The vector by which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translated matrix.\n     */\n    function translate(m, v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const v0 = v[0];\n        const v1 = v[1];\n        const m00 = m[0];\n        const m01 = m[1];\n        const m02 = m[2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        if (m !== newDst) {\n            newDst[0] = m00;\n            newDst[1] = m01;\n            newDst[2] = m02;\n            newDst[4] = m10;\n            newDst[5] = m11;\n            newDst[6] = m12;\n        }\n        newDst[8] = m00 * v0 + m10 * v1 + m20;\n        newDst[9] = m01 * v0 + m11 * v1 + m21;\n        newDst[10] = m02 * v0 + m12 * v1 + m22;\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which rotates  by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotation(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c;\n        newDst[1] = s;\n        newDst[2] = 0;\n        newDst[4] = -s;\n        newDst[5] = c;\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Rotates the given 3-by-3 matrix  by the given angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotate(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c * m00 + s * m10;\n        newDst[1] = c * m01 + s * m11;\n        newDst[2] = c * m02 + s * m12;\n        newDst[4] = c * m10 - s * m00;\n        newDst[5] = c * m11 - s * m01;\n        newDst[6] = c * m12 - s * m02;\n        if (m !== newDst) {\n            newDst[8] = m[8];\n            newDst[9] = m[9];\n            newDst[10] = m[10];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which rotates around the x-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationX(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = c;\n        newDst[6] = s;\n        newDst[8] = 0;\n        newDst[9] = -s;\n        newDst[10] = c;\n        return newDst;\n    }\n    /**\n     * Rotates the given 3-by-3 matrix around the x-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateX(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const m10 = m[4];\n        const m11 = m[5];\n        const m12 = m[6];\n        const m20 = m[8];\n        const m21 = m[9];\n        const m22 = m[10];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[4] = c * m10 + s * m20;\n        newDst[5] = c * m11 + s * m21;\n        newDst[6] = c * m12 + s * m22;\n        newDst[8] = c * m20 - s * m10;\n        newDst[9] = c * m21 - s * m11;\n        newDst[10] = c * m22 - s * m12;\n        if (m !== newDst) {\n            newDst[0] = m[0];\n            newDst[1] = m[1];\n            newDst[2] = m[2];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which rotates around the y-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationY(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c;\n        newDst[1] = 0;\n        newDst[2] = -s;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[8] = s;\n        newDst[9] = 0;\n        newDst[10] = c;\n        return newDst;\n    }\n    /**\n     * Rotates the given 3-by-3 matrix around the y-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateY(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c * m00 - s * m20;\n        newDst[1] = c * m01 - s * m21;\n        newDst[2] = c * m02 - s * m22;\n        newDst[8] = c * m20 + s * m00;\n        newDst[9] = c * m21 + s * m01;\n        newDst[10] = c * m22 + s * m02;\n        if (m !== newDst) {\n            newDst[4] = m[4];\n            newDst[5] = m[5];\n            newDst[6] = m[6];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which rotates around the z-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    const rotationZ = rotation;\n    /**\n     * Rotates the given 3-by-3 matrix around the z-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    const rotateZ = rotate;\n    /**\n     * Creates a 3-by-3 matrix which scales in each dimension by an amount given by\n     * the corresponding entry in the given vector; assumes the vector has two\n     * entries.\n     * @param v - A vector of\n     *     2 entries specifying the factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function scaling(v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = v[0];\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = v[1];\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Scales the given 3-by-3 matrix in each dimension by an amount\n     * given by the corresponding entry in the given vector; assumes the vector has\n     * two entries.\n     * @param m - The matrix to be modified.\n     * @param v - A vector of 2 entries specifying the\n     *     factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function scale(m, v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const v0 = v[0];\n        const v1 = v[1];\n        newDst[0] = v0 * m[0 * 4 + 0];\n        newDst[1] = v0 * m[0 * 4 + 1];\n        newDst[2] = v0 * m[0 * 4 + 2];\n        newDst[4] = v1 * m[1 * 4 + 0];\n        newDst[5] = v1 * m[1 * 4 + 1];\n        newDst[6] = v1 * m[1 * 4 + 2];\n        if (m !== newDst) {\n            newDst[8] = m[8];\n            newDst[9] = m[9];\n            newDst[10] = m[10];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which scales in each dimension by an amount given by\n     * the corresponding entry in the given vector; assumes the vector has three\n     * entries.\n     * @param v - A vector of\n     *     3 entries specifying the factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function scaling3D(v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = v[0];\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = v[1];\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = v[2];\n        return newDst;\n    }\n    /**\n     * Scales the given 3-by-3 matrix in each dimension by an amount\n     * given by the corresponding entry in the given vector; assumes the vector has\n     * three entries.\n     * @param m - The matrix to be modified.\n     * @param v - A vector of 3 entries specifying the\n     *     factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function scale3D(m, v, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        newDst[0] = v0 * m[0 * 4 + 0];\n        newDst[1] = v0 * m[0 * 4 + 1];\n        newDst[2] = v0 * m[0 * 4 + 2];\n        newDst[4] = v1 * m[1 * 4 + 0];\n        newDst[5] = v1 * m[1 * 4 + 1];\n        newDst[6] = v1 * m[1 * 4 + 2];\n        newDst[8] = v2 * m[2 * 4 + 0];\n        newDst[9] = v2 * m[2 * 4 + 1];\n        newDst[10] = v2 * m[2 * 4 + 2];\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which scales uniformly in the X and Y dimensions\n     * @param s - Amount to scale\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function uniformScaling(s, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = s;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = s;\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        return newDst;\n    }\n    /**\n     * Scales the given 3-by-3 matrix in the X and Y dimension by an amount\n     * given.\n     * @param m - The matrix to be modified.\n     * @param s - Amount to scale.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function uniformScale(m, s, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = s * m[0 * 4 + 0];\n        newDst[1] = s * m[0 * 4 + 1];\n        newDst[2] = s * m[0 * 4 + 2];\n        newDst[4] = s * m[1 * 4 + 0];\n        newDst[5] = s * m[1 * 4 + 1];\n        newDst[6] = s * m[1 * 4 + 2];\n        if (m !== newDst) {\n            newDst[8] = m[8];\n            newDst[9] = m[9];\n            newDst[10] = m[10];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 3-by-3 matrix which scales uniformly in each dimension\n     * @param s - Amount to scale\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function uniformScaling3D(s, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = s;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[4] = 0;\n        newDst[5] = s;\n        newDst[6] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = s;\n        return newDst;\n    }\n    /**\n     * Scales the given 3-by-3 matrix in each dimension by an amount\n     * given.\n     * @param m - The matrix to be modified.\n     * @param s - Amount to scale.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function uniformScale3D(m, s, dst) {\n        const newDst = (dst ?? new Ctor(12));\n        newDst[0] = s * m[0 * 4 + 0];\n        newDst[1] = s * m[0 * 4 + 1];\n        newDst[2] = s * m[0 * 4 + 2];\n        newDst[4] = s * m[1 * 4 + 0];\n        newDst[5] = s * m[1 * 4 + 1];\n        newDst[6] = s * m[1 * 4 + 2];\n        newDst[8] = s * m[2 * 4 + 0];\n        newDst[9] = s * m[2 * 4 + 1];\n        newDst[10] = s * m[2 * 4 + 2];\n        return newDst;\n    }\n    return {\n        clone,\n        create,\n        set,\n        fromMat4,\n        fromQuat,\n        negate,\n        copy,\n        equalsApproximately,\n        equals,\n        identity,\n        transpose,\n        inverse,\n        invert,\n        determinant,\n        mul,\n        multiply,\n        setTranslation,\n        getTranslation,\n        getAxis,\n        setAxis,\n        getScaling,\n        get3DScaling,\n        translation,\n        translate,\n        rotation,\n        rotate,\n        rotationX,\n        rotateX,\n        rotationY,\n        rotateY,\n        rotationZ,\n        rotateZ,\n        scaling,\n        scale,\n        uniformScaling,\n        uniformScale,\n        scaling3D,\n        scale3D,\n        uniformScaling3D,\n        uniformScale3D,\n    };\n}\nconst cache$3 = new Map();\nfunction getAPI$3(Ctor) {\n    let api = cache$3.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$3(Ctor);\n        cache$3.set(Ctor, api);\n    }\n    return api;\n}\n\n/**\n * Generates a typed API for Mat4\n * */\nfunction getAPIImpl$2(Ctor) {\n    const vec3 = getAPI$4(Ctor);\n    /**\n     * 4x4 Matrix math math functions.\n     *\n     * Almost all functions take an optional `newDst` argument. If it is not passed in the\n     * functions will create a new matrix. In other words you can do this\n     *\n     *     const mat = mat4.translation([1, 2, 3]);  // Creates a new translation matrix\n     *\n     * or\n     *\n     *     const mat = mat4.create();\n     *     mat4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n     *\n     * The first style is often easier but depending on where it's used it generates garbage where\n     * as there is almost never allocation with the second style.\n     *\n     * It is always save to pass any matrix as the destination. So for example\n     *\n     *     const mat = mat4.identity();\n     *     const trans = mat4.translation([1, 2, 3]);\n     *     mat4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n     *\n     */\n    /**\n     * Create a Mat4 from values\n     *\n     * Note: Since passing in a raw JavaScript array\n     * is valid in all circumstances, if you want to\n     * force a JavaScript array into a Mat4's specified type\n     * it would be faster to use\n     *\n     * ```\n     * const m = mat4.clone(someJSArray);\n     * ```\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @param v9 - value for element 9\n     * @param v10 - value for element 10\n     * @param v11 - value for element 11\n     * @param v12 - value for element 12\n     * @param v13 - value for element 13\n     * @param v14 - value for element 14\n     * @param v15 - value for element 15\n     * @returns created from values.\n     */\n    function create(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {\n        const newDst = new Ctor(16);\n        if (v0 !== undefined) {\n            newDst[0] = v0;\n            if (v1 !== undefined) {\n                newDst[1] = v1;\n                if (v2 !== undefined) {\n                    newDst[2] = v2;\n                    if (v3 !== undefined) {\n                        newDst[3] = v3;\n                        if (v4 !== undefined) {\n                            newDst[4] = v4;\n                            if (v5 !== undefined) {\n                                newDst[5] = v5;\n                                if (v6 !== undefined) {\n                                    newDst[6] = v6;\n                                    if (v7 !== undefined) {\n                                        newDst[7] = v7;\n                                        if (v8 !== undefined) {\n                                            newDst[8] = v8;\n                                            if (v9 !== undefined) {\n                                                newDst[9] = v9;\n                                                if (v10 !== undefined) {\n                                                    newDst[10] = v10;\n                                                    if (v11 !== undefined) {\n                                                        newDst[11] = v11;\n                                                        if (v12 !== undefined) {\n                                                            newDst[12] = v12;\n                                                            if (v13 !== undefined) {\n                                                                newDst[13] = v13;\n                                                                if (v14 !== undefined) {\n                                                                    newDst[14] = v14;\n                                                                    if (v15 !== undefined) {\n                                                                        newDst[15] = v15;\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Sets the values of a Mat4\n     * Also see {@link mat4.create} and {@link mat4.copy}\n     *\n     * @param v0 - value for element 0\n     * @param v1 - value for element 1\n     * @param v2 - value for element 2\n     * @param v3 - value for element 3\n     * @param v4 - value for element 4\n     * @param v5 - value for element 5\n     * @param v6 - value for element 6\n     * @param v7 - value for element 7\n     * @param v8 - value for element 8\n     * @param v9 - value for element 9\n     * @param v10 - value for element 10\n     * @param v11 - value for element 11\n     * @param v12 - value for element 12\n     * @param v13 - value for element 13\n     * @param v14 - value for element 14\n     * @param v15 - value for element 15\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat4 created from values.\n     */\n    function set(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = v0;\n        newDst[1] = v1;\n        newDst[2] = v2;\n        newDst[3] = v3;\n        newDst[4] = v4;\n        newDst[5] = v5;\n        newDst[6] = v6;\n        newDst[7] = v7;\n        newDst[8] = v8;\n        newDst[9] = v9;\n        newDst[10] = v10;\n        newDst[11] = v11;\n        newDst[12] = v12;\n        newDst[13] = v13;\n        newDst[14] = v14;\n        newDst[15] = v15;\n        return newDst;\n    }\n    /**\n     * Creates a Mat4 from a Mat3\n     * @param m3 - source matrix\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat4 made from m3\n     */\n    function fromMat3(m3, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = m3[0];\n        newDst[1] = m3[1];\n        newDst[2] = m3[2];\n        newDst[3] = 0;\n        newDst[4] = m3[4];\n        newDst[5] = m3[5];\n        newDst[6] = m3[6];\n        newDst[7] = 0;\n        newDst[8] = m3[8];\n        newDst[9] = m3[9];\n        newDst[10] = m3[10];\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Creates a Mat4 rotation matrix from a quaternion\n     * @param q - quaternion to create matrix from\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns Mat4 made from q\n     */\n    function fromQuat(q, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const x = q[0];\n        const y = q[1];\n        const z = q[2];\n        const w = q[3];\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const yx = y * x2;\n        const yy = y * y2;\n        const zx = z * x2;\n        const zy = z * y2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n        newDst[0] = 1 - yy - zz;\n        newDst[1] = yx + wz;\n        newDst[2] = zx - wy;\n        newDst[3] = 0;\n        newDst[4] = yx - wz;\n        newDst[5] = 1 - xx - zz;\n        newDst[6] = zy + wx;\n        newDst[7] = 0;\n        newDst[8] = zx + wy;\n        newDst[9] = zy - wx;\n        newDst[10] = 1 - xx - yy;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Negates a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns -m.\n     */\n    function negate(m, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = -m[0];\n        newDst[1] = -m[1];\n        newDst[2] = -m[2];\n        newDst[3] = -m[3];\n        newDst[4] = -m[4];\n        newDst[5] = -m[5];\n        newDst[6] = -m[6];\n        newDst[7] = -m[7];\n        newDst[8] = -m[8];\n        newDst[9] = -m[9];\n        newDst[10] = -m[10];\n        newDst[11] = -m[11];\n        newDst[12] = -m[12];\n        newDst[13] = -m[13];\n        newDst[14] = -m[14];\n        newDst[15] = -m[15];\n        return newDst;\n    }\n    /**\n     * Copies a matrix. (same as {@link mat4.clone})\n     * Also see {@link mat4.create} and {@link mat4.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    function copy(m, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = m[0];\n        newDst[1] = m[1];\n        newDst[2] = m[2];\n        newDst[3] = m[3];\n        newDst[4] = m[4];\n        newDst[5] = m[5];\n        newDst[6] = m[6];\n        newDst[7] = m[7];\n        newDst[8] = m[8];\n        newDst[9] = m[9];\n        newDst[10] = m[10];\n        newDst[11] = m[11];\n        newDst[12] = m[12];\n        newDst[13] = m[13];\n        newDst[14] = m[14];\n        newDst[15] = m[15];\n        return newDst;\n    }\n    /**\n     * Copies a matrix (same as {@link mat4.copy})\n     * Also see {@link mat4.create} and {@link mat4.set}\n     * @param m - The matrix.\n     * @param dst - The matrix. If not passed a new one is created.\n     * @returns A copy of m.\n     */\n    const clone = copy;\n    /**\n     * Check if 2 matrices are approximately equal\n     * @param a - Operand matrix.\n     * @param b - Operand matrix.\n     * @returns true if matrices are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[3] - b[3]) < EPSILON &&\n            Math.abs(a[4] - b[4]) < EPSILON &&\n            Math.abs(a[5] - b[5]) < EPSILON &&\n            Math.abs(a[6] - b[6]) < EPSILON &&\n            Math.abs(a[7] - b[7]) < EPSILON &&\n            Math.abs(a[8] - b[8]) < EPSILON &&\n            Math.abs(a[9] - b[9]) < EPSILON &&\n            Math.abs(a[10] - b[10]) < EPSILON &&\n            Math.abs(a[11] - b[11]) < EPSILON &&\n            Math.abs(a[12] - b[12]) < EPSILON &&\n            Math.abs(a[13] - b[13]) < EPSILON &&\n            Math.abs(a[14] - b[14]) < EPSILON &&\n            Math.abs(a[15] - b[15]) < EPSILON;\n    }\n    /**\n     * Check if 2 matrices are exactly equal\n     * @param a - Operand matrix.\n     * @param b - Operand matrix.\n     * @returns true if matrices are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] &&\n            a[1] === b[1] &&\n            a[2] === b[2] &&\n            a[3] === b[3] &&\n            a[4] === b[4] &&\n            a[5] === b[5] &&\n            a[6] === b[6] &&\n            a[7] === b[7] &&\n            a[8] === b[8] &&\n            a[9] === b[9] &&\n            a[10] === b[10] &&\n            a[11] === b[11] &&\n            a[12] === b[12] &&\n            a[13] === b[13] &&\n            a[14] === b[14] &&\n            a[15] === b[15];\n    }\n    /**\n     * Creates a 4-by-4 identity matrix.\n     *\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A 4-by-4 identity matrix.\n     */\n    function identity(dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Takes the transpose of a matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The transpose of m.\n     */\n    function transpose(m, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        if (newDst === m) {\n            let t;\n            t = m[1];\n            m[1] = m[4];\n            m[4] = t;\n            t = m[2];\n            m[2] = m[8];\n            m[8] = t;\n            t = m[3];\n            m[3] = m[12];\n            m[12] = t;\n            t = m[6];\n            m[6] = m[9];\n            m[9] = t;\n            t = m[7];\n            m[7] = m[13];\n            m[13] = t;\n            t = m[11];\n            m[11] = m[14];\n            m[14] = t;\n            return newDst;\n        }\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        newDst[0] = m00;\n        newDst[1] = m10;\n        newDst[2] = m20;\n        newDst[3] = m30;\n        newDst[4] = m01;\n        newDst[5] = m11;\n        newDst[6] = m21;\n        newDst[7] = m31;\n        newDst[8] = m02;\n        newDst[9] = m12;\n        newDst[10] = m22;\n        newDst[11] = m32;\n        newDst[12] = m03;\n        newDst[13] = m13;\n        newDst[14] = m23;\n        newDst[15] = m33;\n        return newDst;\n    }\n    /**\n     * Computes the inverse of a 4-by-4 matrix.\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    function inverse(m, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        const tmp0 = m22 * m33;\n        const tmp1 = m32 * m23;\n        const tmp2 = m12 * m33;\n        const tmp3 = m32 * m13;\n        const tmp4 = m12 * m23;\n        const tmp5 = m22 * m13;\n        const tmp6 = m02 * m33;\n        const tmp7 = m32 * m03;\n        const tmp8 = m02 * m23;\n        const tmp9 = m22 * m03;\n        const tmp10 = m02 * m13;\n        const tmp11 = m12 * m03;\n        const tmp12 = m20 * m31;\n        const tmp13 = m30 * m21;\n        const tmp14 = m10 * m31;\n        const tmp15 = m30 * m11;\n        const tmp16 = m10 * m21;\n        const tmp17 = m20 * m11;\n        const tmp18 = m00 * m31;\n        const tmp19 = m30 * m01;\n        const tmp20 = m00 * m21;\n        const tmp21 = m20 * m01;\n        const tmp22 = m00 * m11;\n        const tmp23 = m10 * m01;\n        const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n            (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n        const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n            (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n        const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n            (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n        const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n            (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n        const d = 1 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n        newDst[0] = d * t0;\n        newDst[1] = d * t1;\n        newDst[2] = d * t2;\n        newDst[3] = d * t3;\n        newDst[4] = d * ((tmp1 * m10 + tmp2 * m20 + tmp5 * m30) -\n            (tmp0 * m10 + tmp3 * m20 + tmp4 * m30));\n        newDst[5] = d * ((tmp0 * m00 + tmp7 * m20 + tmp8 * m30) -\n            (tmp1 * m00 + tmp6 * m20 + tmp9 * m30));\n        newDst[6] = d * ((tmp3 * m00 + tmp6 * m10 + tmp11 * m30) -\n            (tmp2 * m00 + tmp7 * m10 + tmp10 * m30));\n        newDst[7] = d * ((tmp4 * m00 + tmp9 * m10 + tmp10 * m20) -\n            (tmp5 * m00 + tmp8 * m10 + tmp11 * m20));\n        newDst[8] = d * ((tmp12 * m13 + tmp15 * m23 + tmp16 * m33) -\n            (tmp13 * m13 + tmp14 * m23 + tmp17 * m33));\n        newDst[9] = d * ((tmp13 * m03 + tmp18 * m23 + tmp21 * m33) -\n            (tmp12 * m03 + tmp19 * m23 + tmp20 * m33));\n        newDst[10] = d * ((tmp14 * m03 + tmp19 * m13 + tmp22 * m33) -\n            (tmp15 * m03 + tmp18 * m13 + tmp23 * m33));\n        newDst[11] = d * ((tmp17 * m03 + tmp20 * m13 + tmp23 * m23) -\n            (tmp16 * m03 + tmp21 * m13 + tmp22 * m23));\n        newDst[12] = d * ((tmp14 * m22 + tmp17 * m32 + tmp13 * m12) -\n            (tmp16 * m32 + tmp12 * m12 + tmp15 * m22));\n        newDst[13] = d * ((tmp20 * m32 + tmp12 * m02 + tmp19 * m22) -\n            (tmp18 * m22 + tmp21 * m32 + tmp13 * m02));\n        newDst[14] = d * ((tmp18 * m12 + tmp23 * m32 + tmp15 * m02) -\n            (tmp22 * m32 + tmp14 * m02 + tmp19 * m12));\n        newDst[15] = d * ((tmp22 * m22 + tmp16 * m02 + tmp21 * m12) -\n            (tmp20 * m12 + tmp23 * m22 + tmp17 * m02));\n        return newDst;\n    }\n    /**\n     * Compute the determinant of a matrix\n     * @param m - the matrix\n     * @returns the determinant\n     */\n    function determinant(m) {\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        const tmp0 = m22 * m33;\n        const tmp1 = m32 * m23;\n        const tmp2 = m12 * m33;\n        const tmp3 = m32 * m13;\n        const tmp4 = m12 * m23;\n        const tmp5 = m22 * m13;\n        const tmp6 = m02 * m33;\n        const tmp7 = m32 * m03;\n        const tmp8 = m02 * m23;\n        const tmp9 = m22 * m03;\n        const tmp10 = m02 * m13;\n        const tmp11 = m12 * m03;\n        const t0 = (tmp0 * m11 + tmp3 * m21 + tmp4 * m31) -\n            (tmp1 * m11 + tmp2 * m21 + tmp5 * m31);\n        const t1 = (tmp1 * m01 + tmp6 * m21 + tmp9 * m31) -\n            (tmp0 * m01 + tmp7 * m21 + tmp8 * m31);\n        const t2 = (tmp2 * m01 + tmp7 * m11 + tmp10 * m31) -\n            (tmp3 * m01 + tmp6 * m11 + tmp11 * m31);\n        const t3 = (tmp5 * m01 + tmp8 * m11 + tmp11 * m21) -\n            (tmp4 * m01 + tmp9 * m11 + tmp10 * m21);\n        return m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3;\n    }\n    /**\n     * Computes the inverse of a 4-by-4 matrix. (same as inverse)\n     * @param m - The matrix.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The inverse of m.\n     */\n    const invert = inverse;\n    /**\n     * Multiplies two 4-by-4 matrices with a on the left and b on the right\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const a00 = a[0];\n        const a01 = a[1];\n        const a02 = a[2];\n        const a03 = a[3];\n        const a10 = a[4 + 0];\n        const a11 = a[4 + 1];\n        const a12 = a[4 + 2];\n        const a13 = a[4 + 3];\n        const a20 = a[8 + 0];\n        const a21 = a[8 + 1];\n        const a22 = a[8 + 2];\n        const a23 = a[8 + 3];\n        const a30 = a[12 + 0];\n        const a31 = a[12 + 1];\n        const a32 = a[12 + 2];\n        const a33 = a[12 + 3];\n        const b00 = b[0];\n        const b01 = b[1];\n        const b02 = b[2];\n        const b03 = b[3];\n        const b10 = b[4 + 0];\n        const b11 = b[4 + 1];\n        const b12 = b[4 + 2];\n        const b13 = b[4 + 3];\n        const b20 = b[8 + 0];\n        const b21 = b[8 + 1];\n        const b22 = b[8 + 2];\n        const b23 = b[8 + 3];\n        const b30 = b[12 + 0];\n        const b31 = b[12 + 1];\n        const b32 = b[12 + 2];\n        const b33 = b[12 + 3];\n        newDst[0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n        newDst[1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n        newDst[2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n        newDst[3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n        newDst[4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n        newDst[5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n        newDst[6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n        newDst[7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n        newDst[8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n        newDst[9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n        newDst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n        newDst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n        newDst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n        newDst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n        newDst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n        newDst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n        return newDst;\n    }\n    /**\n     * Multiplies two 4-by-4 matrices with a on the left and b on the right (same as multiply)\n     * @param a - The matrix on the left.\n     * @param b - The matrix on the right.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix product of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Sets the translation component of a 4-by-4 matrix to the given\n     * vector.\n     * @param a - The matrix.\n     * @param v - The vector.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The matrix with translation set.\n     */\n    function setTranslation(a, v, dst) {\n        const newDst = (dst ?? identity());\n        if (a !== newDst) {\n            newDst[0] = a[0];\n            newDst[1] = a[1];\n            newDst[2] = a[2];\n            newDst[3] = a[3];\n            newDst[4] = a[4];\n            newDst[5] = a[5];\n            newDst[6] = a[6];\n            newDst[7] = a[7];\n            newDst[8] = a[8];\n            newDst[9] = a[9];\n            newDst[10] = a[10];\n            newDst[11] = a[11];\n        }\n        newDst[12] = v[0];\n        newDst[13] = v[1];\n        newDst[14] = v[2];\n        newDst[15] = 1;\n        return newDst;\n    }\n    ///**\n    // * Returns the translation component of a 4-by-4 matrix as a vector with 3\n    // * entries.\n    // * @param m - The matrix.\n    // * @param dst - vector to hold result. If not passed a new one is created.\n    // * @returns The translation component of m.\n    // */\n    function getTranslation(m, dst) {\n        const newDst = (dst ?? vec3.create());\n        newDst[0] = m[12];\n        newDst[1] = m[13];\n        newDst[2] = m[14];\n        return newDst;\n    }\n    /**\n     * Returns an axis of a 4x4 matrix as a vector with 3 entries\n     * @param m - The matrix.\n     * @param axis - The axis 0 = x, 1 = y, 2 = z;\n     * @returns The axis component of m.\n     */\n    function getAxis(m, axis, dst) {\n        const newDst = (dst ?? vec3.create());\n        const off = axis * 4;\n        newDst[0] = m[off + 0];\n        newDst[1] = m[off + 1];\n        newDst[2] = m[off + 2];\n        return newDst;\n    }\n    /**\n     * Sets an axis of a 4x4 matrix as a vector with 3 entries\n     * @param m - The matrix.\n     * @param v - the axis vector\n     * @param axis - The axis  0 = x, 1 = y, 2 = z;\n     * @param dst - The matrix to set. If not passed a new one is created.\n     * @returns The matrix with axis set.\n     */\n    function setAxis(m, v, axis, dst) {\n        const newDst = (dst === m) ? dst : copy(m, dst);\n        const off = axis * 4;\n        newDst[off + 0] = v[0];\n        newDst[off + 1] = v[1];\n        newDst[off + 2] = v[2];\n        return newDst;\n    }\n    /**\n     * Returns the \"3d\" scaling component of the matrix\n     * @param m - The Matrix\n     * @param dst - The vector to set. If not passed a new one is created.\n     */\n    function getScaling(m, dst) {\n        const newDst = (dst ?? vec3.create());\n        const xx = m[0];\n        const xy = m[1];\n        const xz = m[2];\n        const yx = m[4];\n        const yy = m[5];\n        const yz = m[6];\n        const zx = m[8];\n        const zy = m[9];\n        const zz = m[10];\n        newDst[0] = Math.sqrt(xx * xx + xy * xy + xz * xz);\n        newDst[1] = Math.sqrt(yx * yx + yy * yy + yz * yz);\n        newDst[2] = Math.sqrt(zx * zx + zy * zy + zz * zz);\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 perspective transformation matrix given the angular height\n     * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n     * arguments define a frustum extending in the negative z direction.  The given\n     * angle is the vertical angle of the frustum, and the horizontal angle is\n     * determined to produce the given aspect ratio.  The arguments near and far are\n     * the distances to the near and far clipping planes.  Note that near and far\n     * are not z coordinates, but rather they are distances along the negative\n     * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n     * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n     * from 0 to 1 in the z dimension.\n     *\n     * Note: If you pass `Infinity` for zFar then it will produce a projection matrix\n     * returns -Infinity for Z when transforming coordinates with Z <= 0 and +Infinity for Z\n     * otherwise.\n     *\n     * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n     * @param aspect - The aspect ratio width / height.\n     * @param zNear - The depth (negative z coordinate)\n     *     of the near clipping plane.\n     * @param zFar - The depth (negative z coordinate)\n     *     of the far clipping plane.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The perspective matrix.\n     */\n    function perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n        newDst[0] = f / aspect;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = f;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[11] = -1;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[15] = 0;\n        if (Number.isFinite(zFar)) {\n            const rangeInv = 1 / (zNear - zFar);\n            newDst[10] = zFar * rangeInv;\n            newDst[14] = zFar * zNear * rangeInv;\n        }\n        else {\n            newDst[10] = -1;\n            newDst[14] = -zNear;\n        }\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 reverse-z perspective transformation matrix given the angular height\n     * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n     * arguments define a frustum extending in the negative z direction.  The given\n     * angle is the vertical angle of the frustum, and the horizontal angle is\n     * determined to produce the given aspect ratio.  The arguments near and far are\n     * the distances to the near and far clipping planes.  Note that near and far\n     * are not z coordinates, but rather they are distances along the negative\n     * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n     * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n     * from 1 (at -zNear) to 0 (at -zFar) in the z dimension.\n     *\n     * @param fieldOfViewYInRadians - The camera angle from top to bottom (in radians).\n     * @param aspect - The aspect ratio width / height.\n     * @param zNear - The depth (negative z coordinate)\n     *     of the near clipping plane.\n     * @param zFar - The depth (negative z coordinate)\n     *     of the far clipping plane. (default = Infinity)\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The perspective matrix.\n     */ function perspectiveReverseZ(fieldOfViewYInRadians, aspect, zNear, zFar = Infinity, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const f = 1 / Math.tan(fieldOfViewYInRadians * 0.5);\n        newDst[0] = f / aspect;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = f;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[11] = -1;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[15] = 0;\n        if (zFar === Infinity) {\n            newDst[10] = 0;\n            newDst[14] = zNear;\n        }\n        else {\n            const rangeInv = 1 / (zFar - zNear);\n            newDst[10] = zNear * rangeInv;\n            newDst[14] = zFar * zNear * rangeInv;\n        }\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 orthogonal transformation matrix that transforms from\n     * the given the left, right, bottom, and top dimensions to -1 +1 in x, and y\n     * and 0 to +1 in z.\n     * @param left - Left side of the near clipping plane viewport.\n     * @param right - Right side of the near clipping plane viewport.\n     * @param bottom - Bottom of the near clipping plane viewport.\n     * @param top - Top of the near clipping plane viewport.\n     * @param near - The depth (negative z coordinate)\n     *     of the near clipping plane.\n     * @param far - The depth (negative z coordinate)\n     *     of the far clipping plane.\n     * @param dst - Output matrix. If not passed a new one is created.\n     * @returns The orthographic projection matrix.\n     */\n    function ortho(left, right, bottom, top, near, far, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = 2 / (right - left);\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 2 / (top - bottom);\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1 / (near - far);\n        newDst[11] = 0;\n        newDst[12] = (right + left) / (left - right);\n        newDst[13] = (top + bottom) / (bottom - top);\n        newDst[14] = near / (near - far);\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 perspective transformation matrix given the left, right,\n     * top, bottom, near and far clipping planes. The arguments define a frustum\n     * extending in the negative z direction. The arguments near and far are the\n     * distances to the near and far clipping planes. Note that near and far are not\n     * z coordinates, but rather they are distances along the negative z-axis. The\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\n     * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n     * dimension.\n     * @param left - The x coordinate of the left plane of the box.\n     * @param right - The x coordinate of the right plane of the box.\n     * @param bottom - The y coordinate of the bottom plane of the box.\n     * @param top - The y coordinate of the right plane of the box.\n     * @param near - The negative z coordinate of the near plane of the box.\n     * @param far - The negative z coordinate of the far plane of the box.\n     * @param dst - Output matrix. If not passed a new one is created.\n     * @returns The perspective projection matrix.\n     */\n    function frustum(left, right, bottom, top, near, far, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const dx = (right - left);\n        const dy = (top - bottom);\n        const dz = (near - far);\n        newDst[0] = 2 * near / dx;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 2 * near / dy;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = (left + right) / dx;\n        newDst[9] = (top + bottom) / dy;\n        newDst[10] = far / dz;\n        newDst[11] = -1;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = near * far / dz;\n        newDst[15] = 0;\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 reverse-z perspective transformation matrix given the left, right,\n     * top, bottom, near and far clipping planes. The arguments define a frustum\n     * extending in the negative z direction. The arguments near and far are the\n     * distances to the near and far clipping planes. Note that near and far are not\n     * z coordinates, but rather they are distances along the negative z-axis. The\n     * matrix generated sends the viewing frustum to the unit box. We assume a unit\n     * box extending from -1 to 1 in the x and y dimensions and from 1 (-near) to 0 (-far) in the z\n     * dimension.\n     * @param left - The x coordinate of the left plane of the box.\n     * @param right - The x coordinate of the right plane of the box.\n     * @param bottom - The y coordinate of the bottom plane of the box.\n     * @param top - The y coordinate of the right plane of the box.\n     * @param near - The negative z coordinate of the near plane of the box.\n     * @param far - The negative z coordinate of the far plane of the box.\n     * @param dst - Output matrix. If not passed a new one is created.\n     * @returns The perspective projection matrix.\n     */\n    function frustumReverseZ(left, right, bottom, top, near, far = Infinity, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const dx = (right - left);\n        const dy = (top - bottom);\n        newDst[0] = 2 * near / dx;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 2 * near / dy;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = (left + right) / dx;\n        newDst[9] = (top + bottom) / dy;\n        newDst[11] = -1;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[15] = 0;\n        if (far === Infinity) {\n            newDst[10] = 0;\n            newDst[14] = near;\n        }\n        else {\n            const rangeInv = 1 / (far - near);\n            newDst[10] = near * rangeInv;\n            newDst[14] = far * near * rangeInv;\n        }\n        return newDst;\n    }\n    const xAxis = vec3.create();\n    const yAxis = vec3.create();\n    const zAxis = vec3.create();\n    /**\n     * Computes a 4-by-4 aim transformation.\n     *\n     * This is a matrix which positions an object aiming down positive Z.\n     * toward the target.\n     *\n     * Note: this is **NOT** the inverse of lookAt as lookAt looks at negative Z.\n     *\n     * @param position - The position of the object.\n     * @param target - The position meant to be aimed at.\n     * @param up - A vector pointing up.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The aim matrix.\n     */\n    function aim(position, target, up, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        vec3.normalize(vec3.subtract(target, position, zAxis), zAxis);\n        vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n        vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n        newDst[0] = xAxis[0];\n        newDst[1] = xAxis[1];\n        newDst[2] = xAxis[2];\n        newDst[3] = 0;\n        newDst[4] = yAxis[0];\n        newDst[5] = yAxis[1];\n        newDst[6] = yAxis[2];\n        newDst[7] = 0;\n        newDst[8] = zAxis[0];\n        newDst[9] = zAxis[1];\n        newDst[10] = zAxis[2];\n        newDst[11] = 0;\n        newDst[12] = position[0];\n        newDst[13] = position[1];\n        newDst[14] = position[2];\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 camera aim transformation.\n     *\n     * This is a matrix which positions an object aiming down negative Z.\n     * toward the target.\n     *\n     * Note: this is the inverse of `lookAt`\n     *\n     * @param eye - The position of the object.\n     * @param target - The position meant to be aimed at.\n     * @param up - A vector pointing up.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The aim matrix.\n     */\n    function cameraAim(eye, target, up, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        vec3.normalize(vec3.subtract(eye, target, zAxis), zAxis);\n        vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n        vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n        newDst[0] = xAxis[0];\n        newDst[1] = xAxis[1];\n        newDst[2] = xAxis[2];\n        newDst[3] = 0;\n        newDst[4] = yAxis[0];\n        newDst[5] = yAxis[1];\n        newDst[6] = yAxis[2];\n        newDst[7] = 0;\n        newDst[8] = zAxis[0];\n        newDst[9] = zAxis[1];\n        newDst[10] = zAxis[2];\n        newDst[11] = 0;\n        newDst[12] = eye[0];\n        newDst[13] = eye[1];\n        newDst[14] = eye[2];\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Computes a 4-by-4 view transformation.\n     *\n     * This is a view matrix which transforms all other objects\n     * to be in the space of the view defined by the parameters.\n     *\n     * @param eye - The position of the object.\n     * @param target - The position meant to be aimed at.\n     * @param up - A vector pointing up.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The look-at matrix.\n     */\n    function lookAt(eye, target, up, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        vec3.normalize(vec3.subtract(eye, target, zAxis), zAxis);\n        vec3.normalize(vec3.cross(up, zAxis, xAxis), xAxis);\n        vec3.normalize(vec3.cross(zAxis, xAxis, yAxis), yAxis);\n        newDst[0] = xAxis[0];\n        newDst[1] = yAxis[0];\n        newDst[2] = zAxis[0];\n        newDst[3] = 0;\n        newDst[4] = xAxis[1];\n        newDst[5] = yAxis[1];\n        newDst[6] = zAxis[1];\n        newDst[7] = 0;\n        newDst[8] = xAxis[2];\n        newDst[9] = yAxis[2];\n        newDst[10] = zAxis[2];\n        newDst[11] = 0;\n        newDst[12] = -(xAxis[0] * eye[0] + xAxis[1] * eye[1] + xAxis[2] * eye[2]);\n        newDst[13] = -(yAxis[0] * eye[0] + yAxis[1] * eye[1] + yAxis[2] * eye[2]);\n        newDst[14] = -(zAxis[0] * eye[0] + zAxis[1] * eye[1] + zAxis[2] * eye[2]);\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which translates by the given vector v.\n     * @param v - The vector by\n     *     which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translation matrix.\n     */\n    function translation(v, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        newDst[11] = 0;\n        newDst[12] = v[0];\n        newDst[13] = v[1];\n        newDst[14] = v[2];\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Translates the given 4-by-4 matrix by the given vector v.\n     * @param m - The matrix.\n     * @param v - The vector by\n     *     which to translate.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The translated matrix.\n     */\n    function translate(m, v, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const m00 = m[0];\n        const m01 = m[1];\n        const m02 = m[2];\n        const m03 = m[3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const m30 = m[3 * 4 + 0];\n        const m31 = m[3 * 4 + 1];\n        const m32 = m[3 * 4 + 2];\n        const m33 = m[3 * 4 + 3];\n        if (m !== newDst) {\n            newDst[0] = m00;\n            newDst[1] = m01;\n            newDst[2] = m02;\n            newDst[3] = m03;\n            newDst[4] = m10;\n            newDst[5] = m11;\n            newDst[6] = m12;\n            newDst[7] = m13;\n            newDst[8] = m20;\n            newDst[9] = m21;\n            newDst[10] = m22;\n            newDst[11] = m23;\n        }\n        newDst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n        newDst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n        newDst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n        newDst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationX(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = 1;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = c;\n        newDst[6] = s;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = -s;\n        newDst[10] = c;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the x-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateX(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const m10 = m[4];\n        const m11 = m[5];\n        const m12 = m[6];\n        const m13 = m[7];\n        const m20 = m[8];\n        const m21 = m[9];\n        const m22 = m[10];\n        const m23 = m[11];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[4] = c * m10 + s * m20;\n        newDst[5] = c * m11 + s * m21;\n        newDst[6] = c * m12 + s * m22;\n        newDst[7] = c * m13 + s * m23;\n        newDst[8] = c * m20 - s * m10;\n        newDst[9] = c * m21 - s * m11;\n        newDst[10] = c * m22 - s * m12;\n        newDst[11] = c * m23 - s * m13;\n        if (m !== newDst) {\n            newDst[0] = m[0];\n            newDst[1] = m[1];\n            newDst[2] = m[2];\n            newDst[3] = m[3];\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationY(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c;\n        newDst[1] = 0;\n        newDst[2] = -s;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = 1;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = s;\n        newDst[9] = 0;\n        newDst[10] = c;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the y-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateY(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m20 = m[2 * 4 + 0];\n        const m21 = m[2 * 4 + 1];\n        const m22 = m[2 * 4 + 2];\n        const m23 = m[2 * 4 + 3];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c * m00 - s * m20;\n        newDst[1] = c * m01 - s * m21;\n        newDst[2] = c * m02 - s * m22;\n        newDst[3] = c * m03 - s * m23;\n        newDst[8] = c * m20 + s * m00;\n        newDst[9] = c * m21 + s * m01;\n        newDst[10] = c * m22 + s * m02;\n        newDst[11] = c * m23 + s * m03;\n        if (m !== newDst) {\n            newDst[4] = m[4];\n            newDst[5] = m[5];\n            newDst[6] = m[6];\n            newDst[7] = m[7];\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotation matrix.\n     */\n    function rotationZ(angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c;\n        newDst[1] = s;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = -s;\n        newDst[5] = c;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = 1;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the z-axis by the given\n     * angle.\n     * @param m - The matrix.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function rotateZ(m, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const m00 = m[0 * 4 + 0];\n        const m01 = m[0 * 4 + 1];\n        const m02 = m[0 * 4 + 2];\n        const m03 = m[0 * 4 + 3];\n        const m10 = m[1 * 4 + 0];\n        const m11 = m[1 * 4 + 1];\n        const m12 = m[1 * 4 + 2];\n        const m13 = m[1 * 4 + 3];\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        newDst[0] = c * m00 + s * m10;\n        newDst[1] = c * m01 + s * m11;\n        newDst[2] = c * m02 + s * m12;\n        newDst[3] = c * m03 + s * m13;\n        newDst[4] = c * m10 - s * m00;\n        newDst[5] = c * m11 - s * m01;\n        newDst[6] = c * m12 - s * m02;\n        newDst[7] = c * m13 - s * m03;\n        if (m !== newDst) {\n            newDst[8] = m[8];\n            newDst[9] = m[9];\n            newDst[10] = m[10];\n            newDst[11] = m[11];\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the given axis by the given\n     * angle.\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A matrix which rotates angle radians\n     *     around the axis.\n     */\n    function axisRotation(axis, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        let x = axis[0];\n        let y = axis[1];\n        let z = axis[2];\n        const n = Math.sqrt(x * x + y * y + z * z);\n        x /= n;\n        y /= n;\n        z /= n;\n        const xx = x * x;\n        const yy = y * y;\n        const zz = z * z;\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        const oneMinusCosine = 1 - c;\n        newDst[0] = xx + (1 - xx) * c;\n        newDst[1] = x * y * oneMinusCosine + z * s;\n        newDst[2] = x * z * oneMinusCosine - y * s;\n        newDst[3] = 0;\n        newDst[4] = x * y * oneMinusCosine - z * s;\n        newDst[5] = yy + (1 - yy) * c;\n        newDst[6] = y * z * oneMinusCosine + x * s;\n        newDst[7] = 0;\n        newDst[8] = x * z * oneMinusCosine + y * s;\n        newDst[9] = y * z * oneMinusCosine - x * s;\n        newDst[10] = zz + (1 - zz) * c;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which rotates around the given axis by the given\n     * angle. (same as axisRotation)\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns A matrix which rotates angle radians\n     *     around the axis.\n     */\n    const rotation = axisRotation;\n    /**\n     * Rotates the given 4-by-4 matrix around the given axis by the\n     * given angle.\n     * @param m - The matrix.\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    function axisRotate(m, axis, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        let x = axis[0];\n        let y = axis[1];\n        let z = axis[2];\n        const n = Math.sqrt(x * x + y * y + z * z);\n        x /= n;\n        y /= n;\n        z /= n;\n        const xx = x * x;\n        const yy = y * y;\n        const zz = z * z;\n        const c = Math.cos(angleInRadians);\n        const s = Math.sin(angleInRadians);\n        const oneMinusCosine = 1 - c;\n        const r00 = xx + (1 - xx) * c;\n        const r01 = x * y * oneMinusCosine + z * s;\n        const r02 = x * z * oneMinusCosine - y * s;\n        const r10 = x * y * oneMinusCosine - z * s;\n        const r11 = yy + (1 - yy) * c;\n        const r12 = y * z * oneMinusCosine + x * s;\n        const r20 = x * z * oneMinusCosine + y * s;\n        const r21 = y * z * oneMinusCosine - x * s;\n        const r22 = zz + (1 - zz) * c;\n        const m00 = m[0];\n        const m01 = m[1];\n        const m02 = m[2];\n        const m03 = m[3];\n        const m10 = m[4];\n        const m11 = m[5];\n        const m12 = m[6];\n        const m13 = m[7];\n        const m20 = m[8];\n        const m21 = m[9];\n        const m22 = m[10];\n        const m23 = m[11];\n        newDst[0] = r00 * m00 + r01 * m10 + r02 * m20;\n        newDst[1] = r00 * m01 + r01 * m11 + r02 * m21;\n        newDst[2] = r00 * m02 + r01 * m12 + r02 * m22;\n        newDst[3] = r00 * m03 + r01 * m13 + r02 * m23;\n        newDst[4] = r10 * m00 + r11 * m10 + r12 * m20;\n        newDst[5] = r10 * m01 + r11 * m11 + r12 * m21;\n        newDst[6] = r10 * m02 + r11 * m12 + r12 * m22;\n        newDst[7] = r10 * m03 + r11 * m13 + r12 * m23;\n        newDst[8] = r20 * m00 + r21 * m10 + r22 * m20;\n        newDst[9] = r20 * m01 + r21 * m11 + r22 * m21;\n        newDst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n        newDst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n        if (m !== newDst) {\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Rotates the given 4-by-4 matrix around the given axis by the\n     * given angle. (same as rotate)\n     * @param m - The matrix.\n     * @param axis - The axis\n     *     about which to rotate.\n     * @param angleInRadians - The angle by which to rotate (in radians).\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The rotated matrix.\n     */\n    const rotate = axisRotate;\n    /**\n     * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n     * the corresponding entry in the given vector; assumes the vector has three\n     * entries.\n     * @param v - A vector of\n     *     three entries specifying the factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function scaling(v, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = v[0];\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = v[1];\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = v[2];\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Scales the given 4-by-4 matrix in each dimension by an amount\n     * given by the corresponding entry in the given vector; assumes the vector has\n     * three entries.\n     * @param m - The matrix to be modified.\n     * @param v - A vector of three entries specifying the\n     *     factor by which to scale in each dimension.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function scale(m, v, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        newDst[0] = v0 * m[0 * 4 + 0];\n        newDst[1] = v0 * m[0 * 4 + 1];\n        newDst[2] = v0 * m[0 * 4 + 2];\n        newDst[3] = v0 * m[0 * 4 + 3];\n        newDst[4] = v1 * m[1 * 4 + 0];\n        newDst[5] = v1 * m[1 * 4 + 1];\n        newDst[6] = v1 * m[1 * 4 + 2];\n        newDst[7] = v1 * m[1 * 4 + 3];\n        newDst[8] = v2 * m[2 * 4 + 0];\n        newDst[9] = v2 * m[2 * 4 + 1];\n        newDst[10] = v2 * m[2 * 4 + 2];\n        newDst[11] = v2 * m[2 * 4 + 3];\n        if (m !== newDst) {\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    /**\n     * Creates a 4-by-4 matrix which scales a uniform amount in each dimension.\n     * @param s - the amount to scale\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaling matrix.\n     */\n    function uniformScaling(s, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = s;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        newDst[4] = 0;\n        newDst[5] = s;\n        newDst[6] = 0;\n        newDst[7] = 0;\n        newDst[8] = 0;\n        newDst[9] = 0;\n        newDst[10] = s;\n        newDst[11] = 0;\n        newDst[12] = 0;\n        newDst[13] = 0;\n        newDst[14] = 0;\n        newDst[15] = 1;\n        return newDst;\n    }\n    /**\n     * Scales the given 4-by-4 matrix in each dimension by a uniform scale.\n     * @param m - The matrix to be modified.\n     * @param s - The amount to scale.\n     * @param dst - matrix to hold result. If not passed a new one is created.\n     * @returns The scaled matrix.\n     */\n    function uniformScale(m, s, dst) {\n        const newDst = (dst ?? new Ctor(16));\n        newDst[0] = s * m[0 * 4 + 0];\n        newDst[1] = s * m[0 * 4 + 1];\n        newDst[2] = s * m[0 * 4 + 2];\n        newDst[3] = s * m[0 * 4 + 3];\n        newDst[4] = s * m[1 * 4 + 0];\n        newDst[5] = s * m[1 * 4 + 1];\n        newDst[6] = s * m[1 * 4 + 2];\n        newDst[7] = s * m[1 * 4 + 3];\n        newDst[8] = s * m[2 * 4 + 0];\n        newDst[9] = s * m[2 * 4 + 1];\n        newDst[10] = s * m[2 * 4 + 2];\n        newDst[11] = s * m[2 * 4 + 3];\n        if (m !== newDst) {\n            newDst[12] = m[12];\n            newDst[13] = m[13];\n            newDst[14] = m[14];\n            newDst[15] = m[15];\n        }\n        return newDst;\n    }\n    return {\n        create,\n        set,\n        fromMat3,\n        fromQuat,\n        negate,\n        copy,\n        clone,\n        equalsApproximately,\n        equals,\n        identity,\n        transpose,\n        inverse,\n        determinant,\n        invert,\n        multiply,\n        mul,\n        setTranslation,\n        getTranslation,\n        getAxis,\n        setAxis,\n        getScaling,\n        perspective,\n        perspectiveReverseZ,\n        ortho,\n        frustum,\n        frustumReverseZ,\n        aim,\n        cameraAim,\n        lookAt,\n        translation,\n        translate,\n        rotationX,\n        rotateX,\n        rotationY,\n        rotateY,\n        rotationZ,\n        rotateZ,\n        axisRotation,\n        rotation,\n        axisRotate,\n        rotate,\n        scaling,\n        scale,\n        uniformScaling,\n        uniformScale,\n    };\n}\nconst cache$2 = new Map();\nfunction getAPI$2(Ctor) {\n    let api = cache$2.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$2(Ctor);\n        cache$2.set(Ctor, api);\n    }\n    return api;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates am typed API for Qud\n * */\nfunction getAPIImpl$1(Ctor) {\n    const vec3 = getAPI$4(Ctor);\n    /**\n     * Creates a quat4; may be called with x, y, z to set initial values.\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param w - Initial w value.\n     * @returns the created vector\n     */\n    function create(x, y, z, w) {\n        const newDst = new Ctor(4);\n        if (x !== undefined) {\n            newDst[0] = x;\n            if (y !== undefined) {\n                newDst[1] = y;\n                if (z !== undefined) {\n                    newDst[2] = z;\n                    if (w !== undefined) {\n                        newDst[3] = w;\n                    }\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Creates a Quat; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param z - Initial w value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Quat\n     * Also see {@link quat.create} and {@link quat.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param z third value\n     * @param w fourth value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, z, w, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = x;\n        newDst[1] = y;\n        newDst[2] = z;\n        newDst[3] = w;\n        return newDst;\n    }\n    /**\n     * Sets a quaternion from the given angle and  axis,\n     * then returns it.\n     *\n     * @param axis - the axis to rotate around\n     * @param angleInRadians - the angle\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The quaternion that represents the given axis and angle\n     **/\n    function fromAxisAngle(axis, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const halfAngle = angleInRadians * 0.5;\n        const s = Math.sin(halfAngle);\n        newDst[0] = s * axis[0];\n        newDst[1] = s * axis[1];\n        newDst[2] = s * axis[2];\n        newDst[3] = Math.cos(halfAngle);\n        return newDst;\n    }\n    /**\n     * Gets the rotation axis and angle\n     * @param q - quaternion to compute from\n     * @param dst - Vec3 to hold result. If not passed in a new one is created.\n     * @return angle and axis\n     */\n    function toAxisAngle(q, dst) {\n        const newDst = (dst ?? vec3.create(3));\n        const angle = Math.acos(q[3]) * 2;\n        const s = Math.sin(angle * 0.5);\n        if (s > EPSILON) {\n            newDst[0] = q[0] / s;\n            newDst[1] = q[1] / s;\n            newDst[2] = q[2] / s;\n        }\n        else {\n            newDst[0] = 1;\n            newDst[1] = 0;\n            newDst[2] = 0;\n        }\n        return { angle, axis: newDst };\n    }\n    /**\n     * Returns the angle in degrees between two rotations a and b.\n     * @param a - quaternion a\n     * @param b - quaternion b\n     * @return angle in radians between the two quaternions\n     */\n    function angle(a, b) {\n        const d = dot(a, b);\n        return Math.acos(2 * d * d - 1);\n    }\n    /**\n     * Multiplies two quaternions\n     *\n     * @param a - the first quaternion\n     * @param b - the second quaternion\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const ax = a[0];\n        const ay = a[1];\n        const az = a[2];\n        const aw = a[3];\n        const bx = b[0];\n        const by = b[1];\n        const bz = b[2];\n        const bw = b[3];\n        newDst[0] = ax * bw + aw * bx + ay * bz - az * by;\n        newDst[1] = ay * bw + aw * by + az * bx - ax * bz;\n        newDst[2] = az * bw + aw * bz + ax * by - ay * bx;\n        newDst[3] = aw * bw - ax * bx - ay * by - az * bz;\n        return newDst;\n    }\n    /**\n     * Multiplies two quaternions\n     *\n     * @param a - the first quaternion\n     * @param b - the second quaternion\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    const mul = multiply;\n    /**\n     * Rotates the given quaternion around the X axis by the given angle.\n     * @param q - quaternion to rotate\n     * @param angleInRadians - The angle by which to rotate\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function rotateX(q, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const halfAngle = angleInRadians * 0.5;\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n        const bx = Math.sin(halfAngle);\n        const bw = Math.cos(halfAngle);\n        newDst[0] = qx * bw + qw * bx;\n        newDst[1] = qy * bw + qz * bx;\n        newDst[2] = qz * bw - qy * bx;\n        newDst[3] = qw * bw - qx * bx;\n        return newDst;\n    }\n    /**\n     * Rotates the given quaternion around the Y axis by the given angle.\n     * @param q - quaternion to rotate\n     * @param angleInRadians - The angle by which to rotate\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function rotateY(q, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const halfAngle = angleInRadians * 0.5;\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n        const by = Math.sin(halfAngle);\n        const bw = Math.cos(halfAngle);\n        newDst[0] = qx * bw - qz * by;\n        newDst[1] = qy * bw + qw * by;\n        newDst[2] = qz * bw + qx * by;\n        newDst[3] = qw * bw - qy * by;\n        return newDst;\n    }\n    /**\n     * Rotates the given quaternion around the Z axis by the given angle.\n     * @param q - quaternion to rotate\n     * @param angleInRadians - The angle by which to rotate\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function rotateZ(q, angleInRadians, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const halfAngle = angleInRadians * 0.5;\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n        const bz = Math.sin(halfAngle);\n        const bw = Math.cos(halfAngle);\n        newDst[0] = qx * bw + qy * bz;\n        newDst[1] = qy * bw - qx * bz;\n        newDst[2] = qz * bw + qw * bz;\n        newDst[3] = qw * bw - qz * bz;\n        return newDst;\n    }\n    /**\n     * Spherically linear interpolate between two quaternions\n     *\n     * @param a - starting value\n     * @param b - ending value\n     * @param t - value where 0 = a and 1 = b\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the result of a * b\n     */\n    function slerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const ax = a[0];\n        const ay = a[1];\n        const az = a[2];\n        const aw = a[3];\n        let bx = b[0];\n        let by = b[1];\n        let bz = b[2];\n        let bw = b[3];\n        let cosOmega = ax * bx + ay * by + az * bz + aw * bw;\n        if (cosOmega < 0) {\n            cosOmega = -cosOmega;\n            bx = -bx;\n            by = -by;\n            bz = -bz;\n            bw = -bw;\n        }\n        let scale0;\n        let scale1;\n        if (1.0 - cosOmega > EPSILON) {\n            const omega = Math.acos(cosOmega);\n            const sinOmega = Math.sin(omega);\n            scale0 = Math.sin((1 - t) * omega) / sinOmega;\n            scale1 = Math.sin(t * omega) / sinOmega;\n        }\n        else {\n            scale0 = 1.0 - t;\n            scale1 = t;\n        }\n        newDst[0] = scale0 * ax + scale1 * bx;\n        newDst[1] = scale0 * ay + scale1 * by;\n        newDst[2] = scale0 * az + scale1 * bz;\n        newDst[3] = scale0 * aw + scale1 * bw;\n        return newDst;\n    }\n    /**\n     * Compute the inverse of a quaternion\n     *\n     * @param q - quaternion to compute the inverse of\n     * @returns A quaternion that is the result of a * b\n     */\n    function inverse(q, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const a0 = q[0];\n        const a1 = q[1];\n        const a2 = q[2];\n        const a3 = q[3];\n        const dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n        const invDot = dot ? 1 / dot : 0;\n        newDst[0] = -a0 * invDot;\n        newDst[1] = -a1 * invDot;\n        newDst[2] = -a2 * invDot;\n        newDst[3] = a3 * invDot;\n        return newDst;\n    }\n    /**\n     * Compute the conjugate of a quaternion\n     * For quaternions with a magnitude of 1 (a unit quaternion)\n     * this returns the same as the inverse but is faster to calculate.\n     *\n     * @param q - quaternion to compute the conjugate of.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The conjugate of q\n     */\n    function conjugate(q, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = -q[0];\n        newDst[1] = -q[1];\n        newDst[2] = -q[2];\n        newDst[3] = q[3];\n        return newDst;\n    }\n    /**\n     * Creates a quaternion from the given rotation matrix.\n     *\n     * The created quaternion is not normalized.\n     *\n     * @param m - rotation matrix\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns the result\n     */\n    function fromMat(m, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        /*\n        0 1 2\n        3 4 5\n        6 7 8\n      \n        0 1 2\n        4 5 6\n        8 9 10\n         */\n        // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n        // article \"Quaternion Calculus and Fast Animation\".\n        const trace = m[0] + m[5] + m[10];\n        if (trace > 0.0) {\n            // |w| > 1/2, may as well choose w > 1/2\n            const root = Math.sqrt(trace + 1); // 2w\n            newDst[3] = 0.5 * root;\n            const invRoot = 0.5 / root; // 1/(4w)\n            newDst[0] = (m[6] - m[9]) * invRoot;\n            newDst[1] = (m[8] - m[2]) * invRoot;\n            newDst[2] = (m[1] - m[4]) * invRoot;\n        }\n        else {\n            // |w| <= 1/2\n            let i = 0;\n            if (m[5] > m[0]) {\n                i = 1;\n            }\n            if (m[10] > m[i * 4 + i]) {\n                i = 2;\n            }\n            const j = (i + 1) % 3;\n            const k = (i + 2) % 3;\n            const root = Math.sqrt(m[i * 4 + i] - m[j * 4 + j] - m[k * 4 + k] + 1.0);\n            newDst[i] = 0.5 * root;\n            const invRoot = 0.5 / root;\n            newDst[3] = (m[j * 4 + k] - m[k * 4 + j]) * invRoot;\n            newDst[j] = (m[j * 4 + i] + m[i * 4 + j]) * invRoot;\n            newDst[k] = (m[k * 4 + i] + m[i * 4 + k]) * invRoot;\n        }\n        return newDst;\n    }\n    /**\n     * Creates a quaternion from the given euler angle x, y, z using the provided intrinsic order for the conversion.\n     *\n     * @param xAngleInRadians - angle to rotate around X axis in radians.\n     * @param yAngleInRadians - angle to rotate around Y axis in radians.\n     * @param zAngleInRadians - angle to rotate around Z axis in radians.\n     * @param order - order to apply euler angles\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion representing the same rotation as the euler angles applied in the given order\n     */\n    function fromEuler(xAngleInRadians, yAngleInRadians, zAngleInRadians, order, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const xHalfAngle = xAngleInRadians * 0.5;\n        const yHalfAngle = yAngleInRadians * 0.5;\n        const zHalfAngle = zAngleInRadians * 0.5;\n        const sx = Math.sin(xHalfAngle);\n        const cx = Math.cos(xHalfAngle);\n        const sy = Math.sin(yHalfAngle);\n        const cy = Math.cos(yHalfAngle);\n        const sz = Math.sin(zHalfAngle);\n        const cz = Math.cos(zHalfAngle);\n        switch (order) {\n            case 'xyz':\n                newDst[0] = sx * cy * cz + cx * sy * sz;\n                newDst[1] = cx * sy * cz - sx * cy * sz;\n                newDst[2] = cx * cy * sz + sx * sy * cz;\n                newDst[3] = cx * cy * cz - sx * sy * sz;\n                break;\n            case 'xzy':\n                newDst[0] = sx * cy * cz - cx * sy * sz;\n                newDst[1] = cx * sy * cz - sx * cy * sz;\n                newDst[2] = cx * cy * sz + sx * sy * cz;\n                newDst[3] = cx * cy * cz + sx * sy * sz;\n                break;\n            case 'yxz':\n                newDst[0] = sx * cy * cz + cx * sy * sz;\n                newDst[1] = cx * sy * cz - sx * cy * sz;\n                newDst[2] = cx * cy * sz - sx * sy * cz;\n                newDst[3] = cx * cy * cz + sx * sy * sz;\n                break;\n            case 'yzx':\n                newDst[0] = sx * cy * cz + cx * sy * sz;\n                newDst[1] = cx * sy * cz + sx * cy * sz;\n                newDst[2] = cx * cy * sz - sx * sy * cz;\n                newDst[3] = cx * cy * cz - sx * sy * sz;\n                break;\n            case 'zxy':\n                newDst[0] = sx * cy * cz - cx * sy * sz;\n                newDst[1] = cx * sy * cz + sx * cy * sz;\n                newDst[2] = cx * cy * sz + sx * sy * cz;\n                newDst[3] = cx * cy * cz - sx * sy * sz;\n                break;\n            case 'zyx':\n                newDst[0] = sx * cy * cz - cx * sy * sz;\n                newDst[1] = cx * sy * cz + sx * cy * sz;\n                newDst[2] = cx * cy * sz - sx * sy * cz;\n                newDst[3] = cx * cy * cz + sx * sy * sz;\n                break;\n            default:\n                throw new Error(`Unknown rotation order: ${order}`);\n        }\n        return newDst;\n    }\n    /**\n     * Copies a quaternion. (same as {@link quat.clone})\n     * Also see {@link quat.create} and {@link quat.set}\n     * @param q - The quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is a copy of q\n     */\n    function copy(q, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = q[0];\n        newDst[1] = q[1];\n        newDst[2] = q[2];\n        newDst[3] = q[3];\n        return newDst;\n    }\n    /**\n     * Clones a quaternion. (same as {@link quat.copy})\n     * Also see {@link quat.create} and {@link quat.set}\n     * @param q - The quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A copy of q.\n     */\n    const clone = copy;\n    /**\n     * Adds two quaternions; assumes a and b have the same dimension.\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + b[0];\n        newDst[1] = a[1] + b[1];\n        newDst[2] = a[2] + b[2];\n        newDst[3] = a[3] + b[3];\n        return newDst;\n    }\n    /**\n     * Subtracts two quaternions.\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] - b[0];\n        newDst[1] = a[1] - b[1];\n        newDst[2] = a[2] - b[2];\n        newDst[3] = a[3] - b[3];\n        return newDst;\n    }\n    /**\n     * Subtracts two quaternions.\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns A quaternion that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Multiplies a quaternion by a scalar.\n     * @param v - The quaternion.\n     * @param k - The scalar.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The scaled quaternion.\n     */\n    function mulScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0] * k;\n        newDst[1] = v[1] * k;\n        newDst[2] = v[2] * k;\n        newDst[3] = v[3] * k;\n        return newDst;\n    }\n    /**\n     * Multiplies a quaternion by a scalar. (same as mulScalar)\n     * @param v - The quaternion.\n     * @param k - The scalar.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The scaled quaternion.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The scaled quaternion.\n     */\n    function divScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0] / k;\n        newDst[1] = v[1] / k;\n        newDst[2] = v[2] / k;\n        newDst[3] = v[3] / k;\n        return newDst;\n    }\n    /**\n     * Computes the dot product of two quaternions\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n    }\n    /**\n     * Performs linear interpolation on two quaternions.\n     * Given quaternions a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @param t - Interpolation coefficient.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + t * (b[0] - a[0]);\n        newDst[1] = a[1] + t * (b[1] - a[1]);\n        newDst[2] = a[2] + t * (b[2] - a[2]);\n        newDst[3] = a[3] + t * (b[3] - a[3]);\n        return newDst;\n    }\n    /**\n     * Computes the length of quaternion\n     * @param v - quaternion.\n     * @returns length of quaternion.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n    }\n    /**\n     * Computes the length of quaternion (same as length)\n     * @param v - quaternion.\n     * @returns length of quaternion.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of quaternion\n     * @param v - quaternion.\n     * @returns square of the length of quaternion.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n    }\n    /**\n     * Computes the square of the length of quaternion (same as lengthSq)\n     * @param v - quaternion.\n     * @returns square of the length of quaternion.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Divides a quaternion by its Euclidean length and returns the quotient.\n     * @param v - The quaternion.\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns The normalized quaternion.\n     */\n    function normalize(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n        if (len > 0.00001) {\n            newDst[0] = v0 / len;\n            newDst[1] = v1 / len;\n            newDst[2] = v2 / len;\n            newDst[3] = v3 / len;\n        }\n        else {\n            newDst[0] = 0;\n            newDst[1] = 0;\n            newDst[2] = 0;\n            newDst[3] = 1;\n        }\n        return newDst;\n    }\n    /**\n     * Check if 2 quaternions are approximately equal\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @returns true if quaternions are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[3] - b[3]) < EPSILON;\n    }\n    /**\n     * Check if 2 quaternions are exactly equal\n     * @param a - Operand quaternion.\n     * @param b - Operand quaternion.\n     * @returns true if quaternions are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n    }\n    /**\n     * Creates an identity quaternion\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns an identity quaternion\n     */\n    function identity(dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = 0;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 1;\n        return newDst;\n    }\n    const tempVec3 = vec3.create();\n    const xUnitVec3 = vec3.create();\n    const yUnitVec3 = vec3.create();\n    /**\n     * Computes a quaternion to represent the shortest rotation from one vector to another.\n     *\n     * @param aUnit - the start vector\n     * @param bUnit - the end vector\n     * @param dst - quaternion to hold result. If not passed in a new one is created.\n     * @returns the result\n     */\n    function rotationTo(aUnit, bUnit, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const dot = vec3.dot(aUnit, bUnit);\n        if (dot < -0.999999) {\n            vec3.cross(xUnitVec3, aUnit, tempVec3);\n            if (vec3.len(tempVec3) < 0.000001) {\n                vec3.cross(yUnitVec3, aUnit, tempVec3);\n            }\n            vec3.normalize(tempVec3, tempVec3);\n            fromAxisAngle(tempVec3, Math.PI, newDst);\n            return newDst;\n        }\n        else if (dot > 0.999999) {\n            newDst[0] = 0;\n            newDst[1] = 0;\n            newDst[2] = 0;\n            newDst[3] = 1;\n            return newDst;\n        }\n        else {\n            vec3.cross(aUnit, bUnit, tempVec3);\n            newDst[0] = tempVec3[0];\n            newDst[1] = tempVec3[1];\n            newDst[2] = tempVec3[2];\n            newDst[3] = 1 + dot;\n            return normalize(newDst, newDst);\n        }\n    }\n    const tempQuat1 = new Ctor(4);\n    const tempQuat2 = new Ctor(4);\n    /**\n     * Performs a spherical linear interpolation with two control points\n     *\n     * @param a - the first quaternion\n     * @param b - the second quaternion\n     * @param c - the third quaternion\n     * @param d - the fourth quaternion\n     * @param t - Interpolation coefficient 0 to 1\n     * @returns result\n     */\n    function sqlerp(a, b, c, d, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        slerp(a, d, t, tempQuat1);\n        slerp(b, c, t, tempQuat2);\n        slerp(tempQuat1, tempQuat2, 2 * t * (1 - t), newDst);\n        return newDst;\n    }\n    return {\n        create,\n        fromValues,\n        set,\n        fromAxisAngle,\n        toAxisAngle,\n        angle,\n        multiply,\n        mul,\n        rotateX,\n        rotateY,\n        rotateZ,\n        slerp,\n        inverse,\n        conjugate,\n        fromMat,\n        fromEuler,\n        copy,\n        clone,\n        add,\n        subtract,\n        sub,\n        mulScalar,\n        scale,\n        divScalar,\n        dot,\n        lerp,\n        length,\n        len,\n        lengthSq,\n        lenSq,\n        normalize,\n        equalsApproximately,\n        equals,\n        identity,\n        rotationTo,\n        sqlerp,\n    };\n}\nconst cache$1 = new Map();\n/**\n *\n * Quat4 math functions.\n *\n * Almost all functions take an optional `newDst` argument. If it is not passed in the\n * functions will create a new `Quat4`. In other words you can do this\n *\n *     const v = quat4.cross(v1, v2);  // Creates a new Quat4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = quat4.create();\n *     quat4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     quat4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nfunction getAPI$1(Ctor) {\n    let api = cache$1.get(Ctor);\n    if (!api) {\n        api = getAPIImpl$1(Ctor);\n        cache$1.set(Ctor, api);\n    }\n    return api;\n}\n\n/*\n * Copyright 2022 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n * Generates am typed API for Vec4\n * */\nfunction getAPIImpl(Ctor) {\n    /**\n     * Creates a vec4; may be called with x, y, z to set initial values.\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param w - Initial w value.\n     * @returns the created vector\n     */\n    function create(x, y, z, w) {\n        const newDst = new Ctor(4);\n        if (x !== undefined) {\n            newDst[0] = x;\n            if (y !== undefined) {\n                newDst[1] = y;\n                if (z !== undefined) {\n                    newDst[2] = z;\n                    if (w !== undefined) {\n                        newDst[3] = w;\n                    }\n                }\n            }\n        }\n        return newDst;\n    }\n    /**\n     * Creates a vec4; may be called with x, y, z to set initial values. (same as create)\n     * @param x - Initial x value.\n     * @param y - Initial y value.\n     * @param z - Initial z value.\n     * @param z - Initial w value.\n     * @returns the created vector\n     */\n    const fromValues = create;\n    /**\n     * Sets the values of a Vec4\n     * Also see {@link vec4.create} and {@link vec4.copy}\n     *\n     * @param x first value\n     * @param y second value\n     * @param z third value\n     * @param w fourth value\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector with its elements set.\n     */\n    function set(x, y, z, w, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = x;\n        newDst[1] = y;\n        newDst[2] = z;\n        newDst[3] = w;\n        return newDst;\n    }\n    /**\n     * Applies Math.ceil to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the ceil of each element of v.\n     */\n    function ceil(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.ceil(v[0]);\n        newDst[1] = Math.ceil(v[1]);\n        newDst[2] = Math.ceil(v[2]);\n        newDst[3] = Math.ceil(v[3]);\n        return newDst;\n    }\n    /**\n     * Applies Math.floor to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the floor of each element of v.\n     */\n    function floor(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.floor(v[0]);\n        newDst[1] = Math.floor(v[1]);\n        newDst[2] = Math.floor(v[2]);\n        newDst[3] = Math.floor(v[3]);\n        return newDst;\n    }\n    /**\n     * Applies Math.round to each element of vector\n     * @param v - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the round of each element of v.\n     */\n    function round(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.round(v[0]);\n        newDst[1] = Math.round(v[1]);\n        newDst[2] = Math.round(v[2]);\n        newDst[3] = Math.round(v[3]);\n        return newDst;\n    }\n    /**\n     * Clamp each element of vector between min and max\n     * @param v - Operand vector.\n     * @param max - Min value, default 0\n     * @param min - Max value, default 1\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that the clamped value of each element of v.\n     */\n    function clamp(v, min = 0, max = 1, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.min(max, Math.max(min, v[0]));\n        newDst[1] = Math.min(max, Math.max(min, v[1]));\n        newDst[2] = Math.min(max, Math.max(min, v[2]));\n        newDst[3] = Math.min(max, Math.max(min, v[3]));\n        return newDst;\n    }\n    /**\n     * Adds two vectors; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a and b.\n     */\n    function add(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + b[0];\n        newDst[1] = a[1] + b[1];\n        newDst[2] = a[2] + b[2];\n        newDst[3] = a[3] + b[3];\n        return newDst;\n    }\n    /**\n     * Adds two vectors, scaling the 2nd; assumes a and b have the same dimension.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param scale - Amount to scale b\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the sum of a + b * scale.\n     */\n    function addScaled(a, b, scale, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + b[0] * scale;\n        newDst[1] = a[1] + b[1] * scale;\n        newDst[2] = a[2] + b[2] * scale;\n        newDst[3] = a[3] + b[3] * scale;\n        return newDst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    function subtract(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] - b[0];\n        newDst[1] = a[1] - b[1];\n        newDst[2] = a[2] - b[2];\n        newDst[3] = a[3] - b[3];\n        return newDst;\n    }\n    /**\n     * Subtracts two vectors.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A vector that is the difference of a and b.\n     */\n    const sub = subtract;\n    /**\n     * Check if 2 vectors are approximately equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are approximately equal\n     */\n    function equalsApproximately(a, b) {\n        return Math.abs(a[0] - b[0]) < EPSILON &&\n            Math.abs(a[1] - b[1]) < EPSILON &&\n            Math.abs(a[2] - b[2]) < EPSILON &&\n            Math.abs(a[3] - b[3]) < EPSILON;\n    }\n    /**\n     * Check if 2 vectors are exactly equal\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns true if vectors are exactly equal\n     */\n    function equals(a, b) {\n        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficient.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The linear interpolated result.\n     */\n    function lerp(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + t * (b[0] - a[0]);\n        newDst[1] = a[1] + t * (b[1] - a[1]);\n        newDst[2] = a[2] + t * (b[2] - a[2]);\n        newDst[3] = a[3] + t * (b[3] - a[3]);\n        return newDst;\n    }\n    /**\n     * Performs linear interpolation on two vectors.\n     * Given vectors a and b and interpolation coefficient vector t, returns\n     * a + t * (b - a).\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param t - Interpolation coefficients vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns the linear interpolated result.\n     */\n    function lerpV(a, b, t, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] + t[0] * (b[0] - a[0]);\n        newDst[1] = a[1] + t[1] * (b[1] - a[1]);\n        newDst[2] = a[2] + t[2] * (b[2] - a[2]);\n        newDst[3] = a[3] + t[3] * (b[3] - a[3]);\n        return newDst;\n    }\n    /**\n     * Return max values of two vectors.\n     * Given vectors a and b returns\n     * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The max components vector.\n     */\n    function max(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.max(a[0], b[0]);\n        newDst[1] = Math.max(a[1], b[1]);\n        newDst[2] = Math.max(a[2], b[2]);\n        newDst[3] = Math.max(a[3], b[3]);\n        return newDst;\n    }\n    /**\n     * Return min values of two vectors.\n     * Given vectors a and b returns\n     * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The min components vector.\n     */\n    function min(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = Math.min(a[0], b[0]);\n        newDst[1] = Math.min(a[1], b[1]);\n        newDst[2] = Math.min(a[2], b[2]);\n        newDst[3] = Math.min(a[3], b[3]);\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function mulScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0] * k;\n        newDst[1] = v[1] * k;\n        newDst[2] = v[2] * k;\n        newDst[3] = v[3] * k;\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by a scalar. (same as mulScalar)\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    const scale = mulScalar;\n    /**\n     * Divides a vector by a scalar.\n     * @param v - The vector.\n     * @param k - The scalar.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The scaled vector.\n     */\n    function divScalar(v, k, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0] / k;\n        newDst[1] = v[1] / k;\n        newDst[2] = v[2] / k;\n        newDst[3] = v[3] / k;\n        return newDst;\n    }\n    /**\n     * Inverse a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    function inverse(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = 1 / v[0];\n        newDst[1] = 1 / v[1];\n        newDst[2] = 1 / v[2];\n        newDst[3] = 1 / v[3];\n        return newDst;\n    }\n    /**\n     * Invert a vector. (same as inverse)\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The inverted vector.\n     */\n    const invert = inverse;\n    /**\n     * Computes the dot product of two vectors\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @returns dot product\n     */\n    function dot(a, b) {\n        return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]) + (a[3] * b[3]);\n    }\n    /**\n     * Computes the length of vector\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    function length(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n    }\n    /**\n     * Computes the length of vector (same as length)\n     * @param v - vector.\n     * @returns length of vector.\n     */\n    const len = length;\n    /**\n     * Computes the square of the length of vector\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    function lengthSq(v) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        return v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3;\n    }\n    /**\n     * Computes the square of the length of vector (same as lengthSq)\n     * @param v - vector.\n     * @returns square of the length of vector.\n     */\n    const lenSq = lengthSq;\n    /**\n     * Computes the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    function distance(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        const dw = a[3] - b[3];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz + dw * dw);\n    }\n    /**\n     * Computes the distance between 2 points (same as distance)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns distance between a and b\n     */\n    const dist = distance;\n    /**\n     * Computes the square of the distance between 2 points\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    function distanceSq(a, b) {\n        const dx = a[0] - b[0];\n        const dy = a[1] - b[1];\n        const dz = a[2] - b[2];\n        const dw = a[3] - b[3];\n        return dx * dx + dy * dy + dz * dz + dw * dw;\n    }\n    /**\n     * Computes the square of the distance between 2 points (same as distanceSq)\n     * @param a - vector.\n     * @param b - vector.\n     * @returns square of the distance between a and b\n     */\n    const distSq = distanceSq;\n    /**\n     * Divides a vector by its Euclidean length and returns the quotient.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The normalized vector.\n     */\n    function normalize(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        const len = Math.sqrt(v0 * v0 + v1 * v1 + v2 * v2 + v3 * v3);\n        if (len > 0.00001) {\n            newDst[0] = v0 / len;\n            newDst[1] = v1 / len;\n            newDst[2] = v2 / len;\n            newDst[3] = v3 / len;\n        }\n        else {\n            newDst[0] = 0;\n            newDst[1] = 0;\n            newDst[2] = 0;\n            newDst[3] = 0;\n        }\n        return newDst;\n    }\n    /**\n     * Negates a vector.\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns -v.\n     */\n    function negate(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = -v[0];\n        newDst[1] = -v[1];\n        newDst[2] = -v[2];\n        newDst[3] = -v[3];\n        return newDst;\n    }\n    /**\n     * Copies a vector. (same as {@link vec4.clone})\n     * Also see {@link vec4.create} and {@link vec4.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    function copy(v, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = v[0];\n        newDst[1] = v[1];\n        newDst[2] = v[2];\n        newDst[3] = v[3];\n        return newDst;\n    }\n    /**\n     * Clones a vector. (same as {@link vec4.copy})\n     * Also see {@link vec4.create} and {@link vec4.set}\n     * @param v - The vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns A copy of v.\n     */\n    const clone = copy;\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    function multiply(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] * b[0];\n        newDst[1] = a[1] * b[1];\n        newDst[2] = a[2] * b[2];\n        newDst[3] = a[3] * b[3];\n        return newDst;\n    }\n    /**\n     * Multiplies a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as mul)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of products of entries of a and b.\n     */\n    const mul = multiply;\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length.\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    function divide(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = a[0] / b[0];\n        newDst[1] = a[1] / b[1];\n        newDst[2] = a[2] / b[2];\n        newDst[3] = a[3] / b[3];\n        return newDst;\n    }\n    /**\n     * Divides a vector by another vector (component-wise); assumes a and\n     * b have the same length. (same as divide)\n     * @param a - Operand vector.\n     * @param b - Operand vector.\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The vector of quotients of entries of a and b.\n     */\n    const div = divide;\n    /**\n     * Zero's a vector\n     * @param dst - vector to hold result. If not passed in a new one is created.\n     * @returns The zeroed vector.\n     */\n    function zero(dst) {\n        const newDst = (dst ?? new Ctor(4));\n        newDst[0] = 0;\n        newDst[1] = 0;\n        newDst[2] = 0;\n        newDst[3] = 0;\n        return newDst;\n    }\n    /**\n     * transform vec4 by 4x4 matrix\n     * @param v - the vector\n     * @param m - The matrix.\n     * @param dst - optional vec4 to store result. If not passed a new one is created.\n     * @returns the transformed vector\n     */\n    function transformMat4(v, m, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        const x = v[0];\n        const y = v[1];\n        const z = v[2];\n        const w = v[3];\n        newDst[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n        newDst[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n        newDst[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n        newDst[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n        return newDst;\n    }\n    /**\n     * Treat a 4D vector as a direction and set it's length\n     *\n     * @param a The vec4 to lengthen\n     * @param len The length of the resulting vector\n     * @returns The lengthened vector\n     */\n    function setLength(a, len, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        normalize(a, newDst);\n        return mulScalar(newDst, len, newDst);\n    }\n    /**\n     * Ensure a vector is not longer than a max length\n     *\n     * @param a The vec4 to limit\n     * @param maxLen The longest length of the resulting vector\n     * @returns The vector, shortened to maxLen if it's too long\n     */\n    function truncate(a, maxLen, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        if (length(a) > maxLen) {\n            return setLength(a, maxLen, newDst);\n        }\n        return copy(a, newDst);\n    }\n    /**\n     * Return the vector exactly between 2 endpoint vectors\n     *\n     * @param a Endpoint 1\n     * @param b Endpoint 2\n     * @returns The vector exactly residing between endpoints 1 and 2\n     */\n    function midpoint(a, b, dst) {\n        const newDst = (dst ?? new Ctor(4));\n        return lerp(a, b, 0.5, newDst);\n    }\n    return {\n        create,\n        fromValues,\n        set,\n        ceil,\n        floor,\n        round,\n        clamp,\n        add,\n        addScaled,\n        subtract,\n        sub,\n        equalsApproximately,\n        equals,\n        lerp,\n        lerpV,\n        max,\n        min,\n        mulScalar,\n        scale,\n        divScalar,\n        inverse,\n        invert,\n        dot,\n        length,\n        len,\n        lengthSq,\n        lenSq,\n        distance,\n        dist,\n        distanceSq,\n        distSq,\n        normalize,\n        negate,\n        copy,\n        clone,\n        multiply,\n        mul,\n        divide,\n        div,\n        zero,\n        transformMat4,\n        setLength,\n        truncate,\n        midpoint,\n    };\n}\nconst cache = new Map();\n/**\n *\n * Vec4 math functions.\n *\n * Almost all functions take an optional `newDst` argument. If it is not passed in the\n * functions will create a new `Vec4`. In other words you can do this\n *\n *     const v = vec4.cross(v1, v2);  // Creates a new Vec4 with the cross product of v1 x v2.\n *\n * or\n *\n *     const v = vec4.create();\n *     vec4.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always safe to pass any vector as the destination. So for example\n *\n *     vec4.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n */\nfunction getAPI(Ctor) {\n    let api = cache.get(Ctor);\n    if (!api) {\n        api = getAPIImpl(Ctor);\n        cache.set(Ctor, api);\n    }\n    return api;\n}\n\n/**\n * Some docs\n * @namespace wgpu-matrix\n */\n/**\n * Generate wgpu-matrix API for type\n */\nfunction wgpuMatrixAPI(Mat3Ctor, Mat4Ctor, QuatCtor, Vec2Ctor, Vec3Ctor, Vec4Ctor) {\n    return {\n        /** @namespace mat3 */\n        mat3: getAPI$3(Mat3Ctor),\n        /** @namespace mat4 */\n        mat4: getAPI$2(Mat4Ctor),\n        /** @namespace quat */\n        quat: getAPI$1(QuatCtor),\n        /** @namespace vec2 */\n        vec2: getAPI$5(Vec2Ctor),\n        /** @namespace vec3 */\n        vec3: getAPI$4(Vec3Ctor),\n        /** @namespace vec4 */\n        vec4: getAPI(Vec4Ctor),\n    };\n}\nconst { \n/**\n * 3x3 Matrix functions that default to returning `Float32Array`\n * @namespace\n */\nmat3, \n/**\n * 4x4 Matrix functions that default to returning `Float32Array`\n * @namespace\n */\nmat4, \n/**\n * Quaternion functions that default to returning `Float32Array`\n * @namespace\n */\nquat, \n/**\n * Vec2 functions that default to returning `Float32Array`\n * @namespace\n */\nvec2, \n/**\n * Vec3 functions that default to returning `Float32Array`\n * @namespace\n */\nvec3, \n/**\n * Vec3 functions that default to returning `Float32Array`\n * @namespace\n */\nvec4, } = wgpuMatrixAPI(Float32Array, Float32Array, Float32Array, Float32Array, Float32Array, Float32Array);\nconst { \n/**\n * 3x3 Matrix functions that default to returning `Float64Array`\n * @namespace\n */\nmat3: mat3d, \n/**\n * 4x4 Matrix functions that default to returning `Float64Array`\n * @namespace\n */\nmat4: mat4d, \n/**\n * Quaternion functions that default to returning `Float64Array`\n * @namespace\n */\nquat: quatd, \n/**\n * Vec2 functions that default to returning `Float64Array`\n * @namespace\n */\nvec2: vec2d, \n/**\n * Vec3 functions that default to returning `Float64Array`\n * @namespace\n */\nvec3: vec3d, \n/**\n * Vec3 functions that default to returning `Float64Array`\n * @namespace\n */\nvec4: vec4d, } = wgpuMatrixAPI(Float64Array, Float64Array, Float64Array, Float64Array, Float64Array, Float64Array);\nconst { \n/**\n * 3x3 Matrix functions that default to returning `number[]`\n * @namespace\n */\nmat3: mat3n, \n/**\n * 4x4 Matrix functions that default to returning `number[]`\n * @namespace\n */\nmat4: mat4n, \n/**\n * Quaternion functions that default to returning `number[]`\n * @namespace\n */\nquat: quatn, \n/**\n * Vec2 functions that default to returning `number[]`\n * @namespace\n */\nvec2: vec2n, \n/**\n * Vec3 functions that default to returning `number[]`\n * @namespace\n */\nvec3: vec3n, \n/**\n * Vec3 functions that default to returning `number[]`\n * @namespace\n */\nvec4: vec4n, } = wgpuMatrixAPI(ZeroArray, Array, Array, Array, Array, Array);\n\nexport { mat3, mat3d, mat3n, mat4, mat4d, mat4n, quat, quatd, quatn, utils, vec2, vec2d, vec2n, vec3, vec3d, vec3n, vec4, vec4d, vec4n };\n//# sourceMappingURL=wgpu-matrix.module.js.map\n"],"names":["VK_FORMAT_R8_UNORM","VK_FORMAT_R8_SNORM","VK_FORMAT_R8_UINT","VK_FORMAT_R8_SINT","VK_FORMAT_R8G8_UNORM","VK_FORMAT_R8G8_SNORM","VK_FORMAT_R8G8_UINT","VK_FORMAT_R8G8_SINT","VK_FORMAT_R8G8B8A8_UNORM","VK_FORMAT_R8G8B8A8_SNORM","VK_FORMAT_R8G8B8A8_UINT","VK_FORMAT_R8G8B8A8_SINT","VK_FORMAT_R8G8B8A8_SRGB","VK_FORMAT_B8G8R8A8_UNORM","VK_FORMAT_B8G8R8A8_SRGB","VK_FORMAT_A2R10G10B10_UNORM_PACK32","VK_FORMAT_A2R10G10B10_UINT_PACK32","VK_FORMAT_R16_UINT","VK_FORMAT_R16_SINT","VK_FORMAT_R16_SFLOAT","VK_FORMAT_R16G16_UINT","VK_FORMAT_R16G16_SINT","VK_FORMAT_R16G16_SFLOAT","VK_FORMAT_R16G16B16A16_UINT","VK_FORMAT_R16G16B16A16_SINT","VK_FORMAT_R16G16B16A16_SFLOAT","VK_FORMAT_R32_UINT","VK_FORMAT_R32_SINT","VK_FORMAT_R32_SFLOAT","VK_FORMAT_R32G32_UINT","VK_FORMAT_R32G32_SINT","VK_FORMAT_R32G32_SFLOAT","VK_FORMAT_R32G32B32A32_UINT","VK_FORMAT_R32G32B32A32_SINT","VK_FORMAT_R32G32B32A32_SFLOAT","VK_FORMAT_B10G11R11_UFLOAT_PACK32","VK_FORMAT_E5B9G9R9_UFLOAT_PACK32","VK_FORMAT_BC1_RGBA_UNORM_BLOCK","VK_FORMAT_BC1_RGBA_SRGB_BLOCK","VK_FORMAT_BC2_UNORM_BLOCK","VK_FORMAT_BC2_SRGB_BLOCK","VK_FORMAT_BC3_UNORM_BLOCK","VK_FORMAT_BC3_SRGB_BLOCK","VK_FORMAT_BC4_UNORM_BLOCK","VK_FORMAT_BC4_SNORM_BLOCK","VK_FORMAT_BC5_UNORM_BLOCK","VK_FORMAT_BC5_SNORM_BLOCK","VK_FORMAT_BC6H_UFLOAT_BLOCK","VK_FORMAT_BC6H_SFLOAT_BLOCK","VK_FORMAT_BC7_UNORM_BLOCK","VK_FORMAT_BC7_SRGB_BLOCK","Uint8Array","ZeroArray","OriginalConstructor","modifier","a","fill","constructor","args","super","this","EPSILON","cache$5","Map","getAPI$5","Ctor","api","get","create","x","y","newDst","undefined","subtract","b","dst","lerp","t","mulScalar","v","k","inverse","dot","length","v0","v1","Math","sqrt","lengthSq","distance","dx","dy","distanceSq","normalize","len","copy","multiply","divide","setLength","fromValues","set","ceil","floor","round","clamp","min","max","add","addScaled","scale","angle","ax","ay","bx","by","mag","cosine","acos","sub","equalsApproximately","abs","equals","lerpV","divScalar","invert","cross","z","lenSq","dist","distSq","negate","clone","mul","div","random","PI","cos","sin","zero","transformMat4","m","transformMat3","rotate","rad","p0","p1","sinC","cosC","truncate","maxLen","midpoint","getAPIImpl$5","cache$4","getAPI$4","v2","dz","az","bz","t1","t2","zScale","w","transformMat4Upper3x3","transformQuat","q","qx","qy","qz","w2","uvX","uvY","uvZ","getTranslation","getAxis","axis","off","getScaling","xx","xy","xz","yx","yy","yz","zx","zy","zz","rotateX","p","r","rotateY","rotateZ","getAPIImpl$4","cache$3","getAPI$3","vec2","vec3","identity","m00","m01","m02","m10","m11","m12","m20","m21","m22","b01","b11","b21","invDet","a00","a01","a02","a10","a11","a12","a20","a21","a22","b00","b02","b10","b12","b20","b22","rotation","angleInRadians","c","s","v3","v4","v5","v6","v7","v8","fromMat4","m4","fromQuat","x2","y2","z2","wx","wy","wz","transpose","determinant","setTranslation","setAxis","get3DScaling","translation","translate","rotationX","rotationY","rotationZ","scaling","uniformScaling","uniformScale","scaling3D","scale3D","uniformScaling3D","uniformScale3D","getAPIImpl$3","cache$2","getAPI$2","m03","m13","m23","m30","m31","m32","m33","tmp0","tmp1","tmp2","tmp3","tmp4","tmp5","tmp6","tmp7","tmp8","tmp9","tmp10","tmp11","tmp12","tmp13","tmp14","tmp15","tmp16","tmp17","tmp18","tmp19","tmp20","tmp21","tmp22","tmp23","t0","t3","d","a03","a13","a23","a30","a31","a32","a33","b03","b13","b23","b30","b31","b32","b33","xAxis","yAxis","zAxis","axisRotation","n","oneMinusCosine","axisRotate","r00","r01","r02","r10","r11","r12","r20","r21","r22","v9","v10","v11","v12","v13","v14","v15","fromMat3","m3","perspective","fieldOfViewYInRadians","aspect","zNear","zFar","f","tan","Number","isFinite","rangeInv","perspectiveReverseZ","Infinity","ortho","left","right","bottom","top","near","far","frustum","frustumReverseZ","aim","position","target","up","cameraAim","eye","lookAt","getAPIImpl$2","cache$1","getAPI$1","fromAxisAngle","halfAngle","aw","bw","slerp","scale0","scale1","cosOmega","omega","sinOmega","tempVec3","xUnitVec3","yUnitVec3","tempQuat1","tempQuat2","toAxisAngle","qw","a0","a1","a2","a3","invDot","conjugate","fromMat","trace","root","invRoot","i","j","fromEuler","xAngleInRadians","yAngleInRadians","zAngleInRadians","order","xHalfAngle","yHalfAngle","zHalfAngle","sx","cx","sy","cy","sz","cz","Error","rotationTo","aUnit","bUnit","sqlerp","getAPIImpl$1","cache","getAPI","dw","getAPIImpl","wgpuMatrixAPI","Mat3Ctor","Mat4Ctor","QuatCtor","Vec2Ctor","Vec3Ctor","Vec4Ctor","mat3","mat4","quat","vec4","Float32Array","mat3d","mat4d","quatd","vec2d","vec3d","vec4d","Float64Array","mat3n","mat4n","quatn","vec2n","vec3n","vec4n","Array"],"sourceRoot":""}