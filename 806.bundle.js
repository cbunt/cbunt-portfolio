"use strict";(self.webpackChunkcbunt_portfolio=self.webpackChunkcbunt_portfolio||[]).push([[806],{360:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  A: () => (/* binding */ descriptor_map)\n});\n\n// EXTERNAL MODULE: ./src/rendering/default-forward-pass/pipeline-feature-flags.ts\nvar pipeline_feature_flags = __webpack_require__(9274);\n;// ./src/utils/shader.ts\nfunction resolveBranch(branch) {\n    return typeof branch === 'string' ? branch : branch();\n}\nclass PreprocessorStatement {\n    constructor(cond, branch) {\n        this.else = (branch) => this.res ?? resolveBranch(branch);\n        this.toString = () => this.res ?? '';\n        if (cond)\n            this.res = resolveBranch(branch);\n    }\n    elif(cond, branch) {\n        if (cond)\n            this.res ??= resolveBranch(branch);\n        return this;\n    }\n    get [Symbol.toStringTag]() { return this.toString(); }\n}\nfunction preprocessors(flags) {\n    return {\n        ifdef(sym, branch) {\n            return new PreprocessorStatement((flags & sym) === sym, branch);\n        },\n        ifndef(sym, branch) {\n            return new PreprocessorStatement((flags & sym) !== sym, branch);\n        },\n    };\n}\nfunction wrapWithIncrement(fn, start = 0) {\n    return () => fn(start++);\n}\n\n// EXTERNAL MODULE: ./src/rendering/global-uniforms.ts\nvar global_uniforms = __webpack_require__(992);\n;// ./src/shaders/forward.shader.ts\n/* eslint-disable @typescript-eslint/indent */\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\n\n\n\nfunction getBindgroupInfo(flags) {\n    const entries = [];\n    function pushItem(item) {\n        entries.push({ ...item, binding: entries.length, visibility: GPUShaderStage.FRAGMENT | GPUShaderStage.VERTEX });\n    }\n    pushItem({ buffer: { type: 'uniform' } });\n    pushItem({ sampler: {} });\n    pushItem({ texture: { viewDimension: '2d' } });\n    pushItem({ sampler: {} });\n    pushItem({ texture: { viewDimension: '2d' } });\n    pushItem({ sampler: {} });\n    pushItem({ texture: { viewDimension: '2d' } });\n    if (flags & pipeline_feature_flags/* PipelineFeatureFlags */.Ot.Emissive) {\n        pushItem({ sampler: {} });\n        pushItem({ texture: { viewDimension: '2d' } });\n    }\n    return { label: (0,pipeline_feature_flags/* featureFlagsToString */.UZ)(flags), entries };\n}\n/**\n * @param flags A flag enum containing the features this code should be generated for\n * @returns A string containing preprocessed wgsl shader code for the given features\n */\nfunction include(flags) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { ifdef } = preprocessors(flags);\n    const vertexInLocation = wrapWithIncrement((idx) => /* wgsl */ `@location(${idx})`);\n    const varyingsLocation = wrapWithIncrement((idx) => /* wgsl */ `@location(${idx})`);\n    const materialBinding = wrapWithIncrement((idx) => /* wgsl */ `\n        @group(1) @binding(${idx})\n    `);\n    const varyings = /* wgsl */ `\n        ${varyingsLocation()} pos: vec3f,\n        ${varyingsLocation()} camPos: vec3f,\n        ${varyingsLocation()} uv: vec2f,\n\n        ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexNormals, () => /* wgsl */ `\n            ${varyingsLocation()} tangent: vec4f,\n            ${varyingsLocation()} normal: vec3f,\n        `)}\n\n        ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexColors, () => /* wgsl */ `\n            ${varyingsLocation()} color: vec4f,\n        `)}\n    `;\n    return /* wgsl */ `\n        ${global_uniforms/* default */.A.code(0)}\n\n        struct ForwardOut {\n            @location(${0 /* GBufferGroupIndices.Normal */}) normal: vec4f,\n            @location(${1 /* GBufferGroupIndices.Albedo */}) albedo: vec4f,\n            @location(${2 /* GBufferGroupIndices.Emission */}) emission: vec4f,\n            @location(${3 /* GBufferGroupIndices.MetallicRoughness */}) metallicRoughness: vec4f,\n        }\n\n        struct MaterialProperties {\n            baseColorFactor: vec4f,\n            metallicFactor: f32,\n            roughnessFactor: f32,\n\n            ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.AlphaCutoff, 'alphaCutoff: f32,')}\n            ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.Emissive, 'emissiveFactor: vec3f,')}\n        }\n\n        ${materialBinding()} var<uniform> material: MaterialProperties;\n\n        ${materialBinding()} var baseColorSampler: sampler;\n        ${materialBinding()} var baseColorTexture: texture_2d<f32>;\n\n        ${materialBinding()} var normalSampler: sampler;\n        ${materialBinding()} var normalTexture: texture_2d<f32>;\n\n        ${materialBinding()} var metallicRoughnessSampler: sampler;\n        ${materialBinding()} var metallicRoughnessTexture: texture_2d<f32>;\n\n        ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.Emissive, () => /* wgsl */ `\n            ${materialBinding()} var emissionSampler: sampler;\n            ${materialBinding()} var emissionTexture: texture_2d<f32>;\n        `)}\n\n        struct ModelProperties {\n            modelToWorldMatrix: mat4x4f,\n\n            ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexNormals, 'normalMatrix: mat3x3f,')}\n        }\n\n        @group(2) @binding(0) var<storage, read> instances : array<ModelProperties>;\n\n        struct VertIn {\n            @builtin(instance_index) instance: u32,\n            ${vertexInLocation()} pos: vec3f,\n            ${vertexInLocation()} uv: vec2f,\n\n            ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexNormals, () => /* wgsl */ `\n                ${vertexInLocation()} tangent: vec4f,\n                ${vertexInLocation()} normal: vec3f,\n            `)}\n\n            ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexColors, () => /* wgsl */ `\n                ${vertexInLocation()} color: vec4f,\n            `)}\n        }\n\n        struct VertOut {\n            ${varyings}\n            @builtin(position) Position: vec4f,\n        }\n\n        struct FragIn {\n            ${varyings}\n\n            ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexNormals | pipeline_feature_flags/* PipelineFeatureFlags */.Ot.DoubleSided, /* wgsl */ `\n                @builtin(front_facing) front_facing: bool,\n            `)}\n        }\n\n        fn sRGBToLinear(color: vec3f) -> vec3f {\n            return select( \n                pow(color * 0.9478672986 + 0.0521327014, vec3(2.4)), \n                color * 0.0773993808, \n                color <= vec3(0.04045), \n            );\n        }  \n\n        @vertex \n        fn vs(inData: VertIn) -> VertOut {\n            var vsOut: VertOut;\n            let instance = instances[inData.instance];\n            let worldPos = instance.modelToWorldMatrix * vec4f(inData.pos, 1);\n            vsOut.pos = worldPos.xyz;\n            vsOut.Position = globals.worldToClip * worldPos;\n            vsOut.camPos = globals.inverseWorldToView[3].xyz;\n            vsOut.uv = inData.uv;\n\n            ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexNormals, /* wgsl */ `\n                vsOut.normal = normalize(instance.normalMatrix * inData.normal);\n                let wsTangent = normalize((instance.modelToWorldMatrix * vec4(inData.tangent.xyz, 0.0)).xyz);\n                vsOut.tangent = vec4(wsTangent, inData.tangent.w);\n            `)}\n\n            return vsOut;\n        }\n\n        // much of this code is adapted from https://learnopengl.com/PBR\n        @fragment\n        fn fs(inData: FragIn) -> ForwardOut {\n            var out: ForwardOut;\n            let rawColor: vec4f = textureSample(baseColorTexture, baseColorSampler, inData.uv);\n\n            ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.AlphaCutoff, /* wgsl */ `\n                var alpha = rawColor.a * material.baseColorFactor.a;\n\n                ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexColors, /* wgsl */ `\n                    alpha *= inData.color.a;\n                `)}\n\n                if (alpha <= material.alphaCutoff) { \n                    discard;\n                }\n            `)}\n\n            out.albedo = vec4f(rawColor.rgb * material.baseColorFactor.rgb, 1);\n\n            ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexColors, /* wgsl */ `\n                out.albedo *= vec4f(inData.color.rgb, 1);\n            `)}\n\n            let metallicRoughness = textureSample(metallicRoughnessTexture, metallicRoughnessSampler, inData.uv);\n            out.metallicRoughness.r = saturate(metallicRoughness.b * material.metallicFactor);\n            out.metallicRoughness.g = saturate(metallicRoughness.g * material.roughnessFactor);\n\n            ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexNormals, /* wgsl */ `\n                let normalSample = textureSample(normalTexture, normalSampler, inData.uv).xyz;\n                let tangentNormal = normalize(normalSample * 2.0 - 1.0);\n                let bitangent =inData.tangent.w * cross(inData.normal, inData.tangent.xyz);\n                let tbn = mat3x3f(normalize(inData.tangent.xyz), bitangent, normalize(inData.normal));\n                var normal = normalize(tbn * tangentNormal);\n\n                ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.DoubleSided, /* wgsl */ `\n                    if (!inData.front_facing) { normal *= -1.0; }\n                `)}\n            `).else(/* wgsl */ `\n                let fdx = dpdx(inData.pos);\n                let fdy = dpdy(inData.pos);\n                let normal = normalize(cross(fdx, fdy));\n            `)}\n\n            out.normal = vec4f(normal, 1);\n\n            ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.Emissive, /* wgsl */ `\n                let emission = textureSample(emissionTexture, emissionSampler, inData.uv).rgb;\n                out.emission = vec4f(emission, 1);\n            `)}\n\n            return out;\n        }\n    `;\n}\n\n;// ./src/rendering/default-forward-pass/descriptor-map.ts\n\n\n\nclass DescriptorMap {\n    constructor(device, gbuffer, globals) {\n        this.device = device;\n        this.gbuffer = gbuffer;\n        this.globals = globals;\n        this.pipelineLayouts = {};\n        this.primitiveStates = {};\n        this.vertexLayouts = {};\n        this.shaderModules = {};\n        this.bindgroupLayouts = {};\n        this.samplers = {};\n        this.forwardBindgroupLayout = this.device.createBindGroupLayout({\n            label: `forward material`,\n            entries: [{\n                    binding: 0,\n                    visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,\n                    buffer: { type: 'read-only-storage' },\n                }],\n        });\n    }\n    getSampler(descriptor) {\n        const key = JSON.stringify(descriptor);\n        this.samplers[key] ??= this.device.createSampler(descriptor);\n        return this.samplers[key];\n    }\n    getVertexLayout(flags) {\n        const masked = flags & pipeline_feature_flags/* VertexBufferLayoutMask */.V3;\n        if (this.vertexLayouts[masked] == null) {\n            const attributes = [\n                { shaderLocation: 0, offset: 0, format: 'float32x3' }, // position\n                { shaderLocation: 1, offset: 12, format: 'float32x2' }, // uv\n            ];\n            let arrayStride = 20;\n            let shaderLocation = 2;\n            if (masked & pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexNormals) {\n                attributes.push({ shaderLocation, offset: arrayStride, format: 'float32x4' }); // tangent\n                attributes.push({ shaderLocation: shaderLocation + 1, offset: arrayStride + 16, format: 'float32x3' }); // normal\n                shaderLocation += 2;\n                arrayStride += 28;\n            }\n            if (masked & pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexColors) {\n                attributes.push({ shaderLocation, offset: arrayStride, format: 'float32x4' }); // color\n                arrayStride += 16;\n            }\n            this.vertexLayouts[masked] = { attributes, arrayStride, stepMode: 'vertex' };\n        }\n        return this.vertexLayouts[masked];\n    }\n    getForwardPipelineLayout(flags) {\n        const masked = flags & pipeline_feature_flags/* PipelineLayoutMask */.FO;\n        this.pipelineLayouts[masked] ??= this.device.createPipelineLayout({\n            label: pipeline_feature_flags/* featureFlagsToString */.UZ(masked),\n            bindGroupLayouts: [\n                this.globals.bindGroupLayout,\n                this.getMaterialBindGroup(flags),\n                this.forwardBindgroupLayout,\n            ],\n        });\n        return this.pipelineLayouts[masked];\n    }\n    getShaderModule(flags) {\n        const masked = flags & pipeline_feature_flags/* CodeMask */.Q7;\n        this.shaderModules[masked] ??= this.device.createShaderModule({\n            label: pipeline_feature_flags/* featureFlagsToString */.UZ(masked),\n            code: include(masked),\n        });\n        return this.shaderModules[masked];\n    }\n    getPrimitiveState(flags) {\n        const masked = flags & pipeline_feature_flags/* PrimitiveStateMask */.XY;\n        this.primitiveStates[masked] ??= {\n            topology: DescriptorMap.flagToTopology[(flags & pipeline_feature_flags/* TopologyFormatMask */.Py)],\n            cullMode: masked & pipeline_feature_flags/* PipelineFeatureFlags */.Ot.DoubleSided ? 'none' : 'back',\n            frontFace: masked & pipeline_feature_flags/* PipelineFeatureFlags */.Ot.ClockwiseWinding ? 'cw' : 'ccw',\n        };\n        return this.primitiveStates[masked];\n    }\n    getMaterialBindGroup(flags) {\n        const masked = flags & pipeline_feature_flags/* MaterialBindgroupLayoutMask */.Wq;\n        this.bindgroupLayouts[masked] ??= this.device.createBindGroupLayout(getBindgroupInfo(masked));\n        return this.bindgroupLayouts[masked];\n    }\n}\nDescriptorMap.flagToTopology = {\n    [pipeline_feature_flags/* PipelineFeatureFlags */.Ot.TriangleList]: 'triangle-list',\n    [pipeline_feature_flags/* PipelineFeatureFlags */.Ot.TriangleStrip]: 'triangle-strip',\n    [pipeline_feature_flags/* PipelineFeatureFlags */.Ot.PointList]: 'point-list',\n    [pipeline_feature_flags/* PipelineFeatureFlags */.Ot.LineList]: 'line-list',\n    [pipeline_feature_flags/* PipelineFeatureFlags */.Ot.LineStrip]: 'line-strip',\n};\n/* harmony default export */ const descriptor_map = (DescriptorMap);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFjLEdBQWdFO0lBQzFGLENBQUMsbURBQW9CLENBQUMsWUFBWSxDQUFDLEVBQUUsZUFBZTtJQUNwRCxDQUFDLG1EQUFvQixDQUFDLGFBQWEsQ0FBQyxFQUFFLGdCQUFnQjtJQUN0RCxDQUFDLG1EQUFvQixDQUFDLFNBQVMsQ0FBQyxFQUFFLFlBQVk7SUFDOUMsQ0FBQyxtREFBb0IsQ0FBQyxRQUFRLENBQUMsRUFBRSxXQUFXO0lBQzVDLENBQUMsbURBQW9CLENBQUMsU0FBUyxDQUFDLEVBQUUsWUFBWTtDQUNqRCxDQUFDO3FEQVBlLGFBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYnVudC1wb3J0Zm9saW8vLi9zcmMvdXRpbHMvc2hhZGVyLnRzP2ExYzAiLCJ3ZWJwYWNrOi8vY2J1bnQtcG9ydGZvbGlvLy4vc3JjL3NoYWRlcnMvZm9yd2FyZC5zaGFkZXIudHM/MjI1YyIsIndlYnBhY2s6Ly9jYnVudC1wb3J0Zm9saW8vLi9zcmMvcmVuZGVyaW5nL2RlZmF1bHQtZm9yd2FyZC1wYXNzL2Rlc2NyaXB0b3ItbWFwLnRzPzJmZjciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHR5cGUgQnJhbmNoID0gc3RyaW5nIHwgKCgpID0+IHN0cmluZyk7XHJcblxyXG5mdW5jdGlvbiByZXNvbHZlQnJhbmNoKGJyYW5jaDogQnJhbmNoKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIGJyYW5jaCA9PT0gJ3N0cmluZycgPyBicmFuY2ggOiBicmFuY2goKTtcclxufVxyXG5cclxuY2xhc3MgUHJlcHJvY2Vzc29yU3RhdGVtZW50IHtcclxuICAgIHJlcz86IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihjb25kOiBib29sZWFuLCBicmFuY2g6IEJyYW5jaCkge1xyXG4gICAgICAgIGlmIChjb25kKSB0aGlzLnJlcyA9IHJlc29sdmVCcmFuY2goYnJhbmNoKTtcclxuICAgIH1cclxuXHJcbiAgICBlbGlmKGNvbmQ6IGJvb2xlYW4sIGJyYW5jaDogQnJhbmNoKSB7XHJcbiAgICAgICAgaWYgKGNvbmQpIHRoaXMucmVzID8/PSByZXNvbHZlQnJhbmNoKGJyYW5jaCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZWxzZSA9IChicmFuY2g6IEJyYW5jaCkgPT4gdGhpcy5yZXMgPz8gcmVzb2x2ZUJyYW5jaChicmFuY2gpO1xyXG5cclxuICAgIHRvU3RyaW5nID0gKCkgPT4gdGhpcy5yZXMgPz8gJyc7XHJcblxyXG4gICAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkgeyByZXR1cm4gdGhpcy50b1N0cmluZygpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwcmVwcm9jZXNzb3JzKGZsYWdzOiBudW1iZXIpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaWZkZWYoc3ltOiBudW1iZXIsIGJyYW5jaDogQnJhbmNoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJlcHJvY2Vzc29yU3RhdGVtZW50KChmbGFncyAmIHN5bSkgPT09IHN5bSwgYnJhbmNoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGlmbmRlZihzeW06IG51bWJlciwgYnJhbmNoOiBCcmFuY2gpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcmVwcm9jZXNzb3JTdGF0ZW1lbnQoKGZsYWdzICYgc3ltKSAhPT0gc3ltLCBicmFuY2gpO1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gd3JhcFdpdGhJbmNyZW1lbnQ8VD4oZm46IChjb3VudGVyOiBudW1iZXIpID0+IFQsIHN0YXJ0ID0gMCk6ICgpID0+IFQge1xyXG4gICAgcmV0dXJuICgpID0+IGZuKHN0YXJ0KyspO1xyXG59XHJcbiIsIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9pbmRlbnQgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9yZXN0cmljdC10ZW1wbGF0ZS1leHByZXNzaW9ucyAqL1xuXG5pbXBvcnQgeyBQaXBlbGluZUZlYXR1cmVGbGFncywgZmVhdHVyZUZsYWdzVG9TdHJpbmcgfSBmcm9tICcuLi9yZW5kZXJpbmcvZGVmYXVsdC1mb3J3YXJkLXBhc3MvcGlwZWxpbmUtZmVhdHVyZS1mbGFncyc7XG5pbXBvcnQgeyBwcmVwcm9jZXNzb3JzLCB3cmFwV2l0aEluY3JlbWVudCB9IGZyb20gJy4uL3V0aWxzL3NoYWRlcic7XG5pbXBvcnQgR2xvYmFsVW5pZm9ybXMgZnJvbSAnLi4vcmVuZGVyaW5nL2dsb2JhbC11bmlmb3Jtcyc7XG5pbXBvcnQgeyBHQnVmZmVyR3JvdXBJbmRpY2VzIH0gZnJvbSAnLi4vcmVuZGVyaW5nL2didWZmZXInO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmluZGdyb3VwSW5mbyhmbGFnczogUGlwZWxpbmVGZWF0dXJlRmxhZ3MpOiBHUFVCaW5kR3JvdXBMYXlvdXREZXNjcmlwdG9yIHtcbiAgICBjb25zdCBlbnRyaWVzOiBHUFVCaW5kR3JvdXBMYXlvdXRFbnRyeVtdID0gW107XG5cbiAgICBmdW5jdGlvbiBwdXNoSXRlbShpdGVtOiBPbWl0PEdQVUJpbmRHcm91cExheW91dEVudHJ5LCAnYmluZGluZycgfCAndmlzaWJpbGl0eSc+KSB7XG4gICAgICAgIGVudHJpZXMucHVzaCh7IC4uLml0ZW0sIGJpbmRpbmc6IGVudHJpZXMubGVuZ3RoLCB2aXNpYmlsaXR5OiBHUFVTaGFkZXJTdGFnZS5GUkFHTUVOVCB8IEdQVVNoYWRlclN0YWdlLlZFUlRFWCB9KTtcbiAgICB9XG5cbiAgICBwdXNoSXRlbSh7IGJ1ZmZlcjogeyB0eXBlOiAndW5pZm9ybScgfSB9KTtcblxuICAgIHB1c2hJdGVtKHsgc2FtcGxlcjoge30gfSk7XG4gICAgcHVzaEl0ZW0oeyB0ZXh0dXJlOiB7IHZpZXdEaW1lbnNpb246ICcyZCcgfSB9KTtcblxuICAgIHB1c2hJdGVtKHsgc2FtcGxlcjoge30gfSk7XG4gICAgcHVzaEl0ZW0oeyB0ZXh0dXJlOiB7IHZpZXdEaW1lbnNpb246ICcyZCcgfSB9KTtcblxuICAgIHB1c2hJdGVtKHsgc2FtcGxlcjoge30gfSk7XG4gICAgcHVzaEl0ZW0oeyB0ZXh0dXJlOiB7IHZpZXdEaW1lbnNpb246ICcyZCcgfSB9KTtcblxuICAgIGlmIChmbGFncyAmIFBpcGVsaW5lRmVhdHVyZUZsYWdzLkVtaXNzaXZlKSB7XG4gICAgICAgIHB1c2hJdGVtKHsgc2FtcGxlcjoge30gfSk7XG4gICAgICAgIHB1c2hJdGVtKHsgdGV4dHVyZTogeyB2aWV3RGltZW5zaW9uOiAnMmQnIH0gfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgbGFiZWw6IGZlYXR1cmVGbGFnc1RvU3RyaW5nKGZsYWdzKSwgZW50cmllcyB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSBmbGFncyBBIGZsYWcgZW51bSBjb250YWluaW5nIHRoZSBmZWF0dXJlcyB0aGlzIGNvZGUgc2hvdWxkIGJlIGdlbmVyYXRlZCBmb3JcbiAqIEByZXR1cm5zIEEgc3RyaW5nIGNvbnRhaW5pbmcgcHJlcHJvY2Vzc2VkIHdnc2wgc2hhZGVyIGNvZGUgZm9yIHRoZSBnaXZlbiBmZWF0dXJlc1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbmNsdWRlKGZsYWdzOiBQaXBlbGluZUZlYXR1cmVGbGFncykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgICBjb25zdCB7IGlmZGVmIH0gPSBwcmVwcm9jZXNzb3JzKGZsYWdzIGFzIG51bWJlcik7XG4gICAgY29uc3QgdmVydGV4SW5Mb2NhdGlvbiA9IHdyYXBXaXRoSW5jcmVtZW50KChpZHgpID0+IC8qIHdnc2wgKi9gQGxvY2F0aW9uKCR7aWR4fSlgKTtcbiAgICBjb25zdCB2YXJ5aW5nc0xvY2F0aW9uID0gd3JhcFdpdGhJbmNyZW1lbnQoKGlkeCkgPT4gLyogd2dzbCAqL2BAbG9jYXRpb24oJHtpZHh9KWApO1xuXG4gICAgY29uc3QgbWF0ZXJpYWxCaW5kaW5nID0gd3JhcFdpdGhJbmNyZW1lbnQoKGlkeCkgPT4gLyogd2dzbCAqL2BcbiAgICAgICAgQGdyb3VwKDEpIEBiaW5kaW5nKCR7aWR4fSlcbiAgICBgKTtcblxuICAgIGNvbnN0IHZhcnlpbmdzID0gLyogd2dzbCAqL2BcbiAgICAgICAgJHt2YXJ5aW5nc0xvY2F0aW9uKCl9IHBvczogdmVjM2YsXG4gICAgICAgICR7dmFyeWluZ3NMb2NhdGlvbigpfSBjYW1Qb3M6IHZlYzNmLFxuICAgICAgICAke3ZhcnlpbmdzTG9jYXRpb24oKX0gdXY6IHZlYzJmLFxuXG4gICAgICAgICR7aWZkZWYoUGlwZWxpbmVGZWF0dXJlRmxhZ3MuVmVydGV4Tm9ybWFscywgKCkgPT4gLyogd2dzbCAqL2BcbiAgICAgICAgICAgICR7dmFyeWluZ3NMb2NhdGlvbigpfSB0YW5nZW50OiB2ZWM0ZixcbiAgICAgICAgICAgICR7dmFyeWluZ3NMb2NhdGlvbigpfSBub3JtYWw6IHZlYzNmLFxuICAgICAgICBgKX1cblxuICAgICAgICAke2lmZGVmKFBpcGVsaW5lRmVhdHVyZUZsYWdzLlZlcnRleENvbG9ycywgKCkgPT4gLyogd2dzbCAqL2BcbiAgICAgICAgICAgICR7dmFyeWluZ3NMb2NhdGlvbigpfSBjb2xvcjogdmVjNGYsXG4gICAgICAgIGApfVxuICAgIGA7XG5cbiAgICByZXR1cm4gLyogd2dzbCAqL2BcbiAgICAgICAgJHtHbG9iYWxVbmlmb3Jtcy5jb2RlKDApfVxuXG4gICAgICAgIHN0cnVjdCBGb3J3YXJkT3V0IHtcbiAgICAgICAgICAgIEBsb2NhdGlvbigke0dCdWZmZXJHcm91cEluZGljZXMuTm9ybWFsfSkgbm9ybWFsOiB2ZWM0ZixcbiAgICAgICAgICAgIEBsb2NhdGlvbigke0dCdWZmZXJHcm91cEluZGljZXMuQWxiZWRvfSkgYWxiZWRvOiB2ZWM0ZixcbiAgICAgICAgICAgIEBsb2NhdGlvbigke0dCdWZmZXJHcm91cEluZGljZXMuRW1pc3Npb259KSBlbWlzc2lvbjogdmVjNGYsXG4gICAgICAgICAgICBAbG9jYXRpb24oJHtHQnVmZmVyR3JvdXBJbmRpY2VzLk1ldGFsbGljUm91Z2huZXNzfSkgbWV0YWxsaWNSb3VnaG5lc3M6IHZlYzRmLFxuICAgICAgICB9XG5cbiAgICAgICAgc3RydWN0IE1hdGVyaWFsUHJvcGVydGllcyB7XG4gICAgICAgICAgICBiYXNlQ29sb3JGYWN0b3I6IHZlYzRmLFxuICAgICAgICAgICAgbWV0YWxsaWNGYWN0b3I6IGYzMixcbiAgICAgICAgICAgIHJvdWdobmVzc0ZhY3RvcjogZjMyLFxuXG4gICAgICAgICAgICAke2lmZGVmKFBpcGVsaW5lRmVhdHVyZUZsYWdzLkFscGhhQ3V0b2ZmLCAnYWxwaGFDdXRvZmY6IGYzMiwnKX1cbiAgICAgICAgICAgICR7aWZkZWYoUGlwZWxpbmVGZWF0dXJlRmxhZ3MuRW1pc3NpdmUsICdlbWlzc2l2ZUZhY3RvcjogdmVjM2YsJyl9XG4gICAgICAgIH1cblxuICAgICAgICAke21hdGVyaWFsQmluZGluZygpfSB2YXI8dW5pZm9ybT4gbWF0ZXJpYWw6IE1hdGVyaWFsUHJvcGVydGllcztcblxuICAgICAgICAke21hdGVyaWFsQmluZGluZygpfSB2YXIgYmFzZUNvbG9yU2FtcGxlcjogc2FtcGxlcjtcbiAgICAgICAgJHttYXRlcmlhbEJpbmRpbmcoKX0gdmFyIGJhc2VDb2xvclRleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcblxuICAgICAgICAke21hdGVyaWFsQmluZGluZygpfSB2YXIgbm9ybWFsU2FtcGxlcjogc2FtcGxlcjtcbiAgICAgICAgJHttYXRlcmlhbEJpbmRpbmcoKX0gdmFyIG5vcm1hbFRleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcblxuICAgICAgICAke21hdGVyaWFsQmluZGluZygpfSB2YXIgbWV0YWxsaWNSb3VnaG5lc3NTYW1wbGVyOiBzYW1wbGVyO1xuICAgICAgICAke21hdGVyaWFsQmluZGluZygpfSB2YXIgbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlOiB0ZXh0dXJlXzJkPGYzMj47XG5cbiAgICAgICAgJHtpZmRlZihQaXBlbGluZUZlYXR1cmVGbGFncy5FbWlzc2l2ZSwgKCkgPT4gLyogd2dzbCAqL2BcbiAgICAgICAgICAgICR7bWF0ZXJpYWxCaW5kaW5nKCl9IHZhciBlbWlzc2lvblNhbXBsZXI6IHNhbXBsZXI7XG4gICAgICAgICAgICAke21hdGVyaWFsQmluZGluZygpfSB2YXIgZW1pc3Npb25UZXh0dXJlOiB0ZXh0dXJlXzJkPGYzMj47XG4gICAgICAgIGApfVxuXG4gICAgICAgIHN0cnVjdCBNb2RlbFByb3BlcnRpZXMge1xuICAgICAgICAgICAgbW9kZWxUb1dvcmxkTWF0cml4OiBtYXQ0eDRmLFxuXG4gICAgICAgICAgICAke2lmZGVmKFBpcGVsaW5lRmVhdHVyZUZsYWdzLlZlcnRleE5vcm1hbHMsICdub3JtYWxNYXRyaXg6IG1hdDN4M2YsJyl9XG4gICAgICAgIH1cblxuICAgICAgICBAZ3JvdXAoMikgQGJpbmRpbmcoMCkgdmFyPHN0b3JhZ2UsIHJlYWQ+IGluc3RhbmNlcyA6IGFycmF5PE1vZGVsUHJvcGVydGllcz47XG5cbiAgICAgICAgc3RydWN0IFZlcnRJbiB7XG4gICAgICAgICAgICBAYnVpbHRpbihpbnN0YW5jZV9pbmRleCkgaW5zdGFuY2U6IHUzMixcbiAgICAgICAgICAgICR7dmVydGV4SW5Mb2NhdGlvbigpfSBwb3M6IHZlYzNmLFxuICAgICAgICAgICAgJHt2ZXJ0ZXhJbkxvY2F0aW9uKCl9IHV2OiB2ZWMyZixcblxuICAgICAgICAgICAgJHtpZmRlZihQaXBlbGluZUZlYXR1cmVGbGFncy5WZXJ0ZXhOb3JtYWxzLCAoKSA9PiAvKiB3Z3NsICovYFxuICAgICAgICAgICAgICAgICR7dmVydGV4SW5Mb2NhdGlvbigpfSB0YW5nZW50OiB2ZWM0ZixcbiAgICAgICAgICAgICAgICAke3ZlcnRleEluTG9jYXRpb24oKX0gbm9ybWFsOiB2ZWMzZixcbiAgICAgICAgICAgIGApfVxuXG4gICAgICAgICAgICAke2lmZGVmKFBpcGVsaW5lRmVhdHVyZUZsYWdzLlZlcnRleENvbG9ycywgKCkgPT4gLyogd2dzbCAqL2BcbiAgICAgICAgICAgICAgICAke3ZlcnRleEluTG9jYXRpb24oKX0gY29sb3I6IHZlYzRmLFxuICAgICAgICAgICAgYCl9XG4gICAgICAgIH1cblxuICAgICAgICBzdHJ1Y3QgVmVydE91dCB7XG4gICAgICAgICAgICAke3ZhcnlpbmdzfVxuICAgICAgICAgICAgQGJ1aWx0aW4ocG9zaXRpb24pIFBvc2l0aW9uOiB2ZWM0ZixcbiAgICAgICAgfVxuXG4gICAgICAgIHN0cnVjdCBGcmFnSW4ge1xuICAgICAgICAgICAgJHt2YXJ5aW5nc31cblxuICAgICAgICAgICAgJHtpZmRlZihQaXBlbGluZUZlYXR1cmVGbGFncy5WZXJ0ZXhOb3JtYWxzIHwgUGlwZWxpbmVGZWF0dXJlRmxhZ3MuRG91YmxlU2lkZWQsIC8qIHdnc2wgKi9gXG4gICAgICAgICAgICAgICAgQGJ1aWx0aW4oZnJvbnRfZmFjaW5nKSBmcm9udF9mYWNpbmc6IGJvb2wsXG4gICAgICAgICAgICBgKX1cbiAgICAgICAgfVxuXG4gICAgICAgIGZuIHNSR0JUb0xpbmVhcihjb2xvcjogdmVjM2YpIC0+IHZlYzNmIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxlY3QoIFxuICAgICAgICAgICAgICAgIHBvdyhjb2xvciAqIDAuOTQ3ODY3Mjk4NiArIDAuMDUyMTMyNzAxNCwgdmVjMygyLjQpKSwgXG4gICAgICAgICAgICAgICAgY29sb3IgKiAwLjA3NzM5OTM4MDgsIFxuICAgICAgICAgICAgICAgIGNvbG9yIDw9IHZlYzMoMC4wNDA0NSksIFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSAgXG5cbiAgICAgICAgQHZlcnRleCBcbiAgICAgICAgZm4gdnMoaW5EYXRhOiBWZXJ0SW4pIC0+IFZlcnRPdXQge1xuICAgICAgICAgICAgdmFyIHZzT3V0OiBWZXJ0T3V0O1xuICAgICAgICAgICAgbGV0IGluc3RhbmNlID0gaW5zdGFuY2VzW2luRGF0YS5pbnN0YW5jZV07XG4gICAgICAgICAgICBsZXQgd29ybGRQb3MgPSBpbnN0YW5jZS5tb2RlbFRvV29ybGRNYXRyaXggKiB2ZWM0ZihpbkRhdGEucG9zLCAxKTtcbiAgICAgICAgICAgIHZzT3V0LnBvcyA9IHdvcmxkUG9zLnh5ejtcbiAgICAgICAgICAgIHZzT3V0LlBvc2l0aW9uID0gZ2xvYmFscy53b3JsZFRvQ2xpcCAqIHdvcmxkUG9zO1xuICAgICAgICAgICAgdnNPdXQuY2FtUG9zID0gZ2xvYmFscy5pbnZlcnNlV29ybGRUb1ZpZXdbM10ueHl6O1xuICAgICAgICAgICAgdnNPdXQudXYgPSBpbkRhdGEudXY7XG5cbiAgICAgICAgICAgICR7aWZkZWYoUGlwZWxpbmVGZWF0dXJlRmxhZ3MuVmVydGV4Tm9ybWFscywgLyogd2dzbCAqL2BcbiAgICAgICAgICAgICAgICB2c091dC5ub3JtYWwgPSBub3JtYWxpemUoaW5zdGFuY2Uubm9ybWFsTWF0cml4ICogaW5EYXRhLm5vcm1hbCk7XG4gICAgICAgICAgICAgICAgbGV0IHdzVGFuZ2VudCA9IG5vcm1hbGl6ZSgoaW5zdGFuY2UubW9kZWxUb1dvcmxkTWF0cml4ICogdmVjNChpbkRhdGEudGFuZ2VudC54eXosIDAuMCkpLnh5eik7XG4gICAgICAgICAgICAgICAgdnNPdXQudGFuZ2VudCA9IHZlYzQod3NUYW5nZW50LCBpbkRhdGEudGFuZ2VudC53KTtcbiAgICAgICAgICAgIGApfVxuXG4gICAgICAgICAgICByZXR1cm4gdnNPdXQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBtdWNoIG9mIHRoaXMgY29kZSBpcyBhZGFwdGVkIGZyb20gaHR0cHM6Ly9sZWFybm9wZW5nbC5jb20vUEJSXG4gICAgICAgIEBmcmFnbWVudFxuICAgICAgICBmbiBmcyhpbkRhdGE6IEZyYWdJbikgLT4gRm9yd2FyZE91dCB7XG4gICAgICAgICAgICB2YXIgb3V0OiBGb3J3YXJkT3V0O1xuICAgICAgICAgICAgbGV0IHJhd0NvbG9yOiB2ZWM0ZiA9IHRleHR1cmVTYW1wbGUoYmFzZUNvbG9yVGV4dHVyZSwgYmFzZUNvbG9yU2FtcGxlciwgaW5EYXRhLnV2KTtcblxuICAgICAgICAgICAgJHtpZmRlZihQaXBlbGluZUZlYXR1cmVGbGFncy5BbHBoYUN1dG9mZiwgLyogd2dzbCAqL2BcbiAgICAgICAgICAgICAgICB2YXIgYWxwaGEgPSByYXdDb2xvci5hICogbWF0ZXJpYWwuYmFzZUNvbG9yRmFjdG9yLmE7XG5cbiAgICAgICAgICAgICAgICAke2lmZGVmKFBpcGVsaW5lRmVhdHVyZUZsYWdzLlZlcnRleENvbG9ycywgLyogd2dzbCAqL2BcbiAgICAgICAgICAgICAgICAgICAgYWxwaGEgKj0gaW5EYXRhLmNvbG9yLmE7XG4gICAgICAgICAgICAgICAgYCl9XG5cbiAgICAgICAgICAgICAgICBpZiAoYWxwaGEgPD0gbWF0ZXJpYWwuYWxwaGFDdXRvZmYpIHsgXG4gICAgICAgICAgICAgICAgICAgIGRpc2NhcmQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYCl9XG5cbiAgICAgICAgICAgIG91dC5hbGJlZG8gPSB2ZWM0ZihyYXdDb2xvci5yZ2IgKiBtYXRlcmlhbC5iYXNlQ29sb3JGYWN0b3IucmdiLCAxKTtcblxuICAgICAgICAgICAgJHtpZmRlZihQaXBlbGluZUZlYXR1cmVGbGFncy5WZXJ0ZXhDb2xvcnMsIC8qIHdnc2wgKi9gXG4gICAgICAgICAgICAgICAgb3V0LmFsYmVkbyAqPSB2ZWM0ZihpbkRhdGEuY29sb3IucmdiLCAxKTtcbiAgICAgICAgICAgIGApfVxuXG4gICAgICAgICAgICBsZXQgbWV0YWxsaWNSb3VnaG5lc3MgPSB0ZXh0dXJlU2FtcGxlKG1ldGFsbGljUm91Z2huZXNzVGV4dHVyZSwgbWV0YWxsaWNSb3VnaG5lc3NTYW1wbGVyLCBpbkRhdGEudXYpO1xuICAgICAgICAgICAgb3V0Lm1ldGFsbGljUm91Z2huZXNzLnIgPSBzYXR1cmF0ZShtZXRhbGxpY1JvdWdobmVzcy5iICogbWF0ZXJpYWwubWV0YWxsaWNGYWN0b3IpO1xuICAgICAgICAgICAgb3V0Lm1ldGFsbGljUm91Z2huZXNzLmcgPSBzYXR1cmF0ZShtZXRhbGxpY1JvdWdobmVzcy5nICogbWF0ZXJpYWwucm91Z2huZXNzRmFjdG9yKTtcblxuICAgICAgICAgICAgJHtpZmRlZihQaXBlbGluZUZlYXR1cmVGbGFncy5WZXJ0ZXhOb3JtYWxzLCAvKiB3Z3NsICovYFxuICAgICAgICAgICAgICAgIGxldCBub3JtYWxTYW1wbGUgPSB0ZXh0dXJlU2FtcGxlKG5vcm1hbFRleHR1cmUsIG5vcm1hbFNhbXBsZXIsIGluRGF0YS51dikueHl6O1xuICAgICAgICAgICAgICAgIGxldCB0YW5nZW50Tm9ybWFsID0gbm9ybWFsaXplKG5vcm1hbFNhbXBsZSAqIDIuMCAtIDEuMCk7XG4gICAgICAgICAgICAgICAgbGV0IGJpdGFuZ2VudCA9aW5EYXRhLnRhbmdlbnQudyAqIGNyb3NzKGluRGF0YS5ub3JtYWwsIGluRGF0YS50YW5nZW50Lnh5eik7XG4gICAgICAgICAgICAgICAgbGV0IHRibiA9IG1hdDN4M2Yobm9ybWFsaXplKGluRGF0YS50YW5nZW50Lnh5eiksIGJpdGFuZ2VudCwgbm9ybWFsaXplKGluRGF0YS5ub3JtYWwpKTtcbiAgICAgICAgICAgICAgICB2YXIgbm9ybWFsID0gbm9ybWFsaXplKHRibiAqIHRhbmdlbnROb3JtYWwpO1xuXG4gICAgICAgICAgICAgICAgJHtpZmRlZihQaXBlbGluZUZlYXR1cmVGbGFncy5Eb3VibGVTaWRlZCwgLyogd2dzbCAqL2BcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbkRhdGEuZnJvbnRfZmFjaW5nKSB7IG5vcm1hbCAqPSAtMS4wOyB9XG4gICAgICAgICAgICAgICAgYCl9XG4gICAgICAgICAgICBgKS5lbHNlKC8qIHdnc2wgKi9gXG4gICAgICAgICAgICAgICAgbGV0IGZkeCA9IGRwZHgoaW5EYXRhLnBvcyk7XG4gICAgICAgICAgICAgICAgbGV0IGZkeSA9IGRwZHkoaW5EYXRhLnBvcyk7XG4gICAgICAgICAgICAgICAgbGV0IG5vcm1hbCA9IG5vcm1hbGl6ZShjcm9zcyhmZHgsIGZkeSkpO1xuICAgICAgICAgICAgYCl9XG5cbiAgICAgICAgICAgIG91dC5ub3JtYWwgPSB2ZWM0Zihub3JtYWwsIDEpO1xuXG4gICAgICAgICAgICAke2lmZGVmKFBpcGVsaW5lRmVhdHVyZUZsYWdzLkVtaXNzaXZlLCAvKiB3Z3NsICovYFxuICAgICAgICAgICAgICAgIGxldCBlbWlzc2lvbiA9IHRleHR1cmVTYW1wbGUoZW1pc3Npb25UZXh0dXJlLCBlbWlzc2lvblNhbXBsZXIsIGluRGF0YS51dikucmdiO1xuICAgICAgICAgICAgICAgIG91dC5lbWlzc2lvbiA9IHZlYzRmKGVtaXNzaW9uLCAxKTtcbiAgICAgICAgICAgIGApfVxuXG4gICAgICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgICB9XG4gICAgYDtcbn1cbiIsImltcG9ydCB7IFBpcGVsaW5lRmVhdHVyZUZsYWdzIH0gZnJvbSAnLi9waXBlbGluZS1mZWF0dXJlLWZsYWdzJztcbmltcG9ydCAqIGFzIFBpcGVsaW5lRmVhdHVyZXMgZnJvbSAnLi9waXBlbGluZS1mZWF0dXJlLWZsYWdzJztcbmltcG9ydCBpbmNsdWRlLCB7IGdldEJpbmRncm91cEluZm8gYXMgZ2V0QmluZEdyb3VwSW5mbyB9IGZyb20gJy4uLy4uL3NoYWRlcnMvZm9yd2FyZC5zaGFkZXInO1xuXG5pbXBvcnQgR0J1ZmZlciBmcm9tICcuLi9nYnVmZmVyJztcbmltcG9ydCBHbG9iYWxVbmlmb3JtcyBmcm9tICcuLi9nbG9iYWwtdW5pZm9ybXMnO1xuXG50eXBlIFBpcGVsaW5lRmVhdHVyZU1hcDxUPiA9IFBhcnRpYWw8UmVjb3JkPG51bWJlciwgVD4+O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEZXNjcmlwdG9yTWFwIHtcbiAgICBzdGF0aWMgcmVhZG9ubHkgZmxhZ1RvVG9wb2xvZ3k6IFBhcnRpYWw8UmVjb3JkPFBpcGVsaW5lRmVhdHVyZUZsYWdzLCBHUFVQcmltaXRpdmVUb3BvbG9neT4+ID0ge1xuICAgICAgICBbUGlwZWxpbmVGZWF0dXJlRmxhZ3MuVHJpYW5nbGVMaXN0XTogJ3RyaWFuZ2xlLWxpc3QnLFxuICAgICAgICBbUGlwZWxpbmVGZWF0dXJlRmxhZ3MuVHJpYW5nbGVTdHJpcF06ICd0cmlhbmdsZS1zdHJpcCcsXG4gICAgICAgIFtQaXBlbGluZUZlYXR1cmVGbGFncy5Qb2ludExpc3RdOiAncG9pbnQtbGlzdCcsXG4gICAgICAgIFtQaXBlbGluZUZlYXR1cmVGbGFncy5MaW5lTGlzdF06ICdsaW5lLWxpc3QnLFxuICAgICAgICBbUGlwZWxpbmVGZWF0dXJlRmxhZ3MuTGluZVN0cmlwXTogJ2xpbmUtc3RyaXAnLFxuICAgIH07XG5cbiAgICByZWFkb25seSBwaXBlbGluZUxheW91dHM6IFBpcGVsaW5lRmVhdHVyZU1hcDxHUFVQaXBlbGluZUxheW91dD4gPSB7fTtcbiAgICByZWFkb25seSBwcmltaXRpdmVTdGF0ZXM6IFBpcGVsaW5lRmVhdHVyZU1hcDxHUFVQcmltaXRpdmVTdGF0ZT4gPSB7fTtcbiAgICByZWFkb25seSB2ZXJ0ZXhMYXlvdXRzOiBQaXBlbGluZUZlYXR1cmVNYXA8R1BVVmVydGV4QnVmZmVyTGF5b3V0PiA9IHt9O1xuICAgIHJlYWRvbmx5IHNoYWRlck1vZHVsZXM6IFBpcGVsaW5lRmVhdHVyZU1hcDxHUFVTaGFkZXJNb2R1bGU+ID0ge307XG4gICAgcmVhZG9ubHkgYmluZGdyb3VwTGF5b3V0czogUGlwZWxpbmVGZWF0dXJlTWFwPEdQVUJpbmRHcm91cExheW91dD4gPSB7fTtcblxuICAgIHJlYWRvbmx5IHNhbXBsZXJzOiBQYXJ0aWFsPFJlY29yZDxzdHJpbmcsIEdQVVNhbXBsZXI+PiA9IHt9O1xuXG4gICAgcmVhZG9ubHkgZm9yd2FyZEJpbmRncm91cExheW91dCA9IHRoaXMuZGV2aWNlLmNyZWF0ZUJpbmRHcm91cExheW91dCh7XG4gICAgICAgIGxhYmVsOiBgZm9yd2FyZCBtYXRlcmlhbGAsXG4gICAgICAgIGVudHJpZXM6IFt7XG4gICAgICAgICAgICBiaW5kaW5nOiAwLFxuICAgICAgICAgICAgdmlzaWJpbGl0eTogR1BVU2hhZGVyU3RhZ2UuVkVSVEVYIHwgR1BVU2hhZGVyU3RhZ2UuRlJBR01FTlQsXG4gICAgICAgICAgICBidWZmZXI6IHsgdHlwZTogJ3JlYWQtb25seS1zdG9yYWdlJyB9LFxuICAgICAgICB9XSxcbiAgICB9KTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgZGV2aWNlOiBHUFVEZXZpY2UsXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBnYnVmZmVyOiBHQnVmZmVyLFxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgZ2xvYmFsczogR2xvYmFsVW5pZm9ybXMsXG4gICAgKSB7IH1cblxuICAgIGdldFNhbXBsZXIoZGVzY3JpcHRvcjogR1BVU2FtcGxlckRlc2NyaXB0b3IpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gSlNPTi5zdHJpbmdpZnkoZGVzY3JpcHRvcik7XG4gICAgICAgIHRoaXMuc2FtcGxlcnNba2V5XSA/Pz0gdGhpcy5kZXZpY2UuY3JlYXRlU2FtcGxlcihkZXNjcmlwdG9yKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2FtcGxlcnNba2V5XTtcbiAgICB9XG5cbiAgICBnZXRWZXJ0ZXhMYXlvdXQoZmxhZ3M6IFBpcGVsaW5lRmVhdHVyZUZsYWdzKSB7XG4gICAgICAgIGNvbnN0IG1hc2tlZDogUGlwZWxpbmVGZWF0dXJlRmxhZ3MgPSBmbGFncyAmIFBpcGVsaW5lRmVhdHVyZXMuVmVydGV4QnVmZmVyTGF5b3V0TWFzaztcblxuICAgICAgICBpZiAodGhpcy52ZXJ0ZXhMYXlvdXRzW21hc2tlZF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlczogR1BVVmVydGV4QXR0cmlidXRlW10gPSBbXG4gICAgICAgICAgICAgICAgeyBzaGFkZXJMb2NhdGlvbjogMCwgb2Zmc2V0OiAwLCBmb3JtYXQ6ICdmbG9hdDMyeDMnIH0sIC8vIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgeyBzaGFkZXJMb2NhdGlvbjogMSwgb2Zmc2V0OiAxMiwgZm9ybWF0OiAnZmxvYXQzMngyJyB9LCAvLyB1dlxuICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgbGV0IGFycmF5U3RyaWRlID0gMjA7XG4gICAgICAgICAgICBsZXQgc2hhZGVyTG9jYXRpb24gPSAyO1xuXG4gICAgICAgICAgICBpZiAobWFza2VkICYgUGlwZWxpbmVGZWF0dXJlRmxhZ3MuVmVydGV4Tm9ybWFscykge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaCh7IHNoYWRlckxvY2F0aW9uLCBvZmZzZXQ6IGFycmF5U3RyaWRlLCBmb3JtYXQ6ICdmbG9hdDMyeDQnIH0pOyAvLyB0YW5nZW50XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKHsgc2hhZGVyTG9jYXRpb246IHNoYWRlckxvY2F0aW9uICsgMSwgb2Zmc2V0OiBhcnJheVN0cmlkZSArIDE2LCBmb3JtYXQ6ICdmbG9hdDMyeDMnIH0pOyAvLyBub3JtYWxcbiAgICAgICAgICAgICAgICBzaGFkZXJMb2NhdGlvbiArPSAyO1xuICAgICAgICAgICAgICAgIGFycmF5U3RyaWRlICs9IDI4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobWFza2VkICYgUGlwZWxpbmVGZWF0dXJlRmxhZ3MuVmVydGV4Q29sb3JzKSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKHsgc2hhZGVyTG9jYXRpb24sIG9mZnNldDogYXJyYXlTdHJpZGUsIGZvcm1hdDogJ2Zsb2F0MzJ4NCcgfSk7IC8vIGNvbG9yXG4gICAgICAgICAgICAgICAgYXJyYXlTdHJpZGUgKz0gMTY7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudmVydGV4TGF5b3V0c1ttYXNrZWRdID0geyBhdHRyaWJ1dGVzLCBhcnJheVN0cmlkZSwgc3RlcE1vZGU6ICd2ZXJ0ZXgnIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy52ZXJ0ZXhMYXlvdXRzW21hc2tlZF07XG4gICAgfVxuXG4gICAgZ2V0Rm9yd2FyZFBpcGVsaW5lTGF5b3V0KGZsYWdzOiBQaXBlbGluZUZlYXR1cmVGbGFncykge1xuICAgICAgICBjb25zdCBtYXNrZWQ6IFBpcGVsaW5lRmVhdHVyZUZsYWdzID0gZmxhZ3MgJiBQaXBlbGluZUZlYXR1cmVzLlBpcGVsaW5lTGF5b3V0TWFzaztcblxuICAgICAgICB0aGlzLnBpcGVsaW5lTGF5b3V0c1ttYXNrZWRdID8/PSB0aGlzLmRldmljZS5jcmVhdGVQaXBlbGluZUxheW91dCh7XG4gICAgICAgICAgICBsYWJlbDogUGlwZWxpbmVGZWF0dXJlcy5mZWF0dXJlRmxhZ3NUb1N0cmluZyhtYXNrZWQpLFxuICAgICAgICAgICAgYmluZEdyb3VwTGF5b3V0czogW1xuICAgICAgICAgICAgICAgIHRoaXMuZ2xvYmFscy5iaW5kR3JvdXBMYXlvdXQsXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRNYXRlcmlhbEJpbmRHcm91cChmbGFncyksXG4gICAgICAgICAgICAgICAgdGhpcy5mb3J3YXJkQmluZGdyb3VwTGF5b3V0LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucGlwZWxpbmVMYXlvdXRzW21hc2tlZF07XG4gICAgfVxuXG4gICAgZ2V0U2hhZGVyTW9kdWxlKGZsYWdzOiBQaXBlbGluZUZlYXR1cmVGbGFncykge1xuICAgICAgICBjb25zdCBtYXNrZWQ6IFBpcGVsaW5lRmVhdHVyZUZsYWdzID0gZmxhZ3MgJiBQaXBlbGluZUZlYXR1cmVzLkNvZGVNYXNrO1xuICAgICAgICB0aGlzLnNoYWRlck1vZHVsZXNbbWFza2VkXSA/Pz0gdGhpcy5kZXZpY2UuY3JlYXRlU2hhZGVyTW9kdWxlKHtcbiAgICAgICAgICAgIGxhYmVsOiBQaXBlbGluZUZlYXR1cmVzLmZlYXR1cmVGbGFnc1RvU3RyaW5nKG1hc2tlZCksXG4gICAgICAgICAgICBjb2RlOiBpbmNsdWRlKG1hc2tlZCksXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5zaGFkZXJNb2R1bGVzW21hc2tlZF07XG4gICAgfVxuXG4gICAgZ2V0UHJpbWl0aXZlU3RhdGUoZmxhZ3M6IFBpcGVsaW5lRmVhdHVyZUZsYWdzKSB7XG4gICAgICAgIGNvbnN0IG1hc2tlZCA9IGZsYWdzICYgUGlwZWxpbmVGZWF0dXJlcy5QcmltaXRpdmVTdGF0ZU1hc2s7XG5cbiAgICAgICAgdGhpcy5wcmltaXRpdmVTdGF0ZXNbbWFza2VkXSA/Pz0ge1xuICAgICAgICAgICAgdG9wb2xvZ3k6IERlc2NyaXB0b3JNYXAuZmxhZ1RvVG9wb2xvZ3lbKGZsYWdzICYgUGlwZWxpbmVGZWF0dXJlcy5Ub3BvbG9neUZvcm1hdE1hc2spIGFzIFBpcGVsaW5lRmVhdHVyZUZsYWdzXSxcbiAgICAgICAgICAgIGN1bGxNb2RlOiBtYXNrZWQgJiBQaXBlbGluZUZlYXR1cmVGbGFncy5Eb3VibGVTaWRlZCA/ICdub25lJyA6ICdiYWNrJyxcbiAgICAgICAgICAgIGZyb250RmFjZTogbWFza2VkICYgUGlwZWxpbmVGZWF0dXJlRmxhZ3MuQ2xvY2t3aXNlV2luZGluZyA/ICdjdycgOiAnY2N3JyxcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5wcmltaXRpdmVTdGF0ZXNbbWFza2VkXTtcbiAgICB9XG5cbiAgICBnZXRNYXRlcmlhbEJpbmRHcm91cChmbGFnczogUGlwZWxpbmVGZWF0dXJlRmxhZ3MpIHtcbiAgICAgICAgY29uc3QgbWFza2VkID0gZmxhZ3MgJiBQaXBlbGluZUZlYXR1cmVzLk1hdGVyaWFsQmluZGdyb3VwTGF5b3V0TWFzaztcbiAgICAgICAgdGhpcy5iaW5kZ3JvdXBMYXlvdXRzW21hc2tlZF0gPz89IHRoaXMuZGV2aWNlLmNyZWF0ZUJpbmRHcm91cExheW91dChnZXRCaW5kR3JvdXBJbmZvKG1hc2tlZCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5iaW5kZ3JvdXBMYXlvdXRzW21hc2tlZF07XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///360\n")},9274:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FO: () => (/* binding */ PipelineLayoutMask),\n/* harmony export */   Ot: () => (/* binding */ PipelineFeatureFlags),\n/* harmony export */   P7: () => (/* binding */ maskRedundantFeatures),\n/* harmony export */   Py: () => (/* binding */ TopologyFormatMask),\n/* harmony export */   Q7: () => (/* binding */ CodeMask),\n/* harmony export */   UZ: () => (/* binding */ featureFlagsToString),\n/* harmony export */   V3: () => (/* binding */ VertexBufferLayoutMask),\n/* harmony export */   Wq: () => (/* binding */ MaterialBindgroupLayoutMask),\n/* harmony export */   XY: () => (/* binding */ PrimitiveStateMask)\n/* harmony export */ });\n/* unused harmony exports InstanceBufferLayoutMask, MaterialBufferLayoutMask, MaterialMask, featureFlagsToNames */\nvar PipelineFeatureFlags;\n(function (PipelineFeatureFlags) {\n    PipelineFeatureFlags[PipelineFeatureFlags["Defaults"] = 0] = "Defaults";\n    /**\n     * If the meshes have vertex normals.\n     * If absent, meshes are shaded with flat normals.\n    */\n    PipelineFeatureFlags[PipelineFeatureFlags["VertexNormals"] = 1] = "VertexNormals";\n    /**\n     * If the meshes have vertex colors.\n     * If absent, mesh is shaded with a base color texture.\n    */\n    PipelineFeatureFlags[PipelineFeatureFlags["VertexColors"] = 2] = "VertexColors";\n    PipelineFeatureFlags[PipelineFeatureFlags["AlphaCutoff"] = 4] = "AlphaCutoff";\n    PipelineFeatureFlags[PipelineFeatureFlags["Emissive"] = 8] = "Emissive";\n    PipelineFeatureFlags[PipelineFeatureFlags["DoubleSided"] = 16] = "DoubleSided";\n    PipelineFeatureFlags[PipelineFeatureFlags["ClockwiseWinding"] = 32] = "ClockwiseWinding";\n    // Topology formats\n    PipelineFeatureFlags[PipelineFeatureFlags["TriangleList"] = 0] = "TriangleList";\n    PipelineFeatureFlags[PipelineFeatureFlags["TriangleStrip"] = 64] = "TriangleStrip";\n    PipelineFeatureFlags[PipelineFeatureFlags["PointList"] = 128] = "PointList";\n    PipelineFeatureFlags[PipelineFeatureFlags["LineList"] = 192] = "LineList";\n    PipelineFeatureFlags[PipelineFeatureFlags["LineStrip"] = 256] = "LineStrip";\n    PipelineFeatureFlags[PipelineFeatureFlags["Unindexed"] = 320] = "Unindexed";\n    // LINE_LOOP (currently unsupported by webgpu)\n    // TRIANGLE_FAN (currently unsupported by webgpu)\n})(PipelineFeatureFlags || (PipelineFeatureFlags = {}));\nconst TopologyFormatMask = 0x111 << 6;\nconst PrimitiveStateMask = (TopologyFormatMask\n    | PipelineFeatureFlags.DoubleSided\n    | PipelineFeatureFlags.ClockwiseWinding);\nconst CodeMask = ~(TopologyFormatMask\n    | PipelineFeatureFlags.ClockwiseWinding);\nconst InstanceBufferLayoutMask = (PipelineFeatureFlags.VertexNormals);\nconst VertexBufferLayoutMask = (PipelineFeatureFlags.VertexNormals\n    | PipelineFeatureFlags.VertexColors);\nconst MaterialBufferLayoutMask = (PipelineFeatureFlags.AlphaCutoff);\nconst MaterialBindgroupLayoutMask = (MaterialBufferLayoutMask\n    | PipelineFeatureFlags.Emissive);\nconst MaterialMask = (MaterialBindgroupLayoutMask\n    | PipelineFeatureFlags.DoubleSided);\nconst PipelineLayoutMask = (InstanceBufferLayoutMask\n    | MaterialMask);\nfunction featureFlagsToNames(val) {\n    return Object.entries(PipelineFeatureFlags)\n        .flatMap(([key, flag]) => typeof flag === \'number\' && (flag & val) ? key : []);\n}\nfunction featureFlagsToString(val) {\n    return featureFlagsToNames(val).toString();\n}\nfunction maskRedundantFeatures(flags) {\n    let masked = flags;\n    if (masked & PipelineFeatureFlags.DoubleSided)\n        masked &= ~PipelineFeatureFlags.ClockwiseWinding;\n    return masked;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTI3NC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxJQUFZLG9CQThCWDtBQTlCRCxXQUFZLG9CQUFvQjtJQUM1Qix1RUFBWTtJQUVaOzs7TUFHRTtJQUNGLGlGQUFzQjtJQUV0Qjs7O01BR0U7SUFDRiwrRUFBcUI7SUFFckIsNkVBQW9CO0lBQ3BCLHVFQUFpQjtJQUVqQiw4RUFBb0I7SUFDcEIsd0ZBQXlCO0lBRXpCLG1CQUFtQjtJQUNuQiwrRUFBcUI7SUFDckIsa0ZBQXNCO0lBQ3RCLDJFQUFrQjtJQUNsQix5RUFBaUI7SUFDakIsMkVBQWtCO0lBQ2xCLDJFQUFrQjtJQUNsQiw4Q0FBOEM7SUFDOUMsaURBQWlEO0FBQ3JELENBQUMsRUE5Qlcsb0JBQW9CLEtBQXBCLG9CQUFvQixRQThCL0I7QUFFTSxNQUFNLGtCQUFrQixHQUFHLEtBQUssSUFBSSxDQUFDLENBQUM7QUFFdEMsTUFBTSxrQkFBa0IsR0FBRyxDQUM5QixrQkFBa0I7TUFDaEIsb0JBQW9CLENBQUMsV0FBVztNQUNoQyxvQkFBb0IsQ0FBQyxnQkFBZ0IsQ0FDMUMsQ0FBQztBQUVLLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FDckIsa0JBQWtCO01BQ2hCLG9CQUFvQixDQUFDLGdCQUFnQixDQUMxQyxDQUFDO0FBRUssTUFBTSx3QkFBd0IsR0FBRyxDQUNwQyxvQkFBb0IsQ0FBQyxhQUFhLENBQ3JDLENBQUM7QUFFSyxNQUFNLHNCQUFzQixHQUFHLENBQ2xDLG9CQUFvQixDQUFDLGFBQWE7TUFDaEMsb0JBQW9CLENBQUMsWUFBWSxDQUN0QyxDQUFDO0FBRUssTUFBTSx3QkFBd0IsR0FBRyxDQUNwQyxvQkFBb0IsQ0FBQyxXQUFXLENBQ25DLENBQUM7QUFFSyxNQUFNLDJCQUEyQixHQUFHLENBQ3ZDLHdCQUF3QjtNQUN0QixvQkFBb0IsQ0FBQyxRQUFRLENBQ2xDLENBQUM7QUFFSyxNQUFNLFlBQVksR0FBRyxDQUN4QiwyQkFBMkI7TUFDekIsb0JBQW9CLENBQUMsV0FBVyxDQUNyQyxDQUFDO0FBRUssTUFBTSxrQkFBa0IsR0FBRyxDQUM5Qix3QkFBd0I7TUFDdEIsWUFBWSxDQUNqQixDQUFDO0FBRUssU0FBUyxtQkFBbUIsQ0FBQyxHQUFXO0lBQzNDLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztTQUN0QyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsT0FBTyxJQUFJLEtBQUssUUFBUSxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZGLENBQUM7QUFFTSxTQUFTLG9CQUFvQixDQUFDLEdBQVc7SUFDNUMsT0FBTyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUMvQyxDQUFDO0FBRU0sU0FBUyxxQkFBcUIsQ0FBQyxLQUEyQjtJQUM3RCxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDbkIsSUFBSSxNQUFNLEdBQUcsb0JBQW9CLENBQUMsV0FBVztRQUFFLE1BQU0sSUFBSSxDQUFDLG9CQUFvQixDQUFDLGdCQUFnQixDQUFDO0lBQ2hHLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYnVudC1wb3J0Zm9saW8vLi9zcmMvcmVuZGVyaW5nL2RlZmF1bHQtZm9yd2FyZC1wYXNzL3BpcGVsaW5lLWZlYXR1cmUtZmxhZ3MudHM/NGI5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBQaXBlbGluZUZlYXR1cmVGbGFncyB7XG4gICAgRGVmYXVsdHMgPSAwLFxuXG4gICAgLyoqXG4gICAgICogSWYgdGhlIG1lc2hlcyBoYXZlIHZlcnRleCBub3JtYWxzLlxuICAgICAqIElmIGFic2VudCwgbWVzaGVzIGFyZSBzaGFkZWQgd2l0aCBmbGF0IG5vcm1hbHMuXG4gICAgKi9cbiAgICBWZXJ0ZXhOb3JtYWxzID0gMSA8PCAwLFxuXG4gICAgLyoqXG4gICAgICogSWYgdGhlIG1lc2hlcyBoYXZlIHZlcnRleCBjb2xvcnMuXG4gICAgICogSWYgYWJzZW50LCBtZXNoIGlzIHNoYWRlZCB3aXRoIGEgYmFzZSBjb2xvciB0ZXh0dXJlLlxuICAgICovXG4gICAgVmVydGV4Q29sb3JzID0gMSA8PCAxLFxuXG4gICAgQWxwaGFDdXRvZmYgPSAxIDw8IDIsXG4gICAgRW1pc3NpdmUgPSAxIDw8IDMsXG5cbiAgICBEb3VibGVTaWRlZCA9IDEgPDwgNCxcbiAgICBDbG9ja3dpc2VXaW5kaW5nID0gMSA8PCA1LFxuXG4gICAgLy8gVG9wb2xvZ3kgZm9ybWF0c1xuICAgIFRyaWFuZ2xlTGlzdCA9IDAgPDwgNixcbiAgICBUcmlhbmdsZVN0cmlwID0gMSA8PCA2LFxuICAgIFBvaW50TGlzdCA9IDIgPDwgNixcbiAgICBMaW5lTGlzdCA9IDMgPDwgNixcbiAgICBMaW5lU3RyaXAgPSA0IDw8IDYsXG4gICAgVW5pbmRleGVkID0gNSA8PCA2LFxuICAgIC8vIExJTkVfTE9PUCAoY3VycmVudGx5IHVuc3VwcG9ydGVkIGJ5IHdlYmdwdSlcbiAgICAvLyBUUklBTkdMRV9GQU4gKGN1cnJlbnRseSB1bnN1cHBvcnRlZCBieSB3ZWJncHUpXG59XG5cbmV4cG9ydCBjb25zdCBUb3BvbG9neUZvcm1hdE1hc2sgPSAweDExMSA8PCA2O1xuXG5leHBvcnQgY29uc3QgUHJpbWl0aXZlU3RhdGVNYXNrID0gKFxuICAgIFRvcG9sb2d5Rm9ybWF0TWFza1xuICAgIHwgUGlwZWxpbmVGZWF0dXJlRmxhZ3MuRG91YmxlU2lkZWRcbiAgICB8IFBpcGVsaW5lRmVhdHVyZUZsYWdzLkNsb2Nrd2lzZVdpbmRpbmdcbik7XG5cbmV4cG9ydCBjb25zdCBDb2RlTWFzayA9IH4oXG4gICAgVG9wb2xvZ3lGb3JtYXRNYXNrXG4gICAgfCBQaXBlbGluZUZlYXR1cmVGbGFncy5DbG9ja3dpc2VXaW5kaW5nXG4pO1xuXG5leHBvcnQgY29uc3QgSW5zdGFuY2VCdWZmZXJMYXlvdXRNYXNrID0gKFxuICAgIFBpcGVsaW5lRmVhdHVyZUZsYWdzLlZlcnRleE5vcm1hbHNcbik7XG5cbmV4cG9ydCBjb25zdCBWZXJ0ZXhCdWZmZXJMYXlvdXRNYXNrID0gKFxuICAgIFBpcGVsaW5lRmVhdHVyZUZsYWdzLlZlcnRleE5vcm1hbHNcbiAgICB8IFBpcGVsaW5lRmVhdHVyZUZsYWdzLlZlcnRleENvbG9yc1xuKTtcblxuZXhwb3J0IGNvbnN0IE1hdGVyaWFsQnVmZmVyTGF5b3V0TWFzayA9IChcbiAgICBQaXBlbGluZUZlYXR1cmVGbGFncy5BbHBoYUN1dG9mZlxuKTtcblxuZXhwb3J0IGNvbnN0IE1hdGVyaWFsQmluZGdyb3VwTGF5b3V0TWFzayA9IChcbiAgICBNYXRlcmlhbEJ1ZmZlckxheW91dE1hc2tcbiAgICB8IFBpcGVsaW5lRmVhdHVyZUZsYWdzLkVtaXNzaXZlXG4pO1xuXG5leHBvcnQgY29uc3QgTWF0ZXJpYWxNYXNrID0gKFxuICAgIE1hdGVyaWFsQmluZGdyb3VwTGF5b3V0TWFza1xuICAgIHwgUGlwZWxpbmVGZWF0dXJlRmxhZ3MuRG91YmxlU2lkZWRcbik7XG5cbmV4cG9ydCBjb25zdCBQaXBlbGluZUxheW91dE1hc2sgPSAoXG4gICAgSW5zdGFuY2VCdWZmZXJMYXlvdXRNYXNrXG4gICAgfCBNYXRlcmlhbE1hc2tcbik7XG5cbmV4cG9ydCBmdW5jdGlvbiBmZWF0dXJlRmxhZ3NUb05hbWVzKHZhbDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKFBpcGVsaW5lRmVhdHVyZUZsYWdzKVxuICAgICAgICAuZmxhdE1hcCgoW2tleSwgZmxhZ10pID0+IHR5cGVvZiBmbGFnID09PSAnbnVtYmVyJyAmJiAoZmxhZyAmIHZhbCkgPyBrZXkgOiBbXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmZWF0dXJlRmxhZ3NUb1N0cmluZyh2YWw6IG51bWJlcikge1xuICAgIHJldHVybiBmZWF0dXJlRmxhZ3NUb05hbWVzKHZhbCkudG9TdHJpbmcoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hc2tSZWR1bmRhbnRGZWF0dXJlcyhmbGFnczogUGlwZWxpbmVGZWF0dXJlRmxhZ3MpIHtcbiAgICBsZXQgbWFza2VkID0gZmxhZ3M7XG4gICAgaWYgKG1hc2tlZCAmIFBpcGVsaW5lRmVhdHVyZUZsYWdzLkRvdWJsZVNpZGVkKSBtYXNrZWQgJj0gflBpcGVsaW5lRmVhdHVyZUZsYWdzLkNsb2Nrd2lzZVdpbmRpbmc7XG4gICAgcmV0dXJuIG1hc2tlZDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9274\n')},992:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _camera_camera__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3048);\n\nconst label = 'global uniforms';\nclass GlobalUniforms {\n    constructor(device) {\n        this.deviceBuffer = device.createBuffer(GlobalUniforms.bufferDescriptor);\n        this.bindGroupLayout = device.createBindGroupLayout(GlobalUniforms.layoutDescriptor);\n        this.bindGroupDescriptor = {\n            label,\n            layout: this.bindGroupLayout,\n            entries: [\n                {\n                    binding: 0,\n                    resource: {\n                        buffer: this.deviceBuffer,\n                        offset: 0,\n                        size: GlobalUniforms.bufferSize,\n                    },\n                },\n            ],\n        };\n        this.bindgroup = device.createBindGroup(this.bindGroupDescriptor);\n    }\n    updateDeviceBuffer(queue, camera) {\n        camera.cacheView();\n        queue.writeBuffer(this.deviceBuffer, 0, camera.buffer);\n    }\n}\nGlobalUniforms.code = (group) => /* wgsl */ `\r\n        struct GlobalUniforms {\r\n            worldToView: mat4x4f,\r\n            viewToClip: mat4x4f,\r\n            worldToClip: mat4x4f,\r\n            inverseWorldToView: mat4x4f,\r\n            inverseViewToClip: mat4x4f,\r\n            inverseWorldToClip: mat4x4f,\r\n        }\r\n\r\n        @group(${group}) @binding(0) var<uniform> globals: GlobalUniforms;\r\n    `;\nGlobalUniforms.bufferSize = _camera_camera__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .A.bufferLength;\nGlobalUniforms.layoutDescriptor = {\n    label,\n    entries: [\n        {\n            binding: 0,\n            buffer: { minBindingSize: GlobalUniforms.bufferSize },\n            visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,\n        },\n    ],\n};\nGlobalUniforms.bufferDescriptor = {\n    label,\n    size: GlobalUniforms.bufferSize,\n    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GlobalUniforms);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTkyLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBcUM7QUFFckMsTUFBTSxLQUFLLEdBQUcsaUJBQWlCLENBQUM7QUFFaEMsTUFBcUIsY0FBYztJQXNDL0IsWUFBWSxNQUFpQjtRQUN6QixJQUFJLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDekUsSUFBSSxDQUFDLGVBQWUsR0FBRyxNQUFNLENBQUMscUJBQXFCLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFckYsSUFBSSxDQUFDLG1CQUFtQixHQUFHO1lBQ3ZCLEtBQUs7WUFDTCxNQUFNLEVBQUUsSUFBSSxDQUFDLGVBQWU7WUFDNUIsT0FBTyxFQUFFO2dCQUNMO29CQUNJLE9BQU8sRUFBRSxDQUFDO29CQUNWLFFBQVEsRUFBRTt3QkFDTixNQUFNLEVBQUUsSUFBSSxDQUFDLFlBQVk7d0JBQ3pCLE1BQU0sRUFBRSxDQUFDO3dCQUNULElBQUksRUFBRSxjQUFjLENBQUMsVUFBVTtxQkFDbEM7aUJBQ0o7YUFDSjtTQUNKLENBQUM7UUFFRixJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVELGtCQUFrQixDQUFDLEtBQWUsRUFBRSxNQUFjO1FBQzlDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNuQixLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzRCxDQUFDOztBQTlEZSxtQkFBSSxHQUFHLENBQUMsS0FBYSxFQUFFLEVBQUUsQ0FBQyxVQUFVOzs7Ozs7Ozs7O2lCQVV2QyxLQUFLO0tBQ2pCLENBQUM7QUFFYyx5QkFBVSxHQUFHLCtEQUFNLENBQUMsWUFBWSxDQUFDO0FBRWpDLCtCQUFnQixHQUFpQztJQUM3RCxLQUFLO0lBQ0wsT0FBTyxFQUFFO1FBQ0w7WUFDSSxPQUFPLEVBQUUsQ0FBQztZQUNWLE1BQU0sRUFBRSxFQUFFLGNBQWMsRUFBRSxjQUFjLENBQUMsVUFBVSxFQUFFO1lBQ3JELFVBQVUsRUFBRSxjQUFjLENBQUMsTUFBTSxHQUFHLGNBQWMsQ0FBQyxRQUFRO1NBQzlEO0tBQ0o7Q0FDSixDQUFDO0FBRWMsK0JBQWdCLEdBQXdCO0lBQ3BELEtBQUs7SUFDTCxJQUFJLEVBQUUsY0FBYyxDQUFDLFVBQVU7SUFDL0IsS0FBSyxFQUFFLGNBQWMsQ0FBQyxPQUFPLEdBQUcsY0FBYyxDQUFDLFFBQVE7Q0FDMUQsQ0FBQztpRUEvQmUsY0FBYyIsInNvdXJjZXMiOlsid2VicGFjazovL2NidW50LXBvcnRmb2xpby8uL3NyYy9yZW5kZXJpbmcvZ2xvYmFsLXVuaWZvcm1zLnRzPzZlNjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENhbWVyYSBmcm9tICcuL2NhbWVyYS9jYW1lcmEnO1xyXG5cclxuY29uc3QgbGFiZWwgPSAnZ2xvYmFsIHVuaWZvcm1zJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdsb2JhbFVuaWZvcm1zIHtcclxuICAgIHN0YXRpYyByZWFkb25seSBjb2RlID0gKGdyb3VwOiBudW1iZXIpID0+IC8qIHdnc2wgKi9gXHJcbiAgICAgICAgc3RydWN0IEdsb2JhbFVuaWZvcm1zIHtcclxuICAgICAgICAgICAgd29ybGRUb1ZpZXc6IG1hdDR4NGYsXHJcbiAgICAgICAgICAgIHZpZXdUb0NsaXA6IG1hdDR4NGYsXHJcbiAgICAgICAgICAgIHdvcmxkVG9DbGlwOiBtYXQ0eDRmLFxyXG4gICAgICAgICAgICBpbnZlcnNlV29ybGRUb1ZpZXc6IG1hdDR4NGYsXHJcbiAgICAgICAgICAgIGludmVyc2VWaWV3VG9DbGlwOiBtYXQ0eDRmLFxyXG4gICAgICAgICAgICBpbnZlcnNlV29ybGRUb0NsaXA6IG1hdDR4NGYsXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBAZ3JvdXAoJHtncm91cH0pIEBiaW5kaW5nKDApIHZhcjx1bmlmb3JtPiBnbG9iYWxzOiBHbG9iYWxVbmlmb3JtcztcclxuICAgIGA7XHJcblxyXG4gICAgc3RhdGljIHJlYWRvbmx5IGJ1ZmZlclNpemUgPSBDYW1lcmEuYnVmZmVyTGVuZ3RoO1xyXG5cclxuICAgIHN0YXRpYyByZWFkb25seSBsYXlvdXREZXNjcmlwdG9yOiBHUFVCaW5kR3JvdXBMYXlvdXREZXNjcmlwdG9yID0ge1xyXG4gICAgICAgIGxhYmVsLFxyXG4gICAgICAgIGVudHJpZXM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYmluZGluZzogMCxcclxuICAgICAgICAgICAgICAgIGJ1ZmZlcjogeyBtaW5CaW5kaW5nU2l6ZTogR2xvYmFsVW5pZm9ybXMuYnVmZmVyU2l6ZSB9LFxyXG4gICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogR1BVU2hhZGVyU3RhZ2UuVkVSVEVYIHwgR1BVU2hhZGVyU3RhZ2UuRlJBR01FTlQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXSxcclxuICAgIH07XHJcblxyXG4gICAgc3RhdGljIHJlYWRvbmx5IGJ1ZmZlckRlc2NyaXB0b3I6IEdQVUJ1ZmZlckRlc2NyaXB0b3IgPSB7XHJcbiAgICAgICAgbGFiZWwsXHJcbiAgICAgICAgc2l6ZTogR2xvYmFsVW5pZm9ybXMuYnVmZmVyU2l6ZSxcclxuICAgICAgICB1c2FnZTogR1BVQnVmZmVyVXNhZ2UuVU5JRk9STSB8IEdQVUJ1ZmZlclVzYWdlLkNPUFlfRFNULFxyXG4gICAgfTtcclxuXHJcbiAgICBkZXZpY2VCdWZmZXI6IEdQVUJ1ZmZlcjtcclxuICAgIGJpbmRHcm91cExheW91dDogR1BVQmluZEdyb3VwTGF5b3V0O1xyXG4gICAgYmluZEdyb3VwRGVzY3JpcHRvciE6IEdQVUJpbmRHcm91cERlc2NyaXB0b3I7XHJcbiAgICBiaW5kZ3JvdXAhOiBHUFVCaW5kR3JvdXA7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZGV2aWNlOiBHUFVEZXZpY2UpIHtcclxuICAgICAgICB0aGlzLmRldmljZUJ1ZmZlciA9IGRldmljZS5jcmVhdGVCdWZmZXIoR2xvYmFsVW5pZm9ybXMuYnVmZmVyRGVzY3JpcHRvcik7XHJcbiAgICAgICAgdGhpcy5iaW5kR3JvdXBMYXlvdXQgPSBkZXZpY2UuY3JlYXRlQmluZEdyb3VwTGF5b3V0KEdsb2JhbFVuaWZvcm1zLmxheW91dERlc2NyaXB0b3IpO1xyXG5cclxuICAgICAgICB0aGlzLmJpbmRHcm91cERlc2NyaXB0b3IgPSB7XHJcbiAgICAgICAgICAgIGxhYmVsLFxyXG4gICAgICAgICAgICBsYXlvdXQ6IHRoaXMuYmluZEdyb3VwTGF5b3V0LFxyXG4gICAgICAgICAgICBlbnRyaWVzOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmluZGluZzogMCxcclxuICAgICAgICAgICAgICAgICAgICByZXNvdXJjZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXI6IHRoaXMuZGV2aWNlQnVmZmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IEdsb2JhbFVuaWZvcm1zLmJ1ZmZlclNpemUsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5iaW5kZ3JvdXAgPSBkZXZpY2UuY3JlYXRlQmluZEdyb3VwKHRoaXMuYmluZEdyb3VwRGVzY3JpcHRvcik7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlRGV2aWNlQnVmZmVyKHF1ZXVlOiBHUFVRdWV1ZSwgY2FtZXJhOiBDYW1lcmEpIHtcclxuICAgICAgICBjYW1lcmEuY2FjaGVWaWV3KCk7XHJcbiAgICAgICAgcXVldWUud3JpdGVCdWZmZXIodGhpcy5kZXZpY2VCdWZmZXIsIDAsIGNhbWVyYS5idWZmZXIpO1xyXG4gICAgfVxyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///992\n")},3156:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ cubemapGuassianPyramid)\n/* harmony export */ });\n/* harmony import */ var _shaders_cubemap_sampling_shader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6097);\n/* harmony import */ var _utils_data_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5752);\n/* harmony import */ var _utils_general__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4742);\n/* eslint @stylistic/max-len: \"error\" */\n\n\n\nconst createMipBlurCode = (groups, format) => /* wgsl */ `\r\n    ${_shaders_cubemap_sampling_shader__WEBPACK_IMPORTED_MODULE_1__/* .cubemapSampleConversions */ .X}\r\n    ${_shaders_cubemap_sampling_shader__WEBPACK_IMPORTED_MODULE_1__/* .toWorldDir */ .V}\r\n\r\n    override STEPS: i32 = 4;\r\n\r\n    struct Params {\r\n        offset: u32,\r\n        sigmas: array<f32>,\r\n    }\r\n\r\n    @group(0) @binding(0) var previousMip: texture_2d_array<f32>;\r\n\r\n    @group(0) @binding(1) \r\n    var outputTexture: texture_storage_2d_array<${format}, write>;\r\n\r\n    // sigma[0] reserved for work offset\r\n    @group(0) @binding(2) var<storage> params: Params;\r\n    \r\n    @compute @workgroup_size(${groups}, 1, 1)\r\n    fn main(@builtin(global_invocation_id) gid: vec3u) {\r\n        let mipSize = textureDimensions(outputTexture).x;\r\n\r\n        let idx = gid.x + params.offset;\r\n        let faceSize = mipSize * mipSize;\r\n        let faceIdx = idx % faceSize;\r\n        let coord = vec3u(\r\n            faceIdx % mipSize, \r\n            faceIdx / mipSize, \r\n            idx / faceSize,\r\n        ); \r\n\r\n        if (coord.x >= mipSize || coord.y >= mipSize || coord.z >= 6) { \r\n            return; \r\n        }\r\n\r\n        let previousSize = textureDimensions(previousMip).x;\r\n        let baseCoord = vec3i(vec3u(coord.x * 2, coord.y * 2, coord.z));\r\n        let pos = toWorldDir(vec3u(coord), mipSize);\r\n\r\n        let size = arrayLength(&params.sigmas);\r\n        let level = size - u32(ceil(log2(f32(previousSize))));\r\n        let sigma = params.sigmas[level];\r\n        let guassian_factor = -0.5 / (sigma * sigma);\r\n\r\n        var weight = 0.0;\r\n        var res = vec3(0.0);\r\n\r\n        for (var u = -STEPS; u <= STEPS + 1; u += 1) {\r\n            for (var v = -STEPS; v <= STEPS + 1; v += 1) {\r\n                let offsetCoord = baseCoord + vec3i(u, v, 0);\r\n                let sample = cubeSampleCoord(offsetCoord, previousSize);\r\n                if (sample.z == INVALID_FACE) { continue; }\r\n\r\n                let samplePos = toWorldDir(sample, previousSize);\r\n                let x = max(0.0, acos(dot(samplePos, pos)));\r\n                let w = exp(x * x * guassian_factor);\r\n                let color = textureLoad(previousMip, sample.xy, sample.z, 0);\r\n\r\n                res += color.rgb * w;\r\n                weight += w;\r\n            }\r\n        }\r\n\r\n        textureStore(outputTexture, coord.xy, coord.z, vec4(res / weight, 1));\r\n    }\r\n`;\n/**\n *  the minimum angular distance between any pixel on a cubemap\n *  of the given face width and any pixel lying on a perimeter\n *  the given number of steps away\n */\nfunction minStepDistance(steps, width) {\n    // the angular distance\n    // from the uvf: face = 0, u = 0, and v = width - Math.floor(steps / 2) - 1\n    // to the uvf: face = 3, u = 2 * width - baseV - steps - 2, and v = 0 or 1\n    // It's likely possible to programmatically determine whether the\n    // destination pixel should be v = 0 or v = 1, but checking both works fine\n    const nextMipWidth = width >> 1;\n    const baseV = nextMipWidth - Math.floor(steps / 4) - 1;\n    const baseVN = (2 / nextMipWidth) * (baseV + 0.5) - 1;\n    const baseUN = (1 / nextMipWidth) - 1;\n    const baseMag2 = 1 + baseVN * baseVN + baseUN * baseUN;\n    const sampU = 2 * width - (baseV * 2) - steps - 2;\n    const sampUN = (2 / width) * (sampU + 0.5) - 1;\n    const samp0VN = (1 / width) - 1;\n    const samp0Mag2 = 1 + sampUN * sampUN + samp0VN * samp0VN;\n    const samp1VN = (3 / width) - 1;\n    const samp1Mag2 = 1 + sampUN * sampUN + samp1VN * samp1VN;\n    const dot0 = (sampUN + baseVN + samp0VN * baseUN)\n        / Math.sqrt(samp0Mag2 * baseMag2);\n    const dot1 = (sampUN + baseVN + samp1VN * baseUN)\n        / Math.sqrt(samp1Mag2 * baseMag2);\n    return Math.min(1 - dot0, 1 - dot1);\n}\nasync function cubemapGuassianPyramid({ device, texture, outputTextureLabel, inPlace = false, minWidth = 8, steps = 4, maxOpsPerPass = 6 * ((17 * 256) ** 2), label = cubemapGuassianPyramid.name, delayWork, }) {\n    const { width, format } = texture;\n    const mipLevelCount = inPlace\n        ? texture.mipLevelCount\n        : (Math.log2(width) - Math.log2(minWidth) + 1);\n    if (mipLevelCount <= 1)\n        return texture;\n    const groups = Math.min(device.limits.maxComputeWorkgroupSizeX, device.limits.maxComputeInvocationsPerWorkgroup);\n    const shader = device.createShaderModule({\n        label,\n        code: createMipBlurCode(groups, format),\n    });\n    const bindgroupLayout = device.createBindGroupLayout({\n        label,\n        entries: [\n            {\n                binding: 0,\n                texture: { viewDimension: '2d-array' },\n                visibility: GPUShaderStage.COMPUTE,\n            },\n            {\n                binding: 1,\n                storageTexture: {\n                    access: 'write-only',\n                    viewDimension: '2d-array',\n                    format,\n                },\n                visibility: GPUShaderStage.COMPUTE,\n            },\n            {\n                binding: 2,\n                buffer: { type: 'read-only-storage' },\n                visibility: GPUShaderStage.COMPUTE,\n            },\n        ],\n    });\n    const pipeline = device.createComputePipeline({\n        label,\n        layout: device.createPipelineLayout({\n            label,\n            bindGroupLayouts: [bindgroupLayout],\n        }),\n        compute: {\n            module: shader,\n            entryPoint: 'main',\n            constants: { STEPS: Math.ceil(steps) },\n        },\n    });\n    let gaussianPyramid = texture;\n    if (!inPlace) {\n        const size = { width, height: width, depthOrArrayLayers: 6 };\n        gaussianPyramid = device.createTexture({\n            label: outputTextureLabel,\n            usage: GPUTextureUsage.STORAGE_BINDING\n                | GPUTextureUsage.TEXTURE_BINDING\n                | GPUTextureUsage.COPY_SRC\n                | GPUTextureUsage.COPY_DST,\n            dimension: '2d',\n            format,\n            mipLevelCount,\n            size,\n        });\n        const copyEncoder = device.createCommandEncoder({\n            label: `${label} copy encoder`,\n        });\n        copyEncoder.copyTextureToTexture({ texture, mipLevel: 0 }, { texture: gaussianPyramid, mipLevel: 0 }, size);\n        device.queue.submit([copyEncoder.finish()]);\n        await device.queue.onSubmittedWorkDone();\n    }\n    const mipViews = (0,_utils_general__WEBPACK_IMPORTED_MODULE_2__/* .mapRange */ ._b)(mipLevelCount, (i) => gaussianPyramid.createView({\n        label: `${label} mip view ${i}`,\n        dimension: '2d-array',\n        baseMipLevel: i,\n        mipLevelCount: 1,\n    }));\n    const maxWorkgroups = device.limits.maxComputeWorkgroupsPerDimension;\n    const maxLayers = Math.ceil(Math.log2(width));\n    const maxDispatches = Math.max((maxOpsPerPass / (((1 + (steps * 2)) ** 2) * groups)) | 0, 1);\n    const propertyArray = new ArrayBuffer((maxLayers + 1) * 4);\n    const offset = new Uint32Array(propertyArray, 0, 1);\n    const simgas = new Float32Array(propertyArray, 4, maxLayers);\n    simgas.set((0,_utils_general__WEBPACK_IMPORTED_MODULE_2__/* .mapRange */ ._b)(maxLayers, (i) => {\n        const w = width >> i;\n        return Math.acos(1 - minStepDistance(Math.min(w, steps), w)) / 3;\n    }));\n    const propertyBuffer = (0,_utils_data_copy__WEBPACK_IMPORTED_MODULE_0__/* .createAndCopyBuffer */ .Lr)(propertyArray, GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST, device);\n    await new Promise((resolve) => {\n        let mipLevel = 0;\n        let mipPasses = 0;\n        let requiredMipDispatches = 0;\n        let currentMipDispatches = 0;\n        let batchDispatches = 0;\n        let bindgroup;\n        async function runPass() {\n            if (currentMipDispatches >= requiredMipDispatches) {\n                mipLevel += 1;\n                currentMipDispatches = 0;\n                mipPasses = 0;\n                if (mipLevel >= mipLevelCount) {\n                    resolve();\n                    return;\n                }\n                const mipPixels = 6 * ((width >> mipLevel) ** 2);\n                requiredMipDispatches = Math.ceil(mipPixels / groups);\n                bindgroup = device.createBindGroup({\n                    layout: bindgroupLayout,\n                    entries: [\n                        {\n                            binding: 0,\n                            resource: mipViews[mipLevel - 1],\n                        },\n                        {\n                            binding: 1,\n                            resource: mipViews[mipLevel],\n                        },\n                        {\n                            binding: 2,\n                            resource: { buffer: propertyBuffer },\n                        },\n                    ],\n                });\n            }\n            offset[0] = currentMipDispatches * groups;\n            device.queue.writeBuffer(propertyBuffer, 0, offset);\n            const passDispatches = Math.min(requiredMipDispatches - currentMipDispatches, maxDispatches - batchDispatches, maxWorkgroups);\n            const passLabel = `${label} mip ${mipLevel}, pass ${mipPasses}`;\n            const encoder = device.createCommandEncoder({ label: passLabel });\n            const pass = encoder.beginComputePass({ label: passLabel });\n            pass.setPipeline(pipeline);\n            pass.setBindGroup(0, bindgroup);\n            pass.dispatchWorkgroups(passDispatches, 1, 1);\n            pass.end();\n            device.queue.submit([encoder.finish()]);\n            currentMipDispatches += passDispatches;\n            batchDispatches += passDispatches;\n            mipPasses += 1;\n            if (delayWork != null && batchDispatches >= maxDispatches) {\n                batchDispatches = 0;\n                await device.queue.onSubmittedWorkDone();\n                delayWork(runPass);\n            }\n            else {\n                void runPass();\n            }\n        }\n        void runPass();\n    });\n    return gaussianPyramid;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3156\n")},2806:(module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _settings_property_listener__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9528);\n/* harmony import */ var _settings_skybox_options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5427);\n/* harmony import */ var _rendering_default_forward_pass_descriptor_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(360);\n/* harmony import */ var _rendering_default_forward_pass_pipeline_feature_flags__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9274);\n/* harmony import */ var _cubemap_blur_cubemap_guassian_pyramid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(3156);\n/* harmony import */ var _loader_gltf_loader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(5308);\n/* harmony import */ var _utils_general__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(4742);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_settings_skybox_options__WEBPACK_IMPORTED_MODULE_1__]);\n_settings_skybox_options__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _GltfModel_settings;\n\n\n\n\n\n\n\nconst gltfIndex = await getGltfIndex();\nasync function getGltfIndex() {\n    const indexUrl = \"https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Assets/main/Models/\" + \"model-index.json\";\n    const indexRes = await fetch(indexUrl);\n    const indexStr = await indexRes.text();\n    const indexJson = JSON.parse(indexStr);\n    if (!Array.isArray(indexJson)) {\n        throw new Error('could not load gtlf model index');\n    }\n    const entries = indexJson.flatMap((gltf) => {\n        if (!(0,_utils_general__WEBPACK_IMPORTED_MODULE_6__/* .isObject */ .Gv)(gltf)\n            || !('label' in gltf)\n            || typeof gltf.label !== 'string'\n            || !('name' in gltf)\n            || typeof gltf.name !== 'string'\n            || !('variants' in gltf)\n            || !(0,_utils_general__WEBPACK_IMPORTED_MODULE_6__/* .isObject */ .Gv)(gltf.variants)\n            || typeof gltf.variants.glTF !== 'string')\n            return [];\n        const { variants: { glTF: file }, label, name } = gltf;\n        const path = `${\"https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Assets/main/Models/\"}${name}/glTF/${file}`;\n        return [[label, path]];\n    });\n    return Object.fromEntries(entries);\n}\nclass GltfModel {\n    get depthTextureView() {\n        return this.descriptorMap.gbuffer.depth.view;\n    }\n    constructor(renderer) {\n        this.renderer = renderer;\n        this.geometryPipelines = {};\n        _GltfModel_settings.set(this, (0,_settings_property_listener__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .A)({\n            skybox: (0,_settings_skybox_options__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .A)(this),\n            model: {\n                [_settings_property_listener__WEBPACK_IMPORTED_MODULE_0__/* .ListenerSyms */ .t.$type]: 'file',\n                [_settings_property_listener__WEBPACK_IMPORTED_MODULE_0__/* .ListenerSyms */ .t.$callback]: (val, key) => {\n                    if (key !== 'value' || val == null)\n                        return;\n                    if (typeof val === 'string' || val instanceof File) {\n                        void this.setModel(val);\n                    }\n                },\n                accept: '.hdr',\n                selection: {\n                    value: 'Environment Test',\n                    initialValues: gltfIndex,\n                },\n                process: (file) => file,\n            },\n        }));\n        this.settings = __classPrivateFieldGet(this, _GltfModel_settings, \"f\").publicSettings;\n        this.priority = 1000;\n        this.descriptorMap = new _rendering_default_forward_pass_descriptor_map__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .A(renderer.device, renderer.gbuffer, renderer.globals);\n        this.device = renderer.device;\n        this.renderer.addForwardPass(this);\n    }\n    async setSkybox(skybox) {\n        await (0,_cubemap_blur_cubemap_guassian_pyramid__WEBPACK_IMPORTED_MODULE_4__/* [\"default\"] */ .A)({\n            texture: skybox,\n            device: this.renderer.device,\n            inPlace: true,\n            delayWork: requestAnimationFrame,\n        });\n        this.renderer.skybox = skybox;\n    }\n    async setModel(modelPath) {\n        const size = { width: 1, height: 1 };\n        const colorArray = new Float32Array([1, 1, 1, 1]);\n        const opaqueWhite = this.renderer.device.createTexture({\n            size,\n            format: 'rgba32float',\n            usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,\n        });\n        this.renderer.device.queue.writeTexture({ texture: opaqueWhite }, colorArray, {}, size);\n        const normalMap = this.renderer.device.createTexture({\n            size,\n            format: 'rgba32float',\n            usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,\n        });\n        colorArray.set([0.5, 0.5, 1, 1]);\n        this.renderer.device.queue.writeTexture({ texture: normalMap }, colorArray, {}, size);\n        const sampler = {\n            addressModeU: 'repeat',\n            addressModeV: 'repeat',\n            magFilter: 'linear',\n            minFilter: 'linear',\n            mipmapFilter: 'linear',\n        };\n        const matData = {\n            baseColorTexture: opaqueWhite,\n            baseColorFactor: [1, 1, 1, 1],\n            normalTexture: normalMap,\n            metallicRoughnessTexture: opaqueWhite,\n            metallicFactor: 1,\n            roughnessFactor: 1,\n            baseColorSampler: sampler,\n            normalSampler: sampler,\n            metallicRoughnessSampler: sampler,\n        };\n        this.geometryPipelines = await (0,_loader_gltf_loader__WEBPACK_IMPORTED_MODULE_5__/* [\"default\"] */ .A)(modelPath, this.renderer.device, this.descriptorMap, matData, GltfModel.goalLayout, {});\n    }\n    render({ encoder, gbuffer, globals }) {\n        const pass = encoder.beginRenderPass(gbuffer.passDescriptor);\n        pass.setBindGroup(0, globals.bindgroup);\n        for (const pipeline of Object.values(this.geometryPipelines)) {\n            pipeline?.draw(pass, this.renderer.device.queue);\n        }\n        pass.end();\n    }\n}\n_GltfModel_settings = new WeakMap();\nGltfModel.title = 'glTF Model Viewer';\nGltfModel.description = '';\nGltfModel.goalLayout = [\n    {\n        name: 'POSITION',\n        type: 'VEC3',\n        componentType: 5126 /* ComponentType.float32 */,\n    },\n    {\n        name: 'TEXCOORD_0',\n        type: 'VEC2',\n        componentType: 5126 /* ComponentType.float32 */,\n    },\n    {\n        name: 'TANGENT',\n        type: 'VEC4',\n        componentType: 5126 /* ComponentType.float32 */,\n        depends: ['NORMAL'],\n        fill: [1, 0, 0, 1],\n    },\n    {\n        name: 'NORMAL',\n        type: 'VEC3',\n        componentType: 5126 /* ComponentType.float32 */,\n        strip: true,\n        feature: _rendering_default_forward_pass_pipeline_feature_flags__WEBPACK_IMPORTED_MODULE_3__/* .PipelineFeatureFlags */ .Ot.VertexNormals,\n    },\n    {\n        name: 'COLOR_0',\n        type: 'VEC4',\n        componentType: 5126 /* ComponentType.float32 */,\n        strip: true,\n        feature: _rendering_default_forward_pass_pipeline_feature_flags__WEBPACK_IMPORTED_MODULE_3__/* .PipelineFeatureFlags */ .Ot.VertexColors,\n        fill: [1, 1, 1, 1],\n    },\n];\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GltfModel);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2806\n")},5308:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  A: () => (/* binding */ importGltf)\n});\n\n// EXTERNAL MODULE: ./node_modules/.pnpm/wgpu-matrix@3.2.0/node_modules/wgpu-matrix/dist/3.x/wgpu-matrix.module.js\nvar wgpu_matrix_module = __webpack_require__(7675);\n// EXTERNAL MODULE: ./node_modules/.pnpm/@loaders.gl+core@4.2.4/node_modules/@loaders.gl/core/dist/lib/api/load.js + 50 modules\nvar load = __webpack_require__(3361);\n// EXTERNAL MODULE: ./node_modules/.pnpm/@loaders.gl+gltf@4.2.4_@loaders.gl+core@4.2.4/node_modules/@loaders.gl/gltf/dist/gltf-loader.js + 71 modules\nvar gltf_loader = __webpack_require__(4248);\n// EXTERNAL MODULE: ./node_modules/.pnpm/@loaders.gl+gltf@4.2.4_@loaders.gl+core@4.2.4/node_modules/@loaders.gl/gltf/dist/lib/api/post-process-gltf.js\nvar post_process_gltf = __webpack_require__(3628);\n;// ./src/samples/gltf-viewer/loader/weld.ts\n/**\n * Adapted from gltf-transform's version:\n * github.com/donmccurdy/glTF-Transform/blob/main/packages/functions/src/weld.ts\n */\nclass HashTable {\n    constructor(prim) {\n        this.attributes = [];\n        let byteStride = 0;\n        for (const attribute of Object.values(prim)) {\n            byteStride += this.initAttribute(attribute);\n        }\n        const paddedByteStride = (byteStride + 3) & ~3;\n        this.u8 = new Uint8Array(paddedByteStride);\n        this.u32 = new Uint32Array(this.u8.buffer);\n    }\n    initAttribute(attribute) {\n        const u8 = attribute.data instanceof Uint8Array\n            ? attribute.data\n            : new Uint8Array(attribute.data.buffer);\n        const byteStride = attribute.bytesPerComponent * attribute.componentsPerElement;\n        this.attributes.push({ u8, byteStride });\n        return byteStride;\n    }\n    hash(index) {\n        let byteOffset = 0;\n        for (const { u8, byteStride } of this.attributes) {\n            for (let i = 0; i < byteStride; i += 1) {\n                this.u8[byteOffset + i] = u8[index * byteStride + i];\n            }\n            byteOffset += byteStride;\n        }\n        return this.murmurHash2();\n    }\n    equal(a, b) {\n        for (const { u8, byteStride } of this.attributes) {\n            for (let j = 0; j < byteStride; j += 1) {\n                if (u8[a * byteStride + j] !== u8[b * byteStride + j]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    hashLookup(table, buckets, key, empty) {\n        const hashmod = buckets - 1;\n        const hashval = this.hash(key);\n        let bucket = hashval & hashmod;\n        for (let probe = 0; probe <= hashmod; probe += 1) {\n            const item = table[bucket];\n            if (item === empty || this.equal(item, key)) {\n                return bucket;\n            }\n            bucket = (bucket + probe + 1) & hashmod; // Hash collision.\n        }\n        throw new Error('Hash table full.');\n    }\n    /**\n     * References:\n     * - https://github.com/mikolalysenko/murmurhash-js/blob/f19136e9f9c17f8cddc216ca3d44ec7c5c502f60/murmurhash2_gc.js#L14\n     * - https://github.com/zeux/meshoptimizer/blob/e47e1be6d3d9513153188216455bdbed40a206ef/src/indexgenerator.cpp#L12\n     */\n    murmurHash2() {\n        const m = 0x5bd1e995;\n        const r = 24;\n        let h = 0;\n        for (let k of this.u32) {\n            k = Math.imul(k, m) >>> 0;\n            k = (k ^ (k >> r)) >>> 0;\n            k = Math.imul(k, m) >>> 0;\n            h = Math.imul(h, m) >>> 0;\n            h = (h ^ k) >>> 0;\n        }\n        return h;\n    }\n}\nfunction ceilPowerOfTwo(value) {\n    return 2 ** Math.ceil(Math.log(value) / Math.LN2);\n}\n/**\n * Weld and merge, combining vertices that are bitwise-equal.\n *\n * Adapted from gltf-transform's _weldPrimitiveStrict:\n * github.com/donmccurdy/glTF-Transform/blob/main/packages/functions/src/weld.ts#L193\n */\nfunction weld(prim) {\n    const srcVertexCount = prim.POSITION.count;\n    const hash = new HashTable(prim);\n    const tableSize = ceilPowerOfTwo(srcVertexCount + (srcVertexCount / 4));\n    const is16Bit = srcVertexCount < (2 ** 16 - 1);\n    const empty = 2 ** (is16Bit ? 16 : 32) - 1;\n    const indexFormat = is16Bit ? 'uint16' : 'uint32';\n    const writeMap = is16Bit ? new Uint16Array(srcVertexCount) : new Uint32Array(srcVertexCount);\n    const table = is16Bit ? new Uint16Array(tableSize) : new Uint32Array(tableSize);\n    table.fill(empty);\n    let dstVertexCount = 0;\n    for (let i = 0; i < srcVertexCount; i += 1) {\n        const hashIndex = hash.hashLookup(table, tableSize, i, empty);\n        const dstIndex = table[hashIndex];\n        if (dstIndex === empty) {\n            table[hashIndex] = i;\n            writeMap[i] = dstVertexCount;\n            dstVertexCount += 1;\n        }\n        else {\n            writeMap[i] = writeMap[dstIndex];\n        }\n    }\n    for (const attribute of Object.values(prim)) {\n        attribute.remap(writeMap, dstVertexCount);\n    }\n    // The gltf-transform version checks for degenerate triangles to remove.\n    // This is omitted here.\n    return { indexArray: writeMap, indexFormat, vertexCount: dstVertexCount };\n}\n\n// EXTERNAL MODULE: ./src/rendering/default-forward-pass/pipeline-feature-flags.ts\nvar pipeline_feature_flags = __webpack_require__(9274);\n// EXTERNAL MODULE: ./src/rendering/constants.ts\nvar constants = __webpack_require__(3970);\n// EXTERNAL MODULE: ./src/utils/data-copy.ts\nvar data_copy = __webpack_require__(5752);\n;// ./src/rendering/default-forward-pass/primitive-draw-data.ts\n\n\n\n\nclass PrimitiveDrawData {\n    constructor(primitive, device, max, descriptorMap, instances) {\n        this.instanceCount = 0;\n        this.dirty = false;\n        this.max = max;\n        this.features = primitive.features;\n        this.name = primitive.name ?? 'mesh';\n        this.vertexCount = primitive.vertexCount;\n        if (primitive.vertexArray instanceof GPUBuffer) {\n            this.vertexBuffer = primitive.vertexArray;\n        }\n        else {\n            this.vertexBuffer = (0,data_copy/* createAndCopyBuffer */.Lr)(primitive.vertexArray, GPUBufferUsage.VERTEX, device, `${this.name} vertex buffer`);\n        }\n        if (primitive.indexArray && primitive.indexFormat) {\n            const { indexArray, indexFormat } = primitive;\n            this.indexData = {\n                indexFormat,\n                indexCount: indexArray.byteLength / (indexFormat === 'uint16' ? 2 : 4),\n                indexBuffer: (0,data_copy/* createAndCopyBuffer */.Lr)(primitive.indexArray, GPUBufferUsage.INDEX, device, `${this.name} index buffer`),\n            };\n        }\n        this.instanceSize = constants/* TypeSizes */.vV.sizeofMat4x4f;\n        if (this.features & pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexNormals) {\n            this.instanceSize += 12 * 4;\n        }\n        this.instances = new ArrayBuffer(max * this.instanceSize);\n        this.modelMatrices = new Array(max);\n        for (let i = 0; i < max; i += 1) {\n            const offset = i * this.instanceSize;\n            this.modelMatrices[i] = new Float32Array(this.instances, offset, 16);\n        }\n        if (this.features & pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexNormals) {\n            this.normalMatrices = new Array(max);\n            for (let i = 0; i < max; i += 1) {\n                const offset = (i * this.instanceSize) + constants/* TypeSizes */.vV.sizeofMat4x4f;\n                this.normalMatrices[i] = new Float32Array(this.instances, offset, 12);\n            }\n        }\n        this.instanceBuffer = device.createBuffer({\n            label: `${this.name} instance buffer`,\n            size: this.instances.byteLength,\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM,\n        });\n        this.instanceBindGroup = device.createBindGroup({\n            label: `PrimitiveDrawData instance bind group`,\n            layout: descriptorMap.forwardBindgroupLayout,\n            entries: [{\n                    binding: 0,\n                    resource: { buffer: this.instanceBuffer },\n                }],\n        });\n        if (instances) {\n            for (const instance of instances) {\n                this.addInstance(instance);\n            }\n        }\n    }\n    draw(passEncoder, queue) {\n        if (this.dirty) {\n            queue.writeBuffer(this.instanceBuffer, 0, this.instances);\n            this.dirty = false;\n        }\n        passEncoder.setVertexBuffer(0, this.vertexBuffer);\n        passEncoder.setBindGroup(2, this.instanceBindGroup);\n        if (this.indexData != null) {\n            const { indexBuffer, indexCount, indexFormat } = this.indexData;\n            passEncoder.setIndexBuffer(indexBuffer, indexFormat);\n            passEncoder.drawIndexed(indexCount, this.instanceCount);\n        }\n        else {\n            passEncoder.draw(this.vertexCount, this.instanceCount);\n        }\n    }\n    addInstance(transform) {\n        if (this.instanceCount === this.max)\n            return;\n        wgpu_matrix_module/* mat4 */.pB.copy(transform, this.modelMatrices[this.instanceCount]);\n        this.calculateNormalMatrix(this.instanceCount);\n        this.instanceCount += 1;\n        this.dirty = true;\n    }\n    calculateNormalMatrix(idx) {\n        if (!(this.features & pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexNormals))\n            return;\n        const normalMatrix = this.normalMatrices[idx];\n        wgpu_matrix_module/* mat3 */.w0.fromMat4(this.modelMatrices[idx], normalMatrix);\n        wgpu_matrix_module/* mat3 */.w0.invert(normalMatrix, normalMatrix);\n        wgpu_matrix_module/* mat3 */.w0.transpose(normalMatrix, normalMatrix);\n    }\n}\n\n;// ./src/samples/gltf-viewer/loader/type-conversions.ts\n\nconst typeToElementCount = {\n    SCALAR: 1,\n    VEC2: 2,\n    VEC3: 3,\n    VEC4: 4,\n    MAT2: 4,\n    MAT3: 12,\n    MAT4: 16,\n};\nconst componentToSize = {\n    [5120 /* ComponentType.int8 */]: 1,\n    [5121 /* ComponentType.uint8 */]: 1,\n    [5122 /* ComponentType.int16 */]: 2,\n    [5123 /* ComponentType.uint16 */]: 2,\n    [5125 /* ComponentType.uint32 */]: 4,\n    [5126 /* ComponentType.float32 */]: 4,\n};\nconst modeToTopology = {\n    [0 /* TopologyMode.Points */]: pipeline_feature_flags/* PipelineFeatureFlags */.Ot.PointList, // POINTS\n    [1 /* TopologyMode.LineList */]: pipeline_feature_flags/* PipelineFeatureFlags */.Ot.LineList, // LINES\n    // 2: LINE_LOOP (unsupported by webgpu)\n    // 3: PipelineFeatureFlags.LineStrip, // LINE_STRIP\n    [4 /* TopologyMode.TriangleList */]: pipeline_feature_flags/* PipelineFeatureFlags */.Ot.TriangleList, // TRIANGLES\n    // 5: PipelineFeatureFlags.TriangleStrip, // TRIANGLE_STRIP\n    // 6: TRIANGLE_FAN (unsupported by webgpu)\n};\n\n;// ./src/samples/gltf-viewer/loader/attribute-wrapper.ts\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nclass AttributeWrapper {\n    constructor(accessor, componentCount) {\n        this.unwelded = false;\n        if (accessor instanceof Float32Array) {\n            this.data = accessor;\n            this.componentsPerElement = componentCount;\n            this.count = accessor.length / componentCount;\n            this.processed = true;\n            this.bytesPerComponent = 4;\n            this.copyFrom = this.copyProcessed.bind(this);\n        }\n        else {\n            this.data = accessor.value;\n            this.componentsPerElement = accessor.components;\n            this.count = accessor.count;\n            this.bytesPerComponent = accessor.bytesPerComponent;\n            this.processed = false;\n            this.view = new DataView(this.data.buffer);\n            this.copyFrom = this.copyUnprocessed.bind(this);\n            switch (accessor.componentType) {\n                case 5120 /* ComponentType.int8 */: {\n                    this.at = (i, j) => this.view.getInt8(i * this.componentsPerElement + j);\n                    break;\n                }\n                case 5121 /* ComponentType.uint8 */: {\n                    this.at = (i, j) => this.view.getUint8(i * this.componentsPerElement + j);\n                    break;\n                }\n                case 5122 /* ComponentType.int16 */: {\n                    this.at = (i, j) => {\n                        const offset = 2 * (i * this.componentsPerElement + j);\n                        return this.view.getInt16(offset, true);\n                    };\n                    break;\n                }\n                case 5123 /* ComponentType.uint16 */: {\n                    this.at = (i, j) => {\n                        const offset = 2 * (i * this.componentsPerElement + j);\n                        return this.view.getUint16(offset, true);\n                    };\n                    break;\n                }\n                case 5125 /* ComponentType.uint32 */: {\n                    this.at = (i, j) => {\n                        const offset = 4 * (i * this.componentsPerElement + j);\n                        return this.view.getUint32(offset, true);\n                    };\n                    break;\n                }\n                case 5126 /* ComponentType.float32 */: {\n                    this.at = (i, j) => {\n                        const offset = 4 * (i * this.componentsPerElement + j);\n                        return this.view.getFloat32(offset, true);\n                    };\n                    break;\n                }\n                default: throw new Error(`gltf importer -- invalid componentType ${accessor.componentType}`);\n            }\n            if (accessor.normalized) {\n                let val;\n                switch (accessor.componentType) {\n                    case 5121 /* ComponentType.uint8 */:\n                        val = 255;\n                        break;\n                    case 5120 /* ComponentType.int8 */:\n                        val = 127;\n                        break;\n                    case 5123 /* ComponentType.uint16 */:\n                        val = 65535;\n                        break;\n                    case 5122 /* ComponentType.int16 */:\n                        val = 32767;\n                        break;\n                    case 5125 /* ComponentType.uint32 */:\n                        val = 4294967295;\n                        break;\n                    default: throw new Error(`gltf importer -- invalid componentType ${accessor.componentType}`);\n                }\n                this.at = (i, j) => this.at(i, j) / val;\n            }\n        }\n    }\n    get array() {\n        if (!this.processed)\n            this.process();\n        return this.data;\n    }\n    copyProcessed(srcIdx, dstIdx, dst) {\n        for (let j = 0; j < this.componentsPerElement; j += 1) {\n            dst[dstIdx + j] = this.data[(srcIdx * this.componentsPerElement) + j];\n        }\n    }\n    copyUnprocessed(srcIdx, dstIdx, dst) {\n        for (let j = 0; j < this.componentsPerElement; j += 1) {\n            dst[dstIdx + j] = this.at(srcIdx, j);\n        }\n    }\n    markProcessed() {\n        this.processed = true;\n        this.copyFrom = this.copyProcessed.bind(this);\n        delete this.view;\n        delete this.at;\n    }\n    process() {\n        if (this.processed)\n            return;\n        const newView = new Float32Array(this.count * this.componentsPerElement);\n        for (let i = 0; i < this.count; i += 1) {\n            this.copyFrom(i, i * this.componentsPerElement, newView);\n        }\n        this.data = newView;\n        this.markProcessed();\n    }\n    unweld(indexArray) {\n        if (this.unwelded)\n            return;\n        this.unwelded = true;\n        const newView = new Float32Array(indexArray.length * this.componentsPerElement);\n        for (let i = 0; i < indexArray.length; i += 1) {\n            this.copyFrom(indexArray[i], i * this.componentsPerElement, newView);\n        }\n        this.count = indexArray.length;\n        this.data = newView;\n        this.markProcessed();\n    }\n    remap(remap, dstCount) {\n        const dstArray = new Float32Array(dstCount * this.componentsPerElement);\n        const done = new Uint8Array(dstCount);\n        for (let srcIndex = 0; srcIndex < this.count; srcIndex += 1) {\n            const dstIndex = remap[srcIndex];\n            if (done[dstIndex])\n                continue;\n            this.copyFrom(srcIndex, dstIndex * this.componentsPerElement, dstArray);\n            done[dstIndex] = 1;\n        }\n        this.data = dstArray;\n        this.markProcessed();\n    }\n}\n\n;// ./src/samples/gltf-viewer/loader/interleave-vertices.ts\n\n\n// const goalLayout: AttributeDetails[] = [\n//     {\n//         name: 'POSITION',\n//         type: 'VEC3',\n//         componentType: ComponentType.float32,\n//     },\n//     {\n//         name: 'TEXCOORD_0',\n//         type: 'VEC2',\n//         componentType: ComponentType.float32,\n//     },\n//     {\n//         name: 'TANGENT',\n//         type: 'VEC4',\n//         componentType: ComponentType.float32,\n//         depends: ['NORMAL'],\n//         fill: [1, 0, 0, 1],\n//     },\n//     {\n//         name: 'NORMAL',\n//         type: 'VEC3',\n//         componentType: ComponentType.float32,\n//         strip: true,\n//         feature: PipelineFeatureFlags.VertexNormals,\n//     },\n//     {\n//         name: 'COLOR_0',\n//         type: 'VEC4',\n//         componentType: ComponentType.float32,\n//         strip: true,\n//         feature: PipelineFeatureFlags.VertexColors,\n//         fill: [1, 1, 1, 1],\n//     },\n// ];\nfunction interleaveVertices(attributes, count) {\n    let vertexFeatures = pipeline_feature_flags/* PipelineFeatureFlags */.Ot.Defaults;\n    let stride = 5;\n    if (attributes.NORMAL != null)\n        stride += 7;\n    if (attributes.COLOR_0 != null)\n        stride += 4;\n    const vertexArray = new ArrayBuffer(stride * count * 4);\n    const vertexView = new Float32Array(vertexArray);\n    for (let i = 0; i < count; i += 1) {\n        attributes.POSITION?.copyFrom(i, stride * i, vertexView);\n    }\n    const uv = attributes.TEXCOORD_0 ?? new AttributeWrapper(new Float32Array(count * 2), 2);\n    for (let i = 0; i < count; i += 1) {\n        uv.copyFrom(i, i * stride + 3, vertexView);\n    }\n    if (attributes.NORMAL != null && attributes.TANGENT != null) {\n        vertexFeatures |= pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexNormals;\n        for (let i = 0; i < count; i += 1) {\n            attributes.TANGENT.copyFrom(i, i * stride + 5, vertexView);\n        }\n        for (let i = 0; i < count; i += 1) {\n            attributes.NORMAL.copyFrom(i, i * stride + 9, vertexView);\n        }\n    }\n    if (attributes.COLOR_0 != null) {\n        vertexFeatures |= pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexColors;\n        const step = attributes.NORMAL != null ? 12 : 5;\n        for (let i = 0; i < count; i += 1) {\n            attributes.COLOR_0.copyFrom(i, i * stride + step, vertexView);\n            vertexView[i * stride + step + 3] = 1;\n        }\n    }\n    return { vertexArray, vertexFeatures };\n}\n\n// EXTERNAL MODULE: ./src/utils/general.ts\nvar general = __webpack_require__(4742);\n;// ./src/samples/gltf-viewer/loader/primitive-loader.ts\n\n\n\n\n\n\n\n\nconst generateTangentsAsync = __webpack_require__.e(/* import() */ 451).then(__webpack_require__.bind(__webpack_require__, 1451)).then((module) => module.generateTangents);\nfunction wrapIndices(indices) {\n    switch (indices.bytesPerComponent) {\n        case 2: return {\n            indexArray: new Uint16Array(indices.value.buffer),\n            indexFormat: 'uint16',\n        };\n        case 4: return {\n            indexArray: new Uint32Array(indices.value.buffer),\n            indexFormat: 'uint32',\n        };\n        case 1:\n        default: return {\n            indexArray: new Uint16Array(indices.value),\n            indexFormat: 'uint16',\n        };\n    }\n}\nfunction reindex(indices, originalMode) {\n    switch (originalMode) {\n        case 2 /* TopologyMode.LineLoop */:\n        case 3 /* TopologyMode.LineStrip */:\n        case 6 /* TopologyMode.TriangleFan */:\n        case 5 /* TopologyMode.TriangleStrip */: {\n            // TODO: convert non-list topologies into lists.\n            throw new Error('Topology currently unsupported');\n        }\n        default: return { ...wrapIndices(indices), mode: 4 /* TopologyMode.TriangleList */ };\n    }\n}\n/**\n * Checks the determinant of each given matrix and returns a culling mode such that\n * a primitive will render correctly for all nodes containing it, using 'none'\n * for primitive which are rendered both inverted and normally.\n *\n * @param instanceMatrices the instance matrices to render the primitive with\n * @returns The cull mode to use on the primitive.\n *\n * @remarks\n * The glFT spec determines the winding direction of a model by the\n * determinant of the transform of the node which uses it, allowing\n * inversion through negative scale. Changing cullMode instead\n * more easily integrates with instanced rendering, although comes\n * at a performance cost.\n */\nfunction getCullMode(instanceMatrices) {\n    let overallSign;\n    for (let i = 0; i < instanceMatrices.length; i += 1) {\n        const det = wgpu_matrix_module/* mat4 */.pB.determinant(instanceMatrices[i]);\n        const sign = Math.sign(det);\n        overallSign ??= sign;\n        if (sign !== overallSign)\n            return pipeline_feature_flags/* PipelineFeatureFlags */.Ot.DoubleSided;\n    }\n    return (overallSign == null || overallSign > 0)\n        ? pipeline_feature_flags/* PipelineFeatureFlags */.Ot.Defaults\n        : pipeline_feature_flags/* PipelineFeatureFlags */.Ot.ClockwiseWinding;\n}\nasync function loadPrimitive(layout, primitive, instances, descriptorMap, device) {\n    const attributes = primitive.attributes;\n    if (attributes.POSITION == null)\n        return {};\n    const { indices } = primitive;\n    const atrs = (0,general/* mapValues */.LG)(attributes, (atr) => new AttributeWrapper(atr));\n    let { mode } = primitive;\n    let vertexCount = attributes.POSITION.count;\n    let indexArray;\n    let indexFormat;\n    if (indices != null) {\n        ({ indexArray, indexFormat } = wrapIndices(indices));\n        if (mode !== 0 /* TopologyMode.Points */\n            && mode !== 1 /* TopologyMode.LineList */\n            && mode !== 4 /* TopologyMode.TriangleList */) {\n            ({ indexArray, indexFormat, mode } = reindex(indices, mode));\n        }\n    }\n    if (atrs.NORMAL != null && atrs.TANGENT == null) {\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (atrs.TEXCOORD_0 != null) {\n            if (indexArray != null) {\n                vertexCount = indexArray.length;\n                for (const atr of Object.values(atrs)) {\n                    atr.unweld(indexArray);\n                }\n            }\n            const start = Date.now();\n            const tangent = await generateTangentsAsync.then((func) => func(\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            atrs.POSITION.array, \n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            atrs.NORMAL.array, atrs.TEXCOORD_0.array));\n            for (let i = 3; i < tangent.length; i += 4) {\n                tangent[i] *= -1;\n            }\n            console.log(`tangents generated in ${Date.now() - start}`);\n            atrs.TANGENT = new AttributeWrapper(tangent, 4);\n            ({ indexArray, indexFormat, vertexCount } = weld(atrs));\n            mode = 4 /* TopologyMode.TriangleList */;\n        }\n        else {\n            const tangent = new Float32Array(vertexCount * 4);\n            for (let i = 0; i < vertexCount; i += 1) {\n                tangent.set([1, 0, 0, 1], i * 4);\n            }\n            atrs.TANGENT = new AttributeWrapper(tangent, 4);\n        }\n    }\n    const { vertexArray, vertexFeatures } = interleaveVertices(atrs, vertexCount);\n    let features = getCullMode(instances) | vertexFeatures;\n    if (mode != null)\n        features |= modeToTopology[mode] || 0;\n    const drawData = new PrimitiveDrawData({\n        features,\n        indexArray,\n        indexFormat,\n        vertexCount,\n        vertexArray,\n    }, device, instances.length, descriptorMap, instances);\n    return { material: primitive.material, drawData };\n}\n\n// EXTERNAL MODULE: ./src/utils/texture-importing.ts + 1 modules\nvar texture_importing = __webpack_require__(8862);\n;// ./src/samples/gltf-viewer/loader/material-loader.ts\n\n\nconst DEFAULT_METALLIC = 0.0;\nconst DEFAULT_ROUGHNESS = 1.0;\nconst gltfToMagDescription = {\n    9728: 'nearest',\n    9729: 'linear',\n    9984: 'nearest', // NEAREST_MIPMAP_NEAREST\n    9985: 'linear', // LINEAR_MIPMAP_NEAREST\n    9986: 'nearest', // NEAREST_MIPMAP_LINEAR\n    9987: 'linear', // LINEAR_MIPMAP_LINEAR\n};\nconst gltfToMipDescription = {\n    9984: 'nearest', // NEAREST_MIPMAP_NEAREST\n    9985: 'nearest', // LINEAR_MIPMAP_NEAREST\n    9986: 'linear', // NEAREST_MIPMAP_LINEAR\n    9987: 'linear', // LINEAR_MIPMAP_LINEAR\n};\nconst gltfToAddressMode = {\n    33071: 'clamp-to-edge', // CLAMP_TO_EDGE\n    33648: 'mirror-repeat', // MIRRORED_REPEAT\n    10497: 'repeat', // REPEAT\n};\nfunction toSamplerDescription(sampler) {\n    const { magFilter, minFilter, wrapS, wrapT } = sampler;\n    return {\n        addressModeU: gltfToAddressMode[wrapS ?? 10497],\n        addressModeV: gltfToAddressMode[wrapT ?? 10497],\n        minFilter: gltfToMagDescription[minFilter ?? 9987],\n        magFilter: gltfToMagDescription[magFilter ?? 9729],\n        mipmapFilter: gltfToMipDescription[minFilter ?? 9987] ?? 'linear',\n    };\n}\nfunction getImageData(handle) {\n    const { source, sampler } = handle;\n    if (source == null)\n        return {};\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const data = source.image.data ?? source.bufferView?.data;\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (data == null)\n        return {};\n    return { data, mimeType: source.mimeType, sampler };\n}\nasync function loadMaterial(material, defaultMaterial, device) {\n    const mat = {};\n    if (material.pbrMetallicRoughness != null) {\n        const { baseColorFactor, baseColorTexture, metallicFactor, metallicRoughnessTexture, roughnessFactor, } = material.pbrMetallicRoughness;\n        if (metallicRoughnessTexture?.texture.source == null) {\n            if (metallicFactor == null)\n                mat.metallicFactor = DEFAULT_METALLIC;\n            if (roughnessFactor == null)\n                mat.roughnessFactor = DEFAULT_ROUGHNESS;\n        }\n        else {\n            const { data, mimeType, sampler } = getImageData(metallicRoughnessTexture.texture);\n            if (data != null) {\n                mat.metallicRoughnessTexture = await (0,texture_importing/* imageToTexture */.u)({\n                    label: `${material.id} mr texture`,\n                    data,\n                    mimeType,\n                    usage: GPUTextureUsage.TEXTURE_BINDING,\n                    device,\n                });\n                if (sampler)\n                    mat.metallicRoughnessSampler = toSamplerDescription(sampler);\n            }\n        }\n        if (baseColorTexture?.texture.source != null) {\n            const { data, mimeType, sampler } = getImageData(baseColorTexture.texture);\n            if (data != null) {\n                mat.baseColorTexture = await (0,texture_importing/* imageToTexture */.u)({\n                    label: `${material.id} mr texture`,\n                    data,\n                    mimeType,\n                    usage: GPUTextureUsage.TEXTURE_BINDING,\n                    device,\n                    srgbToLinear: true,\n                });\n                if (sampler)\n                    mat.baseColorSampler = toSamplerDescription(sampler);\n            }\n        }\n        if (baseColorFactor != null)\n            mat.baseColorFactor = baseColorFactor;\n        if (metallicFactor != null)\n            mat.metallicFactor = metallicFactor;\n        if (roughnessFactor != null)\n            mat.metallicFactor = roughnessFactor;\n    }\n    else {\n        mat.metallicFactor = DEFAULT_METALLIC;\n        mat.roughnessFactor = DEFAULT_ROUGHNESS;\n    }\n    if (material.normalTexture?.texture.source != null) {\n        const { data, mimeType, sampler } = getImageData(material.normalTexture.texture);\n        if (data != null) {\n            mat.normalTexture = await (0,texture_importing/* imageToTexture */.u)({\n                label: `${material.id} mr texture`,\n                data,\n                mimeType,\n                usage: GPUTextureUsage.TEXTURE_BINDING,\n                device,\n            });\n            if (sampler)\n                mat.normalSampler = toSamplerDescription(sampler);\n        }\n    }\n    const { emissiveFactor, emissiveTexture } = material;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n    const emissiveStrength = material.extensions?.KHR_materials_emissive_strength?.emissiveStrength;\n    if (emissiveTexture != null || emissiveFactor?.some((x) => x > 0)) {\n        mat.emissiveFactor = emissiveFactor ?? [1, 1, 1];\n        mat.emissiveSampler = { magFilter: 'linear', minFilter: 'linear' };\n        if (emissiveTexture?.texture.source != null) {\n            const { data, mimeType, sampler } = getImageData(emissiveTexture.texture);\n            if (data != null) {\n                mat.emissiveTexture = await (0,texture_importing/* imageToTexture */.u)({\n                    label: `${material.id} mr texture`,\n                    data,\n                    mimeType,\n                    usage: GPUTextureUsage.TEXTURE_BINDING,\n                    device,\n                    srgbToLinear: true,\n                });\n                if (sampler)\n                    mat.emissiveSampler = toSamplerDescription(sampler);\n            }\n        }\n        else {\n            mat.emissiveTexture = defaultMaterial.baseColorTexture;\n        }\n        if (emissiveStrength != null && typeof emissiveStrength === 'number') {\n            wgpu_matrix_module/* vec3 */.eR.scale(mat.emissiveFactor, emissiveStrength, mat.emissiveFactor);\n        }\n    }\n    if (material.doubleSided)\n        mat.doubleSided = true;\n    if (material.alphaMode === 'MASK')\n        mat.alphaCutoff = material.alphaCutoff ?? 0.5;\n    return { ...defaultMaterial, ...mat };\n}\n\n;// ./src/rendering/default-forward-pass/material-draw-data.ts\n\n\nclass MaterialDrawData {\n    constructor(data, device, descriptorMap, primitiveFeatures, primitives) {\n        this.primitives = [];\n        this.features = primitiveFeatures;\n        if (data.doubleSided)\n            this.features |= pipeline_feature_flags/* PipelineFeatureFlags */.Ot.DoubleSided;\n        // TODO : don't hardcode the properties features\n        const properties = new Float32Array(12);\n        properties.set(data.baseColorFactor);\n        properties[4] = data.metallicFactor;\n        properties[5] = data.roughnessFactor;\n        if (data.alphaCutoff != null) {\n            this.features |= pipeline_feature_flags/* PipelineFeatureFlags */.Ot.AlphaCutoff;\n            properties[6] = data.alphaCutoff;\n        }\n        if (data.emissiveFactor != null) {\n            properties.set(data.emissiveFactor, 8);\n        }\n        this.propertiesBuffer = (0,data_copy/* createAndCopyBuffer */.Lr)(properties, GPUBufferUsage.UNIFORM, device);\n        const entries = [\n            { binding: 0, resource: { buffer: this.propertiesBuffer } },\n            { binding: 1, resource: descriptorMap.getSampler(data.baseColorSampler) },\n            { binding: 2, resource: data.baseColorTexture.createView({ dimension: '2d' }) },\n            { binding: 3, resource: descriptorMap.getSampler(data.normalSampler) },\n            { binding: 4, resource: data.normalTexture.createView({ dimension: '2d' }) },\n            { binding: 5, resource: descriptorMap.getSampler(data.metallicRoughnessSampler) },\n            { binding: 6, resource: data.metallicRoughnessTexture.createView({ dimension: '2d' }) },\n        ];\n        if (data.emissiveTexture != null) {\n            this.features |= pipeline_feature_flags/* PipelineFeatureFlags */.Ot.Emissive;\n            entries.push({\n                binding: 7,\n                resource: descriptorMap.getSampler(data.emissiveSampler ?? {}),\n            });\n            entries.push({\n                binding: 8,\n                resource: data.emissiveTexture.createView({ dimension: '2d' }),\n            });\n        }\n        this.layout = descriptorMap.getMaterialBindGroup(this.features);\n        this.matData = data;\n        this.bindGroup = device.createBindGroup({\n            label: (0,pipeline_feature_flags/* featureFlagsToString */.UZ)(this.features),\n            layout: this.layout,\n            entries,\n        });\n        if (primitives != null) {\n            this.addPrimitives(...primitives);\n        }\n    }\n    draw(passEncoder, queue) {\n        if (this.primitives.length === 0)\n            return;\n        passEncoder.setBindGroup(1, this.bindGroup);\n        for (const primitive of this.primitives) {\n            primitive.draw(passEncoder, queue);\n        }\n    }\n    addPrimitives(...drawData) {\n        const filtered = drawData.filter((data) => {\n            if ((data.features & this.features) === data.features)\n                return true;\n            console.warn(`invalid primitive added to material: \nprimitive: ${data.name}\nprimitive features: ${(0,pipeline_feature_flags/* featureFlagsToString */.UZ)(data.features).toString()}\nmaterial: ${this.matData.name}\nmaterial features: ${(0,pipeline_feature_flags/* featureFlagsToString */.UZ)(this.features).toString()}`);\n            return false;\n        });\n        this.primitives.push(...filtered);\n    }\n}\n\n;// ./src/rendering/default-forward-pass/geometry-pipeline.ts\n\nclass GeometryPipeline {\n    constructor(features, maps) {\n        this.materials = [];\n        this.features = (0,pipeline_feature_flags/* maskRedundantFeatures */.P7)(features);\n        const module = maps.getShaderModule(features);\n        this.pipeline = maps.device.createRenderPipeline({\n            label: (0,pipeline_feature_flags/* featureFlagsToString */.UZ)(features),\n            layout: maps.getForwardPipelineLayout(features),\n            primitive: maps.getPrimitiveState(features),\n            vertex: {\n                entryPoint: 'vs',\n                buffers: [maps.getVertexLayout(features)],\n                module,\n            },\n            fragment: {\n                entryPoint: 'fs',\n                module,\n                targets: maps.gbuffer.targets,\n            },\n            depthStencil: {\n                depthWriteEnabled: true,\n                depthCompare: 'less-equal',\n                format: maps.gbuffer.depth.format,\n            },\n        });\n    }\n    addMaterials(...materials) {\n        if (materials.some((data) => data.features !== this.features)) {\n            throw new Error('invalid primitive added to material');\n        }\n        this.materials.push(...materials);\n    }\n    draw(passEncoder, queue) {\n        passEncoder.setPipeline(this.pipeline);\n        for (const mat of this.materials) {\n            mat.draw(passEncoder, queue);\n        }\n    }\n}\n\n;// ./src/samples/gltf-viewer/loader/gltf-loader.ts\n\n\n\n\n\n\n\n\nconst defaultLayout = [\n    {\n        name: 'POSITION',\n        type: 'VEC3',\n        componentType: 5126 /* ComponentType.float32 */,\n    },\n    {\n        name: 'TEXCOORD_0',\n        type: 'VEC2',\n        componentType: 5126 /* ComponentType.float32 */,\n    },\n    {\n        name: 'TANGENT',\n        type: 'VEC4',\n        componentType: 5126 /* ComponentType.float32 */,\n        depends: ['NORMAL'],\n        fill: [1, 0, 0, 1],\n    },\n    {\n        name: 'NORMAL',\n        type: 'VEC3',\n        componentType: 5126 /* ComponentType.float32 */,\n        strip: true,\n        feature: pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexNormals,\n    },\n    {\n        name: 'COLOR_0',\n        type: 'VEC4',\n        componentType: 5126 /* ComponentType.float32 */,\n        strip: true,\n        feature: pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexColors,\n        fill: [1, 1, 1, 1],\n    },\n];\nconst recurseNode = (parentMatrix, meshes) => (node) => {\n    const matrix = node.matrix ?? wgpu_matrix_module/* mat4 */.pB.identity();\n    if (node.matrix == null) {\n        if (node.scale)\n            wgpu_matrix_module/* mat4 */.pB.scaling(node.scale, matrix);\n        if (node.rotation) {\n            const { axis, angle } = wgpu_matrix_module/* quat */.Yu.toAxisAngle(node.rotation);\n            wgpu_matrix_module/* mat4 */.pB.rotate(matrix, axis, angle, matrix);\n        }\n        if (node.translation != null) {\n            wgpu_matrix_module/* mat4 */.pB.setTranslation(matrix, node.translation, matrix);\n        }\n    }\n    wgpu_matrix_module/* mat4 */.pB.mul(parentMatrix, matrix, matrix);\n    if (node.mesh != null) {\n        if (!meshes.has(node.mesh))\n            meshes.set(node.mesh, []);\n        meshes.get(node.mesh).push(matrix); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n    }\n    node.children?.forEach(recurseNode(matrix, meshes));\n};\nasync function importGltf(url, device, descriptorMap, defaultMaterial, layout = defaultLayout, pipelines = {}, \n// eslint-disable-next-line no-console\nlog = console.log) {\n    log('starting import');\n    const start = Date.now();\n    const gltfWithBuffers = await (0,load/* load */.H)(url, gltf_loader/* GLTFLoader */.B);\n    log(`finished loading: ${Date.now() - start}`);\n    const { scene } = (0,post_process_gltf/* postProcessGLTF */.R)(gltfWithBuffers);\n    if (scene?.nodes == null)\n        return pipelines;\n    log(`finished processing: ${Date.now() - start}`);\n    const meshes = new Map();\n    scene.nodes.forEach(recurseNode(wgpu_matrix_module/* mat4 */.pB.identity(), meshes));\n    log(`finished creating instances: ${Date.now() - start}`);\n    const meshEntries = Array.from(meshes.entries());\n    const primitivePromises = meshEntries.flatMap(([{ primitives }, instances]) => primitives.map((prim) => loadPrimitive(layout, prim, instances, descriptorMap, device)));\n    const primitiveDescriptors = await Promise.all(primitivePromises);\n    log(`finished creating primitives: ${Date.now() - start}`);\n    const materialMap = new Map();\n    const materialPromises = {};\n    for (const { material, drawData } of primitiveDescriptors) {\n        if (drawData == null)\n            continue;\n        const key = { materialId: material?.id, features: drawData.features };\n        if (!materialMap.has(key))\n            materialMap.set(key, []);\n        materialMap.get(key).push(drawData); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n        if (material != null) {\n            materialPromises[material.id] = loadMaterial(material, defaultMaterial, device);\n        }\n    }\n    const materialEntries = Object.entries(materialPromises)\n        .map(async ([id, mat]) => [id, await mat]);\n    const materialDescriptors = Object.fromEntries(await Promise.all(materialEntries));\n    log(`finished creating material descriptors: ${Date.now() - start}`);\n    const fullDefaultMat = { ...defaultMaterial, metallicFactor: 0 };\n    for (const [{ features, materialId }, drawDatas] of materialMap.entries()) {\n        const descriptor = materialId != null ? materialDescriptors[materialId] : fullDefaultMat;\n        const mat = new MaterialDrawData(descriptor, device, descriptorMap, features, drawDatas);\n        const { features: f } = mat;\n        pipelines[f] ??= new GeometryPipeline(f, descriptorMap);\n        pipelines[f].addMaterials(mat);\n    }\n    log(`finished: ${Date.now() - start}`);\n    return pipelines;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5308\n")},5427:(module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ getSkyboxOptions)\n/* harmony export */ });\n/* unused harmony export hdrs */\n/* harmony import */ var _utils_texture_importing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8862);\n/* harmony import */ var _utils_texture_processing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9629);\n/* harmony import */ var _property_listener__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9528);\n\n\n\nconst hdrPromises = await fetch(\"https://api.github.com/repos/KhronosGroup/glTF-Sample-Environments/contents?ref=low_resolution_hdrs\", { headers: { 'Content-Type': 'application/vnd.github.object+json' } })\n    .then((res) => res.json());\nconst hdrs = Object.fromEntries(hdrPromises.flatMap(({ name, download_url }) => typeof name === 'string' && typeof download_url === 'string' && download_url.endsWith('.hdr') ? [[name, download_url]] : []));\nasync function processSkybox(device, file) {\n    let buffer;\n    if (file instanceof ArrayBuffer) {\n        buffer = file;\n    }\n    else if (file instanceof File) {\n        buffer = await file.arrayBuffer();\n    }\n    else {\n        const res = await fetch(file);\n        buffer = await res.arrayBuffer();\n    }\n    const hdr = (0,_utils_texture_importing__WEBPACK_IMPORTED_MODULE_0__/* .parseHDR */ .y)(buffer);\n    return (0,_utils_texture_processing__WEBPACK_IMPORTED_MODULE_1__/* .equirectangularToCubemap */ .l3)(device, hdr, {\n        format: 'rgba16float',\n        usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.COPY_SRC,\n    });\n}\nfunction getSkyboxOptions(target) {\n    return {\n        [_property_listener__WEBPACK_IMPORTED_MODULE_2__/* .ListenerSyms */ .t.$type]: 'file',\n        [_property_listener__WEBPACK_IMPORTED_MODULE_2__/* .ListenerSyms */ .t.$callback]: async (val, key) => {\n            if (key !== 'value' || val == null)\n                return;\n            if (typeof val === 'string' || val instanceof File) {\n                const texture = await processSkybox(target.device, val);\n                const res = target.setSkybox(texture);\n                if (res instanceof Promise)\n                    await res;\n            }\n        },\n        accept: '.hdr',\n        selection: {\n            value: Object.keys(hdrs)[0],\n            initialValues: hdrs,\n        },\n        process: (file) => file,\n    };\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQyNy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUF5RDtBQUNpQjtBQUN2QjtBQUVuRCxNQUFNLFdBQVcsR0FBRyxNQUFNLEtBQUssQ0FBQyxxR0FBYyxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsY0FBYyxFQUFFLG9DQUFvQyxFQUFFLEVBQUUsQ0FBQztLQUNqSCxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBOEIsQ0FBQztBQUVyRCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLENBQUMsT0FBTyxJQUFJLEtBQUssUUFBUSxJQUFJLE9BQU8sWUFBWSxLQUFLLFFBQVEsSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFFck4sS0FBSyxVQUFVLGFBQWEsQ0FBQyxNQUFpQixFQUFFLElBQXVDO0lBQ25GLElBQUksTUFBbUIsQ0FBQztJQUN4QixJQUFJLElBQUksWUFBWSxXQUFXLEVBQUUsQ0FBQztRQUM5QixNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ2xCLENBQUM7U0FBTSxJQUFJLElBQUksWUFBWSxJQUFJLEVBQUUsQ0FBQztRQUM5QixNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdEMsQ0FBQztTQUFNLENBQUM7UUFDSixNQUFNLEdBQUcsR0FBRyxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QixNQUFNLEdBQUcsTUFBTSxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckMsQ0FBQztJQUVELE1BQU0sR0FBRyxHQUFHLDJFQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFN0IsT0FBTyw2RkFBd0IsQ0FDM0IsTUFBTSxFQUNOLEdBQUcsRUFDSDtRQUNJLE1BQU0sRUFBRSxhQUFhO1FBQ3JCLEtBQUssRUFBRSxlQUFlLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDLFFBQVE7S0FDdEcsQ0FDSixDQUFDO0FBQ04sQ0FBQztBQUljLFNBQVMsZ0JBQWdCLENBQUMsTUFBb0I7SUFDekQsT0FBTztRQUNILENBQUMscUVBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxNQUFlO1FBQ3JDLENBQUMscUVBQVksQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBWSxFQUFFLEdBQWdCLEVBQUUsRUFBRTtZQUMvRCxJQUFJLEdBQUcsS0FBSyxPQUFPLElBQUksR0FBRyxJQUFJLElBQUk7Z0JBQUUsT0FBTztZQUMzQyxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsSUFBSSxHQUFHLFlBQVksSUFBSSxFQUFFLENBQUM7Z0JBQ2pELE1BQU0sT0FBTyxHQUFHLE1BQU0sYUFBYSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQ3hELE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ3RDLElBQUksR0FBRyxZQUFZLE9BQU87b0JBQUUsTUFBTSxHQUFHLENBQUM7WUFDMUMsQ0FBQztRQUNMLENBQUM7UUFDRCxNQUFNLEVBQUUsTUFBTTtRQUNkLFNBQVMsRUFBRTtZQUNQLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzQixhQUFhLEVBQUUsSUFBSTtTQUN0QjtRQUNELE9BQU8sRUFBRSxDQUFDLElBQVUsRUFBRSxFQUFFLENBQUMsSUFBSTtLQUNoQyxDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NidW50LXBvcnRmb2xpby8uL3NyYy9zYW1wbGVzL3NldHRpbmdzL3NreWJveC1vcHRpb25zLnRzP2UxMDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VIRFIgfSBmcm9tICcuLi8uLi91dGlscy90ZXh0dXJlLWltcG9ydGluZyc7XG5pbXBvcnQgeyBlcXVpcmVjdGFuZ3VsYXJUb0N1YmVtYXAgfSBmcm9tICcuLi8uLi91dGlscy90ZXh0dXJlLXByb2Nlc3NpbmcnO1xuaW1wb3J0IHsgTGlzdGVuZXJTeW1zIH0gZnJvbSAnLi9wcm9wZXJ0eS1saXN0ZW5lcic7XG5cbmNvbnN0IGhkclByb21pc2VzID0gYXdhaXQgZmV0Y2goSERSX0JBU0VfVVJMX18sIHsgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3ZuZC5naXRodWIub2JqZWN0K2pzb24nIH0gfSlcbiAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKSBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPltdO1xuXG5leHBvcnQgY29uc3QgaGRycyA9IE9iamVjdC5mcm9tRW50cmllcyhoZHJQcm9taXNlcy5mbGF0TWFwKCh7IG5hbWUsIGRvd25sb2FkX3VybCB9KSA9PiB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIGRvd25sb2FkX3VybCA9PT0gJ3N0cmluZycgJiYgZG93bmxvYWRfdXJsLmVuZHNXaXRoKCcuaGRyJykgPyBbW25hbWUsIGRvd25sb2FkX3VybF1dIDogW10pKTtcblxuYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc1NreWJveChkZXZpY2U6IEdQVURldmljZSwgZmlsZTogc3RyaW5nIHwgVVJMIHwgRmlsZSB8IEFycmF5QnVmZmVyKSB7XG4gICAgbGV0IGJ1ZmZlcjogQXJyYXlCdWZmZXI7XG4gICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgICBidWZmZXIgPSBmaWxlO1xuICAgIH0gZWxzZSBpZiAoZmlsZSBpbnN0YW5jZW9mIEZpbGUpIHtcbiAgICAgICAgYnVmZmVyID0gYXdhaXQgZmlsZS5hcnJheUJ1ZmZlcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGZpbGUpO1xuICAgICAgICBidWZmZXIgPSBhd2FpdCByZXMuYXJyYXlCdWZmZXIoKTtcbiAgICB9XG5cbiAgICBjb25zdCBoZHIgPSBwYXJzZUhEUihidWZmZXIpO1xuXG4gICAgcmV0dXJuIGVxdWlyZWN0YW5ndWxhclRvQ3ViZW1hcChcbiAgICAgICAgZGV2aWNlLFxuICAgICAgICBoZHIsXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZvcm1hdDogJ3JnYmExNmZsb2F0JyxcbiAgICAgICAgICAgIHVzYWdlOiBHUFVUZXh0dXJlVXNhZ2UuVEVYVFVSRV9CSU5ESU5HIHwgR1BVVGV4dHVyZVVzYWdlLlNUT1JBR0VfQklORElORyB8IEdQVVRleHR1cmVVc2FnZS5DT1BZX1NSQyxcbiAgICAgICAgfSxcbiAgICApO1xufVxuXG5leHBvcnQgdHlwZSBTa3lib3hUYXJnZXQgPSB7IGRldmljZTogR1BVRGV2aWNlLCBzZXRTa3lib3g6IChyZXNvdXJjZTogR1BVVGV4dHVyZSkgPT4gdW5rbm93biB9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTa3lib3hPcHRpb25zKHRhcmdldDogU2t5Ym94VGFyZ2V0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgW0xpc3RlbmVyU3ltcy4kdHlwZV06ICdmaWxlJyBhcyBjb25zdCxcbiAgICAgICAgW0xpc3RlbmVyU3ltcy4kY2FsbGJhY2tdOiBhc3luYyAodmFsOiB1bmtub3duLCBrZXk6IFByb3BlcnR5S2V5KSA9PiB7XG4gICAgICAgICAgICBpZiAoa2V5ICE9PSAndmFsdWUnIHx8IHZhbCA9PSBudWxsKSByZXR1cm47XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgfHwgdmFsIGluc3RhbmNlb2YgRmlsZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRleHR1cmUgPSBhd2FpdCBwcm9jZXNzU2t5Ym94KHRhcmdldC5kZXZpY2UsIHZhbCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gdGFyZ2V0LnNldFNreWJveCh0ZXh0dXJlKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzIGluc3RhbmNlb2YgUHJvbWlzZSkgYXdhaXQgcmVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhY2NlcHQ6ICcuaGRyJyxcbiAgICAgICAgc2VsZWN0aW9uOiB7XG4gICAgICAgICAgICB2YWx1ZTogT2JqZWN0LmtleXMoaGRycylbMF0sXG4gICAgICAgICAgICBpbml0aWFsVmFsdWVzOiBoZHJzLFxuICAgICAgICB9LFxuICAgICAgICBwcm9jZXNzOiAoZmlsZTogRmlsZSkgPT4gZmlsZSxcbiAgICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5427\n")},157:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/* wgsl */`\r\n    struct VertOut {\r\n        @builtin(position) pos: vec4f,\r\n        @location(0) uv: vec2f,\r\n    }\r\n\r\n    @vertex\r\n    fn vs(@builtin(vertex_index) idx: u32) -> VertOut {\r\n        const pos = array(\r\n            vec2f(-1,  3),\r\n            vec2f(3, -1),\r\n            vec2f(-1, -1),\r\n        );\r\n        var res: VertOut;\r\n        res.pos = vec4f(pos[idx], 0.0, 1.0);\r\n        res.uv = pos[idx] * vec2f(0.5, -0.5) + 0.5;\r\n        return res;\r\n    }\r\n`);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU3LmpzIiwibWFwcGluZ3MiOiI7OztBQUFBLDJFQUF5Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBa0J4QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2J1bnQtcG9ydGZvbGlvLy4vc3JjL3NoYWRlcnMvYmxpdC12ZXJ0LnNoYWRlci50cz9hNTE4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IC8qIHdnc2wgKi9gXHJcbiAgICBzdHJ1Y3QgVmVydE91dCB7XHJcbiAgICAgICAgQGJ1aWx0aW4ocG9zaXRpb24pIHBvczogdmVjNGYsXHJcbiAgICAgICAgQGxvY2F0aW9uKDApIHV2OiB2ZWMyZixcclxuICAgIH1cclxuXHJcbiAgICBAdmVydGV4XHJcbiAgICBmbiB2cyhAYnVpbHRpbih2ZXJ0ZXhfaW5kZXgpIGlkeDogdTMyKSAtPiBWZXJ0T3V0IHtcclxuICAgICAgICBjb25zdCBwb3MgPSBhcnJheShcclxuICAgICAgICAgICAgdmVjMmYoLTEsICAzKSxcclxuICAgICAgICAgICAgdmVjMmYoMywgLTEpLFxyXG4gICAgICAgICAgICB2ZWMyZigtMSwgLTEpLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdmFyIHJlczogVmVydE91dDtcclxuICAgICAgICByZXMucG9zID0gdmVjNGYocG9zW2lkeF0sIDAuMCwgMS4wKTtcclxuICAgICAgICByZXMudXYgPSBwb3NbaWR4XSAqIHZlYzJmKDAuNSwgLTAuNSkgKyAwLjU7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuYDtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///157\n")},6097:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   V: () => (/* binding */ toWorldDir),\n/* harmony export */   X: () => (/* binding */ cubemapSampleConversions)\n/* harmony export */ });\nconst toWorldDir = /* wgsl */ `\n    fn toWorldDir(coord: vec3u, size: u32) -> vec3f {\n        let uv = (2.0 / f32(size)) * (vec2f(coord.xy) + 0.5) - 1.0;\n\n        var pos: vec3f;\n        switch (coord.z) {\n            case 0  { pos = vec3(  1.0, -uv.y, -uv.x); }\n            case 1  { pos = vec3( -1.0, -uv.y,  uv.x); }\n            case 2  { pos = vec3( uv.x,   1.0,  uv.y); }\n            case 3  { pos = vec3( uv.x,  -1.0, -uv.y); }\n            case 4  { pos = vec3( uv.x, -uv.y,   1.0); }\n            default { pos = vec3(-uv.x, -uv.y,  -1.0); }\n        }\n\n        return normalize(pos);\n    }\n\n    fn toWorldDirF32(coord: vec2f, face: u32) -> vec3f {\n        let uv = 2.0 * coord - 1.0;\n\n        var pos: vec3f;\n        switch (face) {\n            case 0  { pos = vec3(  1.0, -uv.y, -uv.x); }\n            case 1  { pos = vec3( -1.0, -uv.y,  uv.x); }\n            case 2  { pos = vec3( uv.x,   1.0,  uv.y); }\n            case 3  { pos = vec3( uv.x,  -1.0, -uv.y); }\n            case 4  { pos = vec3( uv.x, -uv.y,   1.0); }\n            default { pos = vec3(-uv.x, -uv.y,  -1.0); }\n        }\n\n        return normalize(pos);\n    }\n`;\n/**\n *  WGSL functions for sampling across adjacent faces of a cubemap\n */\nconst cubemapSampleConversions = /* wgsl */ `\n    const INVALID_FACE = 6;\n    const INVALID_IDX = 4294967295u; // max u32\n\n    fn cubeSampleCoord(coord: vec3i, w: u32) -> vec3u {\n        // a flattened matrix of destination faces based on\n        // starting face and direction\n        const dfaces = array(\n            //                               I  Up Down Left Right Invalid\n            0, 2, 3, 4, 5, INVALID_FACE, // +X  +Y   -Y   +Z   -Z   \n            1, 2, 3, 5, 4, INVALID_FACE, // -X  +Y   -Y   -Z   +Z \n            2, 5, 4, 1, 0, INVALID_FACE, // +Y  -Z   +Z   -X   +X \n            3, 4, 5, 1, 0, INVALID_FACE, // -Y  +Z   -Z   -X   +X \n            4, 2, 3, 1, 0, INVALID_FACE, // +Z  +Y   -Y   -X   +X \n            5, 2, 3, 0, 1, INVALID_FACE, // -Z  +Y   -Y   +X   -X \n        );\n\n        // a flattened matrix in the same form as dfaces\n        // giving the index of the dmat array containing \n        // the transformation from the starting face to \n        // the destination face\n        const dindices = array(\n            0, 1,  2,  3,  4,  0,\n            0, 5,  6,  3,  4,  0,\n            0, 7,  8,  9,  10, 0,\n            0, 11, 12, 13, 14, 0,\n            0, 11, 8,  3,  4,  0,\n            0, 7,  12, 3,  4,  0,\n        );\n\n        // 2x4 matrices transforming a coordinate vector <u, v, w, 1>\n        // from one face to another\n        const dmats = array(\n            array(// 0\n                vec4(1, 0, 0, 0),   // u = u\n                vec4(0, 1, 0, 0),   // v = v\n            ),\n            array(// 1\n                vec4(0, 1, 1, 0),   // u = v + w\n                vec4(-1, 0, 1, -1), // v = w - u - 1\n            ),\n            array(// 2\n                vec4(0, -1, 2, -1), // u = 2w - v - 1\n                vec4(1, 0, 0, 0),   // v = u\n            ),\n            array(// 3\n                vec4(1, 0, 1, 0),   // u = u + w\n                vec4(0, 1, 0, 0),   // v = v\n            ),\n            array(// 4\n                vec4(1, 0, -1, 0),  // u = u - w\n                vec4(0, 1, 0, 0),   // v = v\n            ),\n            array(// 5\n                vec4(0, -1, 0, -1), // u = -v - 1\n                vec4(1, 0, 0, 0),   // v = u\n            ),\n            array(// 6\n                vec4(0, 1, -1, 0),  // u = v - w\n                vec4(-1, 0, 1, -1), // v = w - u - 1\n            ),\n            array(// 7\n                vec4(-1, 0, 1, -1), // u = w - u - 1\n                vec4(0, -1, 0, -1), // v = -v - 1\n            ),\n            array(// 8\n                vec4(1, 0, 0, 0),   // u = u\n                vec4(0, 1, -1, 0),  // v = v - w\n            ),\n            array(// 9\n                vec4(0, 1, 0, 0),   // u = v\n                vec4(-1, 0, 0, -1), // v = -u - 1\n            ),\n            array(// 10\n                vec4(0, -1, 1, -1), // u = w - v - 1\n                vec4(1, 0, -1, 0),  // v = u - w\n            ),\n            array(// 11\n                vec4(1, 0, 0, 0),   // u = u\n                vec4(0, 1, 1, 0),   // v = v + w\n            ),\n            array(// 12\n                vec4(-1, 0, 1, -1), // u = w - u - 1\n                vec4(0, -1, 2, -1), // v = 2w - v - 1\n            ),\n            array(// 13\n                vec4(0, -1, 1, -1), // u = w - v - 1\n                vec4(1, 0, 1, 0),   // v = u + w\n            ),\n            array(// 14\n                vec4(0, 1, 0, 0),   // u = v\n                vec4(-1, 0, 2, -1), // v = 2w - u - 1\n            ),\n        );\n\n        let iw = i32(w);\n\n        var dir = 0;\n        if (\n            coord.y >= iw * 2 - 1 \n            || coord.y <= -iw \n            || coord.x >= iw * 2 - 1 \n            || coord.x <= -iw\n        ) {\n            dir = 5;\n        } else {\n            if (coord.y < 0) {\n                dir = 1;\n            } else if (coord.y >= iw) {\n                dir = 2;\n            }\n            if (coord.x < 0) {\n                dir = select(5, 3, dir == 0);\n            } else if (coord.x >= iw) {\n                dir = select(5, 4, dir == 0);\n            }\n        }\n\n        let idx = coord.z * 6 + dir;\n        let samp = vec4(coord.xy, iw, 1);\n        let dmat = dmats[dindices[idx]];\n        return vec3u(vec3(dot(dmat[0], samp), dot(dmat[1], samp), dfaces[idx]));\n    }\n\n    fn cubeCoordToIdx(coord: vec3u, w: u32) -> u32 {\n        return coord.x + coord.y * w + coord.z * w * w;\n    }\n\n    fn cubeIdxToCoord(idx: u32, w: u32) -> vec3u {\n        let w2 = w * w;\n        let fidx = idx % w2;\n        return vec3u(fidx % w, fidx / w, idx / w2);\n    }\n\n    fn cubeSampleIdx(uvf: vec3i, w: u32) -> u32 {\n        let coord = cubeSampleCoord(uvf, w);\n        return select(\n            cubeCoordToIdx(coord, w), \n            INVALID_IDX, \n            coord.z == INVALID_FACE,\n        );\n    }\n`;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6097\n")},5752:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Lr: () => (/* binding */ createAndCopyBuffer)\n/* harmony export */ });\n/* unused harmony exports createAndCopyCubemap, ktx2ToTexture, textureToArrayBuffer, textureToKTX */\n/* harmony import */ var _rendering_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3970);\n\n\n\nfunction createAndCopyBuffer(arr, usage, device, label, alignment = 4) {\n    const pad = alignment - 1;\n    const buffer = device.createBuffer({\n        label,\n        usage,\n        size: (arr.byteLength + pad) & ~pad,\n        mappedAtCreation: true,\n    });\n    const writeArray = new Uint8Array(buffer.getMappedRange());\n    const readArray = arr instanceof ArrayBuffer\n        ? new Uint8Array(arr)\n        : new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n    writeArray.set(readArray);\n    buffer.unmap();\n    return buffer;\n}\nfunction createAndCopyCubemap(device, data, format, usage, label) {\n    const pixelSize = TextureFormatToSize[format];\n    if (pixelSize == null) {\n        throw new Error(`copy cubemap -- unsupported format: ${format}`);\n    }\n    const width = Math.sqrt(data.byteLength / (6 * pixelSize));\n    const size = { width, height: width, depthOrArrayLayers: 6 };\n    const texture = device.createTexture({\n        usage: usage | GPUTextureUsage.COPY_DST,\n        label,\n        format,\n        size,\n    });\n    device.queue.writeTexture({ texture }, data, { bytesPerRow: width * pixelSize, rowsPerImage: width }, size);\n    return texture;\n}\nfunction ktx2ToTexture(buffer, device, options) {\n    const arr = new Uint8Array(buffer);\n    const ktx = ktxparse.read(arr);\n    const format = VkFormatToWebGPU[ktx.vkFormat];\n    if (format == null) {\n        throw new Error(`ktx texture import -- unsupported format: ${ktx.vkFormat}\\n\\tCould not covert to webgpu`);\n    }\n    const pixelSize = TextureFormatToSize[format];\n    if (pixelSize == null) {\n        throw new Error(`ktx texture import -- unsupported format: ${ktx.vkFormat}\\n\\tCould not get pixel byte size`);\n    }\n    const size = {\n        width: ktx.pixelWidth,\n        height: ktx.pixelHeight,\n        depthOrArrayLayers: ktx.faceCount,\n    };\n    const maxMipCount = Math.ceil(Math.log2(Math.max(size.width, size.height))) + 1;\n    let mipLevelCount = ktx.levels.length;\n    if (options?.mipLevelCount === 'max') {\n        mipLevelCount = maxMipCount;\n    }\n    else if (typeof options?.mipLevelCount === 'number') {\n        mipLevelCount = Math.min(maxMipCount, options.mipLevelCount);\n    }\n    let usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n    if (options?.textureUsage)\n        usage |= options.textureUsage;\n    const texture = device.createTexture({\n        label: options?.label,\n        size,\n        mipLevelCount,\n        format,\n        usage,\n    });\n    const mipCopies = Math.min(ktx.levels.length, mipLevelCount) - 1;\n    for (let mipLevel = mipCopies; mipLevel >= 0; mipLevel -= 1) {\n        const width = size.width >> mipLevel;\n        const height = size.height >> mipLevel;\n        const { levelData } = ktx.levels[mipLevel];\n        const rawBytesPerRow = width * pixelSize;\n        const bytesPerRow = Math.max(rawBytesPerRow, 256);\n        const rowsPerImage = height;\n        const bytesPerImage = rowsPerImage * bytesPerRow;\n        let imageData = levelData;\n        if (bytesPerRow > rawBytesPerRow) {\n            imageData = new Uint8Array(bytesPerImage * texture.depthOrArrayLayers);\n            for (let h = 0; h < height * texture.depthOrArrayLayers; h += 1) {\n                for (let w = 0; w < rawBytesPerRow; w += 1) {\n                    imageData[w + h * bytesPerRow] = levelData[w + h * rawBytesPerRow];\n                }\n            }\n        }\n        const layerBatch = Math.min(Math.floor(device.limits.maxBufferSize / bytesPerImage), ktx.faceCount);\n        const layerCount = Math.ceil(ktx.faceCount / layerBatch);\n        for (let l = 0; l < layerCount; l += 1) {\n            const offset = l * layerBatch;\n            const count = Math.min(layerBatch, ktx.faceCount - offset);\n            const data = layerCount > 1\n                ? imageData.subarray(offset * bytesPerImage, (offset + count) * bytesPerImage)\n                : imageData;\n            device.queue.writeTexture({ mipLevel, texture, origin: [0, 0, offset] }, data, { bytesPerRow, rowsPerImage }, [width, height, count]);\n        }\n    }\n    return texture;\n}\nasync function textureToArrayBuffer({ device, texture, mipLevel = 0, returnBuffer, storageBuffer, resultBuffer, description, }) {\n    const pixelSize = TextureFormatToSize[texture.format];\n    const fullDescription = padTemplate `[textureToKTX${description ?? ''}${texture.label}] --`;\n    if (pixelSize == null) {\n        throw new Error(`${fullDescription} format ${texture.format} unsupported`);\n    }\n    const width = texture.width >> mipLevel;\n    const height = texture.height >> mipLevel;\n    const rawBytesPerRow = width * pixelSize;\n    const bytesPerRow = Math.max(rawBytesPerRow, 256);\n    const rowsPerImage = height;\n    const byteSize = rowsPerImage * bytesPerRow * texture.depthOrArrayLayers;\n    const resultSize = rawBytesPerRow * height * texture.depthOrArrayLayers;\n    if (resultBuffer != null && resultBuffer.byteLength < byteSize) {\n        throw new Error(`${fullDescription} given result array not large enough.\r\n${resultBuffer.byteLength} < ${byteSize}`);\n    }\n    if (storageBuffer != null && storageBuffer.size < byteSize) {\n        throw new Error(`${fullDescription} given storage buffer not large enough.\r\n${storageBuffer.size} < ${byteSize}`);\n    }\n    const requiredUsage = GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ;\n    if (storageBuffer != null && (storageBuffer.usage & requiredUsage) !== requiredUsage) {\n        throw new Error(`${fullDescription} given storage does not have correct usage flags.\r\nGiven: ${storageBuffer.usage}\r\nRequired: ${requiredUsage}`);\n    }\n    let imageData = resultBuffer ?? new Uint8Array(byteSize);\n    const storage = storageBuffer ?? device.createBuffer({\n        label: `${fullDescription} storage buffer`,\n        size: byteSize,\n        usage: requiredUsage,\n    });\n    const encoder = device.createCommandEncoder({ label: `${fullDescription} encoder` });\n    encoder.copyTextureToBuffer({ texture, mipLevel }, { buffer: storage, rowsPerImage, bytesPerRow }, { width, height, depthOrArrayLayers: texture.depthOrArrayLayers });\n    device.queue.submit([encoder.finish()]);\n    await Promise.all([\n        storage.mapAsync(GPUMapMode.READ, 0, byteSize),\n        device.queue.onSubmittedWorkDone(),\n    ]);\n    const mapped = storage.getMappedRange(0, byteSize);\n    imageData.set(new Uint8Array(mapped));\n    storage.unmap();\n    if (bytesPerRow > rawBytesPerRow) {\n        for (let h = 0; h < height * texture.depthOrArrayLayers; h += 1) {\n            for (let w = 0; w < rawBytesPerRow; w += 1) {\n                imageData[w + h * rawBytesPerRow] = imageData[w + h * bytesPerRow];\n            }\n        }\n        imageData = imageData.slice(0, resultSize);\n    }\n    return {\n        imageData,\n        storageBuffer: returnBuffer ? storage : undefined,\n    };\n}\nasync function textureToKTX(device, texture, cube = false) {\n    const pixelSize = TextureFormatToSize[texture.format];\n    const typeSize = TextureFormatToChannelSize[texture.format];\n    if (pixelSize == null || typeSize == null) {\n        throw new Error(`textureToKTX -- format ${texture.format} of ${texture.label} unsupported`);\n    }\n    const container = new ktxparse.KTX2Container();\n    container.pixelWidth = texture.width;\n    container.pixelHeight = texture.height;\n    container.vkFormat = WebGPUToVkFormat[texture.format];\n    container.typeSize = typeSize;\n    delete container.keyValue.KTXswizzle;\n    const dataFormat = container.dataFormatDescriptor[0];\n    dataFormat.colorModel = ktxparse.KHR_DF_MODEL_RGBSDA;\n    dataFormat.transferFunction = ktxparse.KHR_DF_TRANSFER_LINEAR;\n    dataFormat.bytesPlane[0] = pixelSize;\n    dataFormat.samples = [0, 1, 2, 3].map((i) => ({\n        channelType: [192, 193, 194, 207][i],\n        samplePosition: [0, 0, 0, 0],\n        bitLength: container.typeSize * 8 - 1,\n        bitOffset: container.typeSize * 8 * i,\n        sampleLower: -1082130432,\n        sampleUpper: 1065353216,\n    }));\n    if (texture.dimension === '3d') {\n        container.faceCount = 1;\n        container.pixelDepth = texture.depthOrArrayLayers;\n    }\n    else if (cube) {\n        const cubeLayers = texture.depthOrArrayLayers / 6;\n        container.layerCount = cubeLayers === 1 ? 0 : cubeLayers;\n        container.faceCount = 6;\n    }\n    else {\n        container.layerCount = texture.depthOrArrayLayers;\n        container.faceCount = 1;\n    }\n    let storageBuffer;\n    let imageData;\n    for (let i = 0; i < texture.mipLevelCount; i += 1) {\n        // eslint-disable-next-line no-await-in-loop\n        ({ imageData, storageBuffer } = await textureToArrayBuffer({\n            mipLevel: i,\n            returnBuffer: true,\n            device,\n            texture,\n            storageBuffer,\n        }));\n        container.levels.push({\n            levelData: imageData,\n            uncompressedByteLength: imageData.byteLength,\n        });\n    }\n    return ktxparse.write(container);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5752\n")},8862:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  u: () => (/* binding */ imageToTexture),\n  y: () => (/* binding */ parseHDR)\n});\n\n;// ./src/utils/data-conversion.ts\nconst { baseTable, shiftTable } = (() => {\n    const baseTable = new Uint32Array(256);\n    const shiftTable = new Uint32Array(256);\n    for (let i = 0; i < 255; ++i) {\n        const e = i - 127;\n        if (e < -27) { // very small number (0, -0)\n            baseTable[i] = 0x0000;\n            shiftTable[i] = 24;\n        }\n        else if (e < -14) { // small number (denorm)\n            baseTable[i] = 0x0400 >> (-e - 14);\n            shiftTable[i] = -e - 1;\n        }\n        else if (e <= 15) { // normal number\n            baseTable[i] = (e + 15) << 10;\n            shiftTable[i] = 13;\n        }\n        else { // e < 128, large number (Infinity, -Infinity)\n            baseTable[i] = 0x7c00;\n            shiftTable[i] = 24;\n        }\n    }\n    // e == 128, stay (NaN, Infinity, -Infinity)\n    baseTable[255] = 0x7c00;\n    shiftTable[255] = 13;\n    return { baseTable, shiftTable };\n})();\nconst conversionBuffer = new ArrayBuffer(4);\nconst floatView = new Float32Array(conversionBuffer);\nconst uintView = new Uint32Array(conversionBuffer);\nfunction toFloat16Bytes(val) {\n    floatView[0] = val;\n    const f = uintView[0];\n    const e = (f >> 23) & 0x1ff;\n    const idx = e & 0xff;\n    return baseTable[idx] + ((f & 0x007fffff) >> shiftTable[idx]) + ((e & 0x100) << 7);\n}\n\n// EXTERNAL MODULE: ./src/utils/texture-processing.ts\nvar texture_processing = __webpack_require__(9629);\n;// ./src/utils/texture-importing.ts\n\n\nasync function imageToTexture({ device, data, mimeType, usage = GPUTextureUsage.TEXTURE_BINDING, mips = true, format = 'rgba8unorm', colorSpace = 'srgb', label = '', srgbToLinear, }) {\n    const blob = new Blob([data], { type: mimeType });\n    const bitmap = await createImageBitmap(blob, { colorSpaceConversion: 'none' });\n    const size = { width: bitmap.width, height: bitmap.height };\n    const texture = device.createTexture({\n        label,\n        format,\n        size: size,\n        usage: usage | GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n        mipLevelCount: mips ? 1 + (Math.log2(Math.max(bitmap.width, bitmap.height)) | 0) : 1,\n    });\n    device.queue.copyExternalImageToTexture({ source: bitmap }, { texture, colorSpace }, size);\n    if (srgbToLinear)\n        (0,texture_processing/* srgbTextureToLinear */.sP)(device, texture);\n    if (mips)\n        void (0,texture_processing/* generateMips */.fF)(device, texture);\n    return texture;\n}\nfunction parseHDR(inData) {\n    const decoder = new TextDecoder();\n    const buffer = inData instanceof Uint8Array ? inData : new Uint8Array(inData);\n    let pos = 0;\n    const getLine = (lineLimit = 1024) => {\n        const limit = Math.min(buffer.length, lineLimit + pos);\n        const sub = buffer.subarray(pos, limit);\n        const end = sub.indexOf(0x0A) + 1;\n        pos += end;\n        return end === 0 ? undefined : decoder.decode(sub.subarray(0, end));\n    };\n    const importError = (msg) => new Error('HDR Import Error: ' + msg);\n    // #region Read Header\n    const magicTokenRegex = /^#\\?(\\S+)/;\n    const magicTokenLine = getLine();\n    if (magicTokenLine == null)\n        throw importError('no header found');\n    if (!magicTokenRegex.test(magicTokenLine))\n        throw importError('bad initial token');\n    const headerRegs = [\n        /FORMAT=(?<format>\\S+)/, // format\n        /-Y\\s+(?<Y>\\d+)\\s+\\+X\\s+(?<X>\\d+)/, // size\n        /EXPOSURE\\s*=\\s*(?<exposure>\\d+(\\.\\d+)?)/, // exposure\n        /GAMMA\\s*=\\s*(?<gamma>\\d+(\\.\\d+)?)/, // gamma\n    ];\n    const headerReg = new RegExp(`^\\\\s*(${headerRegs.map(({ source }) => `(${source})`).join('|')})\\\\s*$`);\n    let noFormat = true;\n    let gamma = 1; /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n    let exposure = 1; /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n    let width = undefined;\n    let height = undefined;\n    for (let line = getLine(); line != null; line = width == null ? getLine() : undefined) {\n        const groups = line.match(headerReg)?.groups;\n        if (groups == null)\n            continue;\n        if (groups.format != null) {\n            noFormat = false;\n        }\n        else if (groups.X != null && groups.Y != null) {\n            width = parseInt(groups.X);\n            height = parseInt(groups.Y);\n        }\n        else if (groups.gamma != null) {\n            gamma = parseFloat(groups.gamma);\n        }\n        else if (groups.exposure != null) {\n            exposure = parseFloat(groups.exposure);\n        }\n    }\n    if (noFormat)\n        throw importError('missing format specifier');\n    if (width == null || height == null)\n        throw importError('missing image size specifier');\n    // #endregion\n    // #region Read Scanline Data\n    let rawData;\n    const unencodable = width < 8 || width > 0x7fff;\n    const flatData = buffer[pos] !== 2 || buffer[pos + 1] !== 2 || (buffer[pos + 2] & 0x80) !== 0;\n    if (unencodable || flatData) {\n        rawData = buffer.subarray(pos);\n    }\n    else {\n        rawData = new Uint8Array(width * height * 4);\n        const end = 4 * width;\n        const scanline_buffer = new Uint8Array(end);\n        const len = buffer.byteLength;\n        for (let k = 0, offset = 0; k < height && pos < len; k++) {\n            if (pos + 4 > len)\n                throw importError('file ended durning scanline');\n            if ((2 != buffer[pos++]) || (2 != buffer[pos++]) || (((buffer[pos++] << 8) | buffer[pos++]) != width))\n                throw importError('bad rgbe scanline format');\n            let count;\n            for (let ptr = 0; ptr < end && pos < len; ptr += count) {\n                count = buffer[pos++];\n                const isEncodedRun = count > 128;\n                if (isEncodedRun)\n                    count -= 128;\n                if (count == 0 || ptr + count > end)\n                    throw importError('bad scanline data');\n                if (isEncodedRun) {\n                    scanline_buffer.fill(buffer[pos], ptr, ptr + count);\n                    pos += 1;\n                }\n                else {\n                    scanline_buffer.set(buffer.subarray(pos, pos + count), ptr);\n                    pos += count;\n                }\n            }\n            for (let i = 0; i < width; i++)\n                for (let j = 0; j < end; j += width)\n                    rawData[offset++] = scanline_buffer[i + j];\n        }\n    }\n    // #endregion\n    // #region Convert to Float16\n    const data = new Uint16Array(rawData.length);\n    const float16One = toFloat16Bytes(1);\n    for (let i = 0; i < width * height * 4; i += 4) {\n        const raw_e = rawData[i + 3];\n        const scale = Math.pow(2.0, raw_e - 128.0) / 255.0;\n        for (let j = 0; j < 3; j += 1) {\n            data[i + j] = toFloat16Bytes(Math.min(rawData[i + j] * scale, 65504));\n        }\n        data[i + 3] = float16One;\n    }\n    // #endregion\n    return { data, width, height, gamma, exposure };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM3QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBRW5ELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQzVCLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUMxRSxDQUFDO1FBQ0QsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUM7SUFDN0IsQ0FBQztJQUNELGFBQWE7SUFFYixPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxDQUFDO0FBQ3BELENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYnVudC1wb3J0Zm9saW8vLi9zcmMvdXRpbHMvZGF0YS1jb252ZXJzaW9uLnRzPzYwYzEiLCJ3ZWJwYWNrOi8vY2J1bnQtcG9ydGZvbGlvLy4vc3JjL3V0aWxzL3RleHR1cmUtaW1wb3J0aW5nLnRzPzQyNTIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBiYXNlVGFibGUsIHNoaWZ0VGFibGUgfSA9ICgoKSA9PiB7XG4gICAgY29uc3QgYmFzZVRhYmxlID0gbmV3IFVpbnQzMkFycmF5KDI1Nik7XG4gICAgY29uc3Qgc2hpZnRUYWJsZSA9IG5ldyBVaW50MzJBcnJheSgyNTYpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyNTU7ICsraSkge1xuICAgICAgICBjb25zdCBlID0gaSAtIDEyNztcbiAgICAgICAgaWYgKGUgPCAtMjcpIHsgLy8gdmVyeSBzbWFsbCBudW1iZXIgKDAsIC0wKVxuICAgICAgICAgICAgYmFzZVRhYmxlW2ldID0gMHgwMDAwO1xuICAgICAgICAgICAgc2hpZnRUYWJsZVtpXSA9IDI0O1xuICAgICAgICB9IGVsc2UgaWYgKGUgPCAtMTQpIHsgLy8gc21hbGwgbnVtYmVyIChkZW5vcm0pXG4gICAgICAgICAgICBiYXNlVGFibGVbaV0gPSAweDA0MDAgPj4gKC1lIC0gMTQpO1xuICAgICAgICAgICAgc2hpZnRUYWJsZVtpXSA9IC1lIC0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChlIDw9IDE1KSB7IC8vIG5vcm1hbCBudW1iZXJcbiAgICAgICAgICAgIGJhc2VUYWJsZVtpXSA9IChlICsgMTUpIDw8IDEwO1xuICAgICAgICAgICAgc2hpZnRUYWJsZVtpXSA9IDEzO1xuICAgICAgICB9IGVsc2UgeyAvLyBlIDwgMTI4LCBsYXJnZSBudW1iZXIgKEluZmluaXR5LCAtSW5maW5pdHkpXG4gICAgICAgICAgICBiYXNlVGFibGVbaV0gPSAweDdjMDA7XG4gICAgICAgICAgICBzaGlmdFRhYmxlW2ldID0gMjQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBlID09IDEyOCwgc3RheSAoTmFOLCBJbmZpbml0eSwgLUluZmluaXR5KVxuICAgIGJhc2VUYWJsZVsyNTVdID0gMHg3YzAwO1xuICAgIHNoaWZ0VGFibGVbMjU1XSA9IDEzO1xuXG4gICAgcmV0dXJuIHsgYmFzZVRhYmxlLCBzaGlmdFRhYmxlIH07XG59KSgpO1xuXG5jb25zdCBjb252ZXJzaW9uQnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDQpO1xuY29uc3QgZmxvYXRWaWV3ID0gbmV3IEZsb2F0MzJBcnJheShjb252ZXJzaW9uQnVmZmVyKTtcbmNvbnN0IHVpbnRWaWV3ID0gbmV3IFVpbnQzMkFycmF5KGNvbnZlcnNpb25CdWZmZXIpO1xuXG5leHBvcnQgZnVuY3Rpb24gdG9GbG9hdDE2Qnl0ZXModmFsOiBudW1iZXIpIHtcbiAgICBmbG9hdFZpZXdbMF0gPSB2YWw7XG4gICAgY29uc3QgZiA9IHVpbnRWaWV3WzBdO1xuICAgIGNvbnN0IGUgPSAoZiA+PiAyMykgJiAweDFmZjtcbiAgICBjb25zdCBpZHggPSBlICYgMHhmZjtcbiAgICByZXR1cm4gYmFzZVRhYmxlW2lkeF0gKyAoKGYgJiAweDAwN2ZmZmZmKSA+PiBzaGlmdFRhYmxlW2lkeF0pICsgKChlICYgMHgxMDApIDw8IDcpO1xufVxuIiwiaW1wb3J0IHsgdG9GbG9hdDE2Qnl0ZXMgfSBmcm9tICcuL2RhdGEtY29udmVyc2lvbic7XG5pbXBvcnQgeyBzcmdiVGV4dHVyZVRvTGluZWFyLCBnZW5lcmF0ZU1pcHMgfSBmcm9tICcuL3RleHR1cmUtcHJvY2Vzc2luZyc7XG5cbmV4cG9ydCB0eXBlIGltYWdlVG9UZXh0dXJlRGVzY3JpcHRvciA9IHtcbiAgICBkZXZpY2U6IEdQVURldmljZSxcbiAgICBkYXRhOiBVaW50OEFycmF5LFxuICAgIG1pbWVUeXBlPzogc3RyaW5nLFxuICAgIGxhYmVsPzogc3RyaW5nLFxuICAgIHVzYWdlPzogbnVtYmVyLFxuICAgIGZvcm1hdD86IEdQVVRleHR1cmVGb3JtYXQsXG4gICAgbWlwcz86IGJvb2xlYW4sXG4gICAgc3JnYlRvTGluZWFyPzogYm9vbGVhbixcbiAgICBjb2xvclNwYWNlPzogUHJlZGVmaW5lZENvbG9yU3BhY2UsXG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW1hZ2VUb1RleHR1cmUoe1xuICAgIGRldmljZSxcbiAgICBkYXRhLFxuICAgIG1pbWVUeXBlLFxuICAgIHVzYWdlID0gR1BVVGV4dHVyZVVzYWdlLlRFWFRVUkVfQklORElORyxcbiAgICBtaXBzID0gdHJ1ZSxcbiAgICBmb3JtYXQgPSAncmdiYTh1bm9ybScsXG4gICAgY29sb3JTcGFjZSA9ICdzcmdiJyxcbiAgICBsYWJlbCA9ICcnLFxuICAgIHNyZ2JUb0xpbmVhcixcbn06IGltYWdlVG9UZXh0dXJlRGVzY3JpcHRvcikge1xuICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbZGF0YV0sIHsgdHlwZTogbWltZVR5cGUgfSk7XG4gICAgY29uc3QgYml0bWFwID0gYXdhaXQgY3JlYXRlSW1hZ2VCaXRtYXAoYmxvYiwgeyBjb2xvclNwYWNlQ29udmVyc2lvbjogJ25vbmUnIH0pO1xuICAgIGNvbnN0IHNpemUgPSB7IHdpZHRoOiBiaXRtYXAud2lkdGgsIGhlaWdodDogYml0bWFwLmhlaWdodCB9O1xuXG4gICAgY29uc3QgdGV4dHVyZSA9IGRldmljZS5jcmVhdGVUZXh0dXJlKHtcbiAgICAgICAgbGFiZWwsXG4gICAgICAgIGZvcm1hdCxcbiAgICAgICAgc2l6ZTogc2l6ZSxcbiAgICAgICAgdXNhZ2U6IHVzYWdlIHwgR1BVVGV4dHVyZVVzYWdlLkNPUFlfRFNUIHwgR1BVVGV4dHVyZVVzYWdlLkNPUFlfU1JDIHwgR1BVVGV4dHVyZVVzYWdlLlJFTkRFUl9BVFRBQ0hNRU5ULFxuICAgICAgICBtaXBMZXZlbENvdW50OiBtaXBzID8gMSArIChNYXRoLmxvZzIoTWF0aC5tYXgoYml0bWFwLndpZHRoLCBiaXRtYXAuaGVpZ2h0KSkgfCAwKSA6IDEsXG4gICAgfSk7XG5cbiAgICBkZXZpY2UucXVldWUuY29weUV4dGVybmFsSW1hZ2VUb1RleHR1cmUoXG4gICAgICAgIHsgc291cmNlOiBiaXRtYXAgfSxcbiAgICAgICAgeyB0ZXh0dXJlLCBjb2xvclNwYWNlIH0sXG4gICAgICAgIHNpemUsXG4gICAgKTtcblxuICAgIGlmIChzcmdiVG9MaW5lYXIpIHNyZ2JUZXh0dXJlVG9MaW5lYXIoZGV2aWNlLCB0ZXh0dXJlKTtcbiAgICBpZiAobWlwcykgdm9pZCBnZW5lcmF0ZU1pcHMoZGV2aWNlLCB0ZXh0dXJlKTtcblxuICAgIHJldHVybiB0ZXh0dXJlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VIRFIoaW5EYXRhOiBVaW50OEFycmF5IHwgQXJyYXlCdWZmZXIpIHtcbiAgICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCk7XG4gICAgY29uc3QgYnVmZmVyID0gaW5EYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSA/IGluRGF0YSA6IG5ldyBVaW50OEFycmF5KGluRGF0YSk7XG4gICAgbGV0IHBvcyA9IDA7XG5cbiAgICBjb25zdCBnZXRMaW5lID0gKGxpbmVMaW1pdCA9IDEwMjQpID0+IHtcbiAgICAgICAgY29uc3QgbGltaXQgPSBNYXRoLm1pbihidWZmZXIubGVuZ3RoLCBsaW5lTGltaXQgKyBwb3MpO1xuICAgICAgICBjb25zdCBzdWIgPSBidWZmZXIuc3ViYXJyYXkocG9zLCBsaW1pdCk7XG4gICAgICAgIGNvbnN0IGVuZCA9IHN1Yi5pbmRleE9mKDB4MEEpICsgMTtcbiAgICAgICAgcG9zICs9IGVuZDtcbiAgICAgICAgcmV0dXJuIGVuZCA9PT0gMCA/IHVuZGVmaW5lZCA6IGRlY29kZXIuZGVjb2RlKHN1Yi5zdWJhcnJheSgwLCBlbmQpKTtcbiAgICB9O1xuXG4gICAgY29uc3QgaW1wb3J0RXJyb3IgPSAobXNnOiBzdHJpbmcpID0+IG5ldyBFcnJvcignSERSIEltcG9ydCBFcnJvcjogJyArIG1zZyk7XG5cbiAgICAvLyAjcmVnaW9uIFJlYWQgSGVhZGVyXG4gICAgY29uc3QgbWFnaWNUb2tlblJlZ2V4ID0gL14jXFw/KFxcUyspLztcbiAgICBjb25zdCBtYWdpY1Rva2VuTGluZSA9IGdldExpbmUoKTtcblxuICAgIGlmIChtYWdpY1Rva2VuTGluZSA9PSBudWxsKSB0aHJvdyBpbXBvcnRFcnJvcignbm8gaGVhZGVyIGZvdW5kJyk7XG4gICAgaWYgKCFtYWdpY1Rva2VuUmVnZXgudGVzdChtYWdpY1Rva2VuTGluZSkpIHRocm93IGltcG9ydEVycm9yKCdiYWQgaW5pdGlhbCB0b2tlbicpO1xuXG4gICAgY29uc3QgaGVhZGVyUmVncyA9IFtcbiAgICAgICAgL0ZPUk1BVD0oPzxmb3JtYXQ+XFxTKykvLCAvLyBmb3JtYXRcbiAgICAgICAgLy1ZXFxzKyg/PFk+XFxkKylcXHMrXFwrWFxccysoPzxYPlxcZCspLywgLy8gc2l6ZVxuICAgICAgICAvRVhQT1NVUkVcXHMqPVxccyooPzxleHBvc3VyZT5cXGQrKFxcLlxcZCspPykvLCAvLyBleHBvc3VyZVxuICAgICAgICAvR0FNTUFcXHMqPVxccyooPzxnYW1tYT5cXGQrKFxcLlxcZCspPykvLCAvLyBnYW1tYVxuICAgIF07XG5cbiAgICBjb25zdCBoZWFkZXJSZWcgPSBuZXcgUmVnRXhwKGBeXFxcXHMqKCR7XG4gICAgICAgIGhlYWRlclJlZ3MubWFwKCh7IHNvdXJjZSB9KSA9PiBgKCR7c291cmNlfSlgKS5qb2luKCd8JylcbiAgICB9KVxcXFxzKiRgKTtcblxuICAgIGxldCBub0Zvcm1hdCA9IHRydWU7XG4gICAgbGV0IGdhbW1hID0gMTsgLyogYSB2YWx1ZSBvZiAxLjAgaW4gYW4gaW1hZ2UgY29ycmVzcG9uZHMgdG8gPGV4cG9zdXJlPiB3YXR0cy9zdGVyYWRpYW4vbV4yLiBkZWZhdWx0cyB0byAxLjAgKi9cbiAgICBsZXQgZXhwb3N1cmUgPSAxOyAvKiBpbWFnZSBoYXMgYWxyZWFkeSBiZWVuIGdhbW1hIGNvcnJlY3RlZCB3aXRoIGdpdmVuIGdhbW1hLiBkZWZhdWx0cyB0byAxLjAgKG5vIGNvcnJlY3Rpb24pICovXG4gICAgbGV0IHdpZHRoOiBudW1iZXIgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gICAgbGV0IGhlaWdodDogbnVtYmVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gICAgZm9yIChsZXQgbGluZSA9IGdldExpbmUoKTsgbGluZSAhPSBudWxsOyBsaW5lID0gd2lkdGggPT0gbnVsbCA/IGdldExpbmUoKSA6IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBncm91cHMgPSBsaW5lLm1hdGNoKGhlYWRlclJlZyk/Lmdyb3VwcyBhcyBQYXJ0aWFsPFJlY29yZDxzdHJpbmcsIHN0cmluZz4+IHwgdW5kZWZpbmVkO1xuICAgICAgICBpZiAoZ3JvdXBzID09IG51bGwpIGNvbnRpbnVlO1xuXG4gICAgICAgIGlmIChncm91cHMuZm9ybWF0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIG5vRm9ybWF0ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAoZ3JvdXBzLlggIT0gbnVsbCAmJiBncm91cHMuWSAhPSBudWxsKSB7XG4gICAgICAgICAgICB3aWR0aCA9IHBhcnNlSW50KGdyb3Vwcy5YKTtcbiAgICAgICAgICAgIGhlaWdodCA9IHBhcnNlSW50KGdyb3Vwcy5ZKTtcbiAgICAgICAgfSBlbHNlIGlmIChncm91cHMuZ2FtbWEgIT0gbnVsbCkge1xuICAgICAgICAgICAgZ2FtbWEgPSBwYXJzZUZsb2F0KGdyb3Vwcy5nYW1tYSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZ3JvdXBzLmV4cG9zdXJlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGV4cG9zdXJlID0gcGFyc2VGbG9hdChncm91cHMuZXhwb3N1cmUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG5vRm9ybWF0KSB0aHJvdyBpbXBvcnRFcnJvcignbWlzc2luZyBmb3JtYXQgc3BlY2lmaWVyJyk7XG4gICAgaWYgKHdpZHRoID09IG51bGwgfHwgaGVpZ2h0ID09IG51bGwpIHRocm93IGltcG9ydEVycm9yKCdtaXNzaW5nIGltYWdlIHNpemUgc3BlY2lmaWVyJyk7XG4gICAgLy8gI2VuZHJlZ2lvblxuXG4gICAgLy8gI3JlZ2lvbiBSZWFkIFNjYW5saW5lIERhdGFcbiAgICBsZXQgcmF3RGF0YTogVWludDhBcnJheTtcbiAgICBjb25zdCB1bmVuY29kYWJsZSA9IHdpZHRoIDwgOCB8fCB3aWR0aCA+IDB4N2ZmZjtcbiAgICBjb25zdCBmbGF0RGF0YSA9IGJ1ZmZlcltwb3NdICE9PSAyIHx8IGJ1ZmZlcltwb3MgKyAxXSAhPT0gMiB8fCAoYnVmZmVyW3BvcyArIDJdICYgMHg4MCkgIT09IDA7XG5cbiAgICBpZiAodW5lbmNvZGFibGUgfHwgZmxhdERhdGEpIHtcbiAgICAgICAgcmF3RGF0YSA9IGJ1ZmZlci5zdWJhcnJheShwb3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJhd0RhdGEgPSBuZXcgVWludDhBcnJheSh3aWR0aCAqIGhlaWdodCAqIDQpO1xuICAgICAgICBjb25zdCBlbmQgPSA0ICogd2lkdGg7XG4gICAgICAgIGNvbnN0IHNjYW5saW5lX2J1ZmZlciA9IG5ldyBVaW50OEFycmF5KGVuZCk7XG4gICAgICAgIGNvbnN0IGxlbiA9IGJ1ZmZlci5ieXRlTGVuZ3RoO1xuXG4gICAgICAgIGZvciAobGV0IGsgPSAwLCBvZmZzZXQgPSAwOyBrIDwgaGVpZ2h0ICYmIHBvcyA8IGxlbjsgaysrKSB7XG4gICAgICAgICAgICBpZiAocG9zICsgNCA+IGxlbilcbiAgICAgICAgICAgICAgICB0aHJvdyBpbXBvcnRFcnJvcignZmlsZSBlbmRlZCBkdXJuaW5nIHNjYW5saW5lJyk7XG5cbiAgICAgICAgICAgIGlmICgoMiAhPSBidWZmZXJbcG9zKytdKSB8fCAoMiAhPSBidWZmZXJbcG9zKytdKSB8fCAoKChidWZmZXJbcG9zKytdIDw8IDgpIHwgYnVmZmVyW3BvcysrXSkgIT0gd2lkdGgpKVxuICAgICAgICAgICAgICAgIHRocm93IGltcG9ydEVycm9yKCdiYWQgcmdiZSBzY2FubGluZSBmb3JtYXQnKTtcblxuICAgICAgICAgICAgbGV0IGNvdW50O1xuICAgICAgICAgICAgZm9yIChsZXQgcHRyID0gMDsgcHRyIDwgZW5kICYmIHBvcyA8IGxlbjsgcHRyICs9IGNvdW50KSB7XG4gICAgICAgICAgICAgICAgY291bnQgPSBidWZmZXJbcG9zKytdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzRW5jb2RlZFJ1biA9IGNvdW50ID4gMTI4O1xuICAgICAgICAgICAgICAgIGlmIChpc0VuY29kZWRSdW4pIGNvdW50IC09IDEyODtcblxuICAgICAgICAgICAgICAgIGlmIChjb3VudCA9PSAwIHx8IHB0ciArIGNvdW50ID4gZW5kKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBpbXBvcnRFcnJvcignYmFkIHNjYW5saW5lIGRhdGEnKTtcblxuICAgICAgICAgICAgICAgIGlmIChpc0VuY29kZWRSdW4pIHtcbiAgICAgICAgICAgICAgICAgICAgc2NhbmxpbmVfYnVmZmVyLmZpbGwoYnVmZmVyW3Bvc10sIHB0ciwgcHRyICsgY291bnQpO1xuICAgICAgICAgICAgICAgICAgICBwb3MgKz0gMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzY2FubGluZV9idWZmZXIuc2V0KGJ1ZmZlci5zdWJhcnJheShwb3MsIHBvcyArIGNvdW50KSwgcHRyKTtcbiAgICAgICAgICAgICAgICAgICAgcG9zICs9IGNvdW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3aWR0aDsgaSsrKVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZW5kOyBqICs9IHdpZHRoKVxuICAgICAgICAgICAgICAgICAgICByYXdEYXRhW29mZnNldCsrXSA9IHNjYW5saW5lX2J1ZmZlcltpICsgal07XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gI2VuZHJlZ2lvblxuXG4gICAgLy8gI3JlZ2lvbiBDb252ZXJ0IHRvIEZsb2F0MTZcbiAgICBjb25zdCBkYXRhID0gbmV3IFVpbnQxNkFycmF5KHJhd0RhdGEubGVuZ3RoKTtcbiAgICBjb25zdCBmbG9hdDE2T25lID0gdG9GbG9hdDE2Qnl0ZXMoMSk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdpZHRoICogaGVpZ2h0ICogNDsgaSArPSA0KSB7XG4gICAgICAgIGNvbnN0IHJhd19lID0gcmF3RGF0YVtpICsgM107XG4gICAgICAgIGNvbnN0IHNjYWxlID0gTWF0aC5wb3coMi4wLCByYXdfZSAtIDEyOC4wKSAvIDI1NS4wO1xuXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMzsgaiArPSAxKSB7XG4gICAgICAgICAgICBkYXRhW2kgKyBqXSA9IHRvRmxvYXQxNkJ5dGVzKE1hdGgubWluKHJhd0RhdGFbaSArIGpdICogc2NhbGUsIDY1NTA0KSk7XG4gICAgICAgIH1cbiAgICAgICAgZGF0YVtpICsgM10gPSBmbG9hdDE2T25lO1xuICAgIH1cbiAgICAvLyAjZW5kcmVnaW9uXG5cbiAgICByZXR1cm4geyBkYXRhLCB3aWR0aCwgaGVpZ2h0LCBnYW1tYSwgZXhwb3N1cmUgfTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8862\n")},9629:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fF: () => (/* binding */ generateMips),\n/* harmony export */   l3: () => (/* binding */ equirectangularToCubemap),\n/* harmony export */   sP: () => (/* binding */ srgbTextureToLinear)\n/* harmony export */ });\n/* harmony import */ var _shaders_blit_vert_shader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(157);\n/* harmony import */ var _shaders_cubemap_sampling_shader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6097);\n/* harmony import */ var _data_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5752);\n/* harmony import */ var _general__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4742);\n\n\n\n\nasync function equirectangularToCubemap(device, { data, width, height, gamma = 1, exposure = 1 }, outputDescriptor) {\n    const code = /* wgsl */ `\n        override EXPOSURE: f32 = 1.0;\n        override GAMMA: f32 = 1.0;\n        override FLIP_Y: bool = false;\n\n        @group(0) @binding(0) var equirectangularMap: texture_2d<f32>;\n        @group(0) @binding(1) var mapSampler: sampler;\n        @group(0) @binding(2) var<uniform> face: u32;\n\n        fn sampleSphericalMap(v: vec3f) -> vec2f {\n            const invAtan = vec2(0.1591, 0.3183);\n\n            var uv = vec2(atan2(v.z, v.x), asin(v.y));\n            uv *= invAtan;\n            uv += 0.5;\n            return uv;\n        }\n \n        ${_shaders_blit_vert_shader__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .A}\n        ${_shaders_cubemap_sampling_shader__WEBPACK_IMPORTED_MODULE_2__/* .toWorldDir */ .V}\n\n        @fragment\n        fn fs(@location(0) uv: vec2f) -> @location(0) vec4f {\n            var dir = toWorldDirF32(uv, face);\n            dir = vec3(dir.z, dir.y, -dir.x);\n            var coord = sampleSphericalMap(dir);\n            if (FLIP_Y) { coord.y = 1 - coord.y; }\n\n            var color = textureSample(equirectangularMap, mapSampler, coord).rgb;\n            if (GAMMA != 1.0) { color = pow(color, vec3(1.0 / GAMMA)); }\n            if (EXPOSURE != 1.0) { color /= EXPOSURE; }\n            return vec4(color, 1.0);\n        }\n    `;\n    let FLIP_Y = 0;\n    let equirectangular;\n    if (data instanceof GPUTexture) {\n        equirectangular = data;\n    }\n    else {\n        FLIP_Y = 1;\n        equirectangular = device.createTexture({\n            label: `${outputDescriptor.label} equirectangular`,\n            dimension: '2d',\n            format: 'rgba16float',\n            size: { width, height },\n            usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n        });\n        device.queue.writeTexture({ texture: equirectangular, mipLevel: 0 }, data, { bytesPerRow: width * 2 * 4 }, { width, height, depthOrArrayLayers: 1 });\n        await device.queue.onSubmittedWorkDone();\n    }\n    const faceSize = equirectangular.height >> 1;\n    const cubemapDescriptor = outputDescriptor;\n    cubemapDescriptor.mipLevelCount ??= Math.log2(faceSize) | 0;\n    cubemapDescriptor.size = { width: faceSize, height: faceSize, depthOrArrayLayers: 6 };\n    cubemapDescriptor.dimension = '2d';\n    cubemapDescriptor.usage |= GPUTextureUsage.RENDER_ATTACHMENT;\n    const cubemap = device.createTexture(cubemapDescriptor);\n    const label = (0,_general__WEBPACK_IMPORTED_MODULE_3__/* .padTemplate */ .OY) `hdr copy${outputDescriptor.label}`;\n    const bindgroupLayout = device.createBindGroupLayout({\n        label,\n        entries: [\n            {\n                binding: 0,\n                texture: {},\n                visibility: GPUShaderStage.FRAGMENT,\n            },\n            {\n                binding: 1,\n                sampler: {},\n                visibility: GPUShaderStage.FRAGMENT,\n            },\n            {\n                binding: 2,\n                buffer: {},\n                visibility: GPUShaderStage.FRAGMENT,\n            },\n        ],\n    });\n    const module = device.createShaderModule({ label, code });\n    const sampler = device.createSampler({ label, minFilter: 'linear', magFilter: 'linear' });\n    const params = new Uint32Array(1);\n    const paramBuffer = (0,_data_copy__WEBPACK_IMPORTED_MODULE_0__/* .createAndCopyBuffer */ .Lr)(params, GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM, device, label);\n    const bindgroup = device.createBindGroup({\n        label,\n        layout: bindgroupLayout,\n        entries: [\n            { binding: 0, resource: equirectangular.createView() },\n            { binding: 1, resource: sampler },\n            { binding: 2, resource: { buffer: paramBuffer } },\n        ],\n    });\n    const pipelineLayout = device.createPipelineLayout({\n        label,\n        bindGroupLayouts: [bindgroupLayout],\n    });\n    const pipeline = device.createRenderPipeline({\n        label,\n        layout: pipelineLayout,\n        vertex: { module },\n        fragment: {\n            module,\n            targets: [{ format: cubemap.format }],\n            constants: {\n                GAMMA: gamma,\n                EXPOSURE: exposure,\n                FLIP_Y,\n            },\n        },\n    });\n    for (let i = 0; i < 6; i += 1) {\n        params[0] = i;\n        device.queue.writeBuffer(paramBuffer, 0, params, 0, 1);\n        const view = cubemap.createView({\n            dimension: '2d',\n            arrayLayerCount: 1,\n            baseArrayLayer: i,\n            mipLevelCount: 1,\n        });\n        const encoder = device.createCommandEncoder();\n        const pass = encoder.beginRenderPass({\n            label,\n            colorAttachments: [{\n                    view,\n                    loadOp: 'clear',\n                    storeOp: 'store',\n                }],\n        });\n        pass.setPipeline(pipeline);\n        pass.setBindGroup(0, bindgroup);\n        pass.draw(3);\n        pass.end();\n        device.queue.submit([encoder.finish()]);\n    }\n    return cubemap;\n}\nasync function generateMips(device, texture) {\n    const code = /* wgsl */ `\n        @group(0) @binding(0) var image: texture_2d<f32>;\n        @group(0) @binding(1) var mipSampler: sampler;\n\n        ${_shaders_blit_vert_shader__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .A}\n\n        @fragment\n        fn fs(@location(0) uv: vec2f) -> @location(0) vec4f {\n            return textureSample(image, mipSampler, uv);\n        }\n    `;\n    const label = (0,_general__WEBPACK_IMPORTED_MODULE_3__/* .padTemplate */ .OY) `mip generation${texture.label}`;\n    const bindgroupLayout = device.createBindGroupLayout({\n        label,\n        entries: [\n            {\n                binding: 0,\n                texture: { viewDimension: '2d', sampleType: 'float' },\n                visibility: GPUShaderStage.FRAGMENT,\n            },\n            {\n                binding: 1,\n                sampler: {},\n                visibility: GPUShaderStage.FRAGMENT,\n            },\n        ],\n    });\n    const colorAttachment = {\n        view: undefined,\n        loadOp: 'clear',\n        storeOp: 'store',\n    };\n    const sampler = device.createSampler({\n        minFilter: 'linear',\n        magFilter: 'linear',\n    });\n    const module = device.createShaderModule({ label, code });\n    const pipelineLayout = device.createPipelineLayout({ label, bindGroupLayouts: [bindgroupLayout] });\n    const pipeline = device.createRenderPipeline({\n        label,\n        layout: pipelineLayout,\n        vertex: {\n            entryPoint: 'vs',\n            module,\n        },\n        fragment: {\n            entryPoint: 'fs',\n            targets: [{ format: texture.format }],\n            module,\n        },\n    });\n    colorAttachment.view = texture.createView({ mipLevelCount: 1, baseMipLevel: 0 });\n    await device.queue.onSubmittedWorkDone();\n    for (let i = 1; i < texture.mipLevelCount; i += 1) {\n        const bindgroup = device.createBindGroup({\n            label,\n            layout: bindgroupLayout,\n            entries: [\n                {\n                    binding: 0,\n                    resource: colorAttachment.view,\n                },\n                {\n                    binding: 1,\n                    resource: sampler,\n                },\n            ],\n        });\n        colorAttachment.view = texture.createView({ mipLevelCount: 1, baseMipLevel: i });\n        const encoder = device.createCommandEncoder();\n        const pass = encoder.beginRenderPass({\n            label,\n            colorAttachments: [colorAttachment],\n        });\n        pass.setPipeline(pipeline);\n        pass.setBindGroup(0, bindgroup);\n        pass.draw(3);\n        pass.end();\n        device.queue.submit([encoder.finish()]);\n        await device.queue.onSubmittedWorkDone();\n    }\n}\nfunction srgbTextureToLinear(device, texture) {\n    const code = /* wgsl */ `\n        @group(0) @binding(0) var image: texture_2d<f32>;\n        @group(0) @binding(1) var imageSampler: sampler;\n\n        ${_shaders_blit_vert_shader__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .A}\n\n        fn sRGBToLinear(color: vec3f) -> vec3f {\n            return select( \n                pow(color * 0.9478672986 + 0.0521327014, vec3(2.4)), \n                color * 0.0773993808, \n                color <= vec3(0.04045), \n            );\n        }  \n\n        @fragment\n        fn fs(@location(0) uv: vec2f) -> @location(0) vec4f  {\n            let sample = textureSample(image, imageSampler, uv);\n            let color = sRGBToLinear(sample.rgb);\n            return vec4(color, sample.a);\n        }\n    `;\n    const label = (0,_general__WEBPACK_IMPORTED_MODULE_3__/* .padTemplate */ .OY) `srgb to linear${texture.label}`;\n    const size = { width: texture.width, height: texture.height };\n    const tempTexture = device.createTexture({\n        format: texture.format,\n        usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n        size,\n    });\n    const bindgroupLayout = device.createBindGroupLayout({\n        label,\n        entries: [\n            {\n                binding: 0,\n                texture: {},\n                visibility: GPUShaderStage.FRAGMENT,\n            },\n            {\n                binding: 1,\n                sampler: {},\n                visibility: GPUShaderStage.FRAGMENT,\n            },\n        ],\n    });\n    const sampler = device.createSampler({\n        minFilter: 'linear',\n        magFilter: 'linear',\n    });\n    const module = device.createShaderModule({ label, code: code });\n    const pipelineLayout = device.createPipelineLayout({ label, bindGroupLayouts: [bindgroupLayout] });\n    const pipeline = device.createRenderPipeline({\n        label,\n        layout: pipelineLayout,\n        vertex: {\n            entryPoint: 'vs',\n            module,\n        },\n        fragment: {\n            entryPoint: 'fs',\n            targets: [{ format: texture.format }],\n            module,\n        },\n    });\n    const bindgroup = device.createBindGroup({\n        label,\n        layout: bindgroupLayout,\n        entries: [\n            {\n                binding: 0,\n                resource: tempTexture.createView(),\n            },\n            {\n                binding: 1,\n                resource: sampler,\n            },\n        ],\n    });\n    const encoder = device.createCommandEncoder();\n    encoder.copyTextureToTexture({ texture }, { texture: tempTexture }, size);\n    const pass = encoder.beginRenderPass({\n        label,\n        colorAttachments: [{\n                view: texture.createView({ mipLevelCount: 1, baseMipLevel: 0 }),\n                loadOp: 'clear',\n                storeOp: 'store',\n            }],\n    });\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindgroup);\n    pass.draw(3);\n    pass.end();\n    device.queue.submit([encoder.finish()]);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9629\n")}}]);