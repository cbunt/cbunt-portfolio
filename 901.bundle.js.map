{"version":3,"file":"901.bundle.js","mappings":"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","sources":["webpack://cbunt-portfolio/./node_modules/.pnpm/native-file-system-adapter@3.0.1/node_modules/native-file-system-adapter/src/adapters/memory.js"],"sourcesContent":["import { errors } from '../util.js'\nimport config from '../config.js'\n\nconst { File, Blob, DOMException } = config\nconst { INVALID, GONE, MISMATCH, MOD_ERR, SYNTAX, SECURITY, DISALLOWED } = errors\n\nexport class Sink {\n\n  /**\n   * @param {FileHandle} fileHandle\n   * @param {File} file\n   */\n  constructor (fileHandle, file) {\n    this.fileHandle = fileHandle\n    this.file = file\n    this.size = file.size\n    this.position = 0\n  }\n\n  write (chunk) {\n    let file = this.file\n\n    if (typeof chunk === 'object') {\n      if (chunk.type === 'write') {\n        if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n          this.position = chunk.position\n          if (this.size < chunk.position) {\n            this.file = new File(\n              [this.file, new ArrayBuffer(chunk.position - this.size)],\n              this.file.name,\n              this.file\n            )\n          }\n        }\n        if (!('data' in chunk)) {\n          throw new DOMException(...SYNTAX('write requires a data argument'))\n        }\n        chunk = chunk.data\n      } else if (chunk.type === 'seek') {\n        if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n          if (this.size < chunk.position) {\n            throw new DOMException(...INVALID)\n          }\n          this.position = chunk.position\n          return\n        } else {\n          throw new DOMException(...SYNTAX('seek requires a position argument'))\n        }\n      } else if (chunk.type === 'truncate') {\n        if (Number.isInteger(chunk.size) && chunk.size >= 0) {\n          file = chunk.size < this.size\n            ? new File([file.slice(0, chunk.size)], file.name, file)\n            : new File([file, new Uint8Array(chunk.size - this.size)], file.name)\n\n          this.size = file.size\n          if (this.position > file.size) {\n            this.position = file.size\n          }\n          this.file = file\n          return\n        } else {\n          throw new DOMException(...SYNTAX('truncate requires a size argument'))\n        }\n      }\n    }\n\n    chunk = new Blob([chunk])\n\n    let blob = this.file\n    // Calc the head and tail fragments\n    const head = blob.slice(0, this.position)\n    const tail = blob.slice(this.position + chunk.size)\n\n    // Calc the padding\n    let padding = this.position - head.size\n    if (padding < 0) {\n      padding = 0\n    }\n    blob = new File([\n      head,\n      new Uint8Array(padding),\n      chunk,\n      tail\n    ], blob.name)\n\n    this.size = blob.size\n    this.position += chunk.size\n\n    this.file = blob\n  }\n  close () {\n    if (this.fileHandle._deleted) throw new DOMException(...GONE)\n    this.fileHandle._file = this.file\n    this.file =\n    this.position =\n    this.size = null\n    if (this.fileHandle.onclose) {\n      this.fileHandle.onclose(this.fileHandle)\n    }\n  }\n}\n\nexport class FileHandle {\n  constructor (name = '', file = new File([], name), writable = true) {\n    this._file = file\n    this.name = name\n    this.kind = 'file'\n    this._deleted = false\n    this.writable = writable\n    this.readable = true\n  }\n\n  async getFile () {\n    if (this._deleted) throw new DOMException(...GONE)\n    return this._file\n  }\n\n  async createWritable (opts) {\n    if (!this.writable) throw new DOMException(...DISALLOWED)\n    if (this._deleted) throw new DOMException(...GONE)\n\n    const file = opts.keepExistingData\n      ? await this.getFile()\n      : new File([], this.name)\n\n    return new Sink(this, file)\n  }\n\n  async isSameEntry (other) {\n    return this === other\n  }\n\n  async _destroy () {\n    this._deleted = true\n    this._file = null\n  }\n}\n\nexport class FolderHandle {\n\n  /** @param {string} name */\n  constructor (name, writable = true) {\n    this.name = name\n    this.kind = 'directory'\n    this._deleted = false\n    /** @type {Object.<string, (FolderHandle|FileHandle)>} */\n    this._entries = {}\n    this.writable = writable\n    this.readable = true\n  }\n\n  /** @returns {AsyncGenerator<[string, FileHandle | FolderHandle]>} */\n  async * entries () {\n    if (this._deleted) throw new DOMException(...GONE)\n    yield* Object.entries(this._entries)\n  }\n\n  async isSameEntry (other) {\n    return this === other\n  }\n\n  /**\n   * @param {string} name\n   * @param {{ create: boolean; }} opts\n   */\n  async getDirectoryHandle (name, opts) {\n    if (this._deleted) throw new DOMException(...GONE)\n    const entry = this._entries[name]\n    if (entry) { // entry exist\n      if (entry instanceof FileHandle) {\n        throw new DOMException(...MISMATCH)\n      } else {\n        return entry\n      }\n    } else {\n      if (opts.create) {\n        return (this._entries[name] = new FolderHandle(name))\n      } else {\n        throw new DOMException(...GONE)\n      }\n    }\n  }\n\n  /**\n   * @param {string} name\n   * @param {{ create: boolean; }} opts\n   */\n  async getFileHandle (name, opts) {\n    const entry = this._entries[name]\n    const isFile = entry instanceof FileHandle\n    if (entry && isFile) return entry\n    if (entry && !isFile) throw new DOMException(...MISMATCH)\n    if (!entry && !opts.create) throw new DOMException(...GONE)\n    if (!entry && opts.create) {\n      return (this._entries[name] = new FileHandle(name))\n    }\n  }\n\n  async removeEntry (name, opts) {\n    const entry = this._entries[name]\n    if (!entry) throw new DOMException(...GONE)\n    await entry._destroy(opts.recursive)\n    delete this._entries[name]\n  }\n\n  async _destroy (recursive) {\n    for (let x of Object.values(this._entries)) {\n      if (!recursive) throw new DOMException(...MOD_ERR)\n      await x._destroy(recursive)\n    }\n    this._entries = {}\n    this._deleted = true\n  }\n}\n\nconst fs = new FolderHandle('')\n\nexport default () => fs\n"],"names":["File","Blob","DOMException","INVALID","GONE","MISMATCH","MOD_ERR","SYNTAX","SECURITY","DISALLOWED","errors","Sink","constructor","fileHandle","file","this","size","position","write","chunk","type","Number","isInteger","ArrayBuffer","name","data","slice","Uint8Array","blob","head","tail","padding","close","_deleted","_file","onclose","FileHandle","writable","kind","readable","getFile","createWritable","opts","keepExistingData","isSameEntry","other","_destroy","FolderHandle","_entries","entries","Object","getDirectoryHandle","entry","create","getFileHandle","isFile","removeEntry","recursive","x","values","fs"],"sourceRoot":""}