"use strict";(self.webpackChunkcbunt_portfolio=self.webpackChunkcbunt_portfolio||[]).push([[164],{291:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  A: () => (/* binding */ descriptor_map)\n});\n\n// EXTERNAL MODULE: ./src/rendering/default-forward-pass/pipeline-feature-flags.ts\nvar pipeline_feature_flags = __webpack_require__(8452);\n;// CONCATENATED MODULE: ./src/utils/shader.ts\nfunction resolveBranch(branch) {\n    return typeof branch === 'string' ? branch : branch();\n}\nclass PreprocessorStatement {\n    constructor(cond, branch) {\n        this.else = (branch) => this.res ?? resolveBranch(branch);\n        this.toString = () => this.res ?? '';\n        if (cond)\n            this.res = resolveBranch(branch);\n    }\n    elif(cond, branch) {\n        if (cond)\n            this.res ??= resolveBranch(branch);\n        return this;\n    }\n    get [Symbol.toStringTag]() { return this.toString(); }\n}\nfunction preprocessors(flags) {\n    return {\n        ifdef(sym, branch) {\n            return new PreprocessorStatement((flags & sym) === sym, branch);\n        },\n        ifndef(sym, branch) {\n            return new PreprocessorStatement((flags & sym) !== sym, branch);\n        },\n    };\n}\nfunction wrapWithIncrement(fn, start = 0) {\n    return () => fn(start++);\n}\n\n// EXTERNAL MODULE: ./src/rendering/global-uniforms.ts\nvar global_uniforms = __webpack_require__(2462);\n;// CONCATENATED MODULE: ./src/shaders/forward.shader.ts\n/* eslint-disable @typescript-eslint/indent */\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\n\n\n\nfunction getBindgroupInfo(flags) {\n    const entries = [];\n    function pushItem(item) {\n        entries.push({ ...item, binding: entries.length, visibility: GPUShaderStage.FRAGMENT | GPUShaderStage.VERTEX });\n    }\n    pushItem({ buffer: { type: 'uniform' } });\n    pushItem({ sampler: {} });\n    pushItem({ texture: { viewDimension: '2d' } });\n    pushItem({ sampler: {} });\n    pushItem({ texture: { viewDimension: '2d' } });\n    pushItem({ sampler: {} });\n    pushItem({ texture: { viewDimension: '2d' } });\n    if (flags & pipeline_feature_flags/* PipelineFeatureFlags */.Ot.Emissive) {\n        pushItem({ sampler: {} });\n        pushItem({ texture: { viewDimension: '2d' } });\n    }\n    return { label: (0,pipeline_feature_flags/* featureFlagsToString */.UZ)(flags), entries };\n}\n/**\n * @param flags A flag enum containing the features this code should be generated for\n * @returns A string containing preprocessed wgsl shader code for the given features\n */\nfunction include(flags) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { ifdef } = preprocessors(flags);\n    const vertexInLocation = wrapWithIncrement((idx) => /* wgsl */ `@location(${idx})`);\n    const varyingsLocation = wrapWithIncrement((idx) => /* wgsl */ `@location(${idx})`);\n    const materialBinding = wrapWithIncrement((idx) => /* wgsl */ `\n        @group(1) @binding(${idx})\n    `);\n    const varyings = /* wgsl */ `\n        ${varyingsLocation()} pos: vec3f,\n        ${varyingsLocation()} camPos: vec3f,\n        ${varyingsLocation()} uv: vec2f,\n\n        ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexNormals, () => /* wgsl */ `\n            ${varyingsLocation()} tangent: vec4f,\n            ${varyingsLocation()} normal: vec3f,\n        `)}\n\n        ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexColors, () => /* wgsl */ `\n            ${varyingsLocation()} color: vec4f,\n        `)}\n    `;\n    return /* wgsl */ `\n        ${global_uniforms/* default */.A.code(0)}\n\n        struct ForwardOut {\n            @location(${0 /* GBufferGroupIndices.Normal */}) normal: vec4f,\n            @location(${1 /* GBufferGroupIndices.Albedo */}) albedo: vec4f,\n            @location(${2 /* GBufferGroupIndices.Emission */}) emission: vec4f,\n            @location(${3 /* GBufferGroupIndices.MetallicRoughness */}) metallicRoughness: vec4f,\n        }\n\n        struct MaterialProperties {\n            baseColorFactor: vec4f,\n            metallicFactor: f32,\n            roughnessFactor: f32,\n\n            ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.AlphaCutoff, 'alphaCutoff: f32,')}\n            ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.Emissive, 'emissiveFactor: vec3f,')}\n        }\n\n        ${materialBinding()} var<uniform> material: MaterialProperties;\n\n        ${materialBinding()} var baseColorSampler: sampler;\n        ${materialBinding()} var baseColorTexture: texture_2d<f32>;\n\n        ${materialBinding()} var normalSampler: sampler;\n        ${materialBinding()} var normalTexture: texture_2d<f32>;\n\n        ${materialBinding()} var metallicRoughnessSampler: sampler;\n        ${materialBinding()} var metallicRoughnessTexture: texture_2d<f32>;\n\n        ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.Emissive, () => /* wgsl */ `\n            ${materialBinding()} var emissionSampler: sampler;\n            ${materialBinding()} var emissionTexture: texture_2d<f32>;\n        `)}\n\n        struct ModelProperties {\n            modelToWorldMatrix: mat4x4f,\n\n            ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexNormals, 'normalMatrix: mat3x3f,')}\n        }\n\n        @group(2) @binding(0) var<storage, read> instances : array<ModelProperties>;\n\n        struct VertIn {\n            @builtin(instance_index) instance: u32,\n            ${vertexInLocation()} pos: vec3f,\n            ${vertexInLocation()} uv: vec2f,\n\n            ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexNormals, () => /* wgsl */ `\n                ${vertexInLocation()} tangent: vec4f,\n                ${vertexInLocation()} normal: vec3f,\n            `)}\n\n            ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexColors, () => /* wgsl */ `\n                ${vertexInLocation()} color: vec4f,\n            `)}\n        }\n\n        struct VertOut {\n            ${varyings}\n            @builtin(position) Position: vec4f,\n        }\n\n        struct FragIn {\n            ${varyings}\n\n            ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexNormals | pipeline_feature_flags/* PipelineFeatureFlags */.Ot.DoubleSided, /* wgsl */ `\n                @builtin(front_facing) front_facing: bool,\n            `)}\n        }\n\n        fn sRGBToLinear(color: vec3f) -> vec3f {\n            return select( \n                pow(color * 0.9478672986 + 0.0521327014, vec3(2.4)), \n                color * 0.0773993808, \n                color <= vec3(0.04045), \n            );\n        }  \n\n        @vertex \n        fn vs(inData: VertIn) -> VertOut {\n            var vsOut: VertOut;\n            let instance = instances[inData.instance];\n            let worldPos = instance.modelToWorldMatrix * vec4f(inData.pos, 1);\n            vsOut.pos = worldPos.xyz;\n            vsOut.Position = globals.worldToClip * worldPos;\n            vsOut.camPos = globals.inverseWorldToView[3].xyz;\n            vsOut.uv = inData.uv;\n\n            ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexNormals, /* wgsl */ `\n                vsOut.normal = normalize(instance.normalMatrix * inData.normal);\n                let wsTangent = normalize((instance.modelToWorldMatrix * vec4(inData.tangent.xyz, 0.0)).xyz);\n                vsOut.tangent = vec4(wsTangent, inData.tangent.w);\n            `)}\n\n            return vsOut;\n        }\n\n        // much of this code is adapted from https://learnopengl.com/PBR\n        @fragment\n        fn fs(inData: FragIn) -> ForwardOut {\n            var out: ForwardOut;\n            let rawColor: vec4f = textureSample(baseColorTexture, baseColorSampler, inData.uv);\n\n            ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.AlphaCutoff, /* wgsl */ `\n                var alpha = rawColor.a * material.baseColorFactor.a;\n\n                ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexColors, /* wgsl */ `\n                    alpha *= inData.color.a;\n                `)}\n\n                if (alpha <= material.alphaCutoff) { \n                    discard;\n                }\n            `)}\n\n            out.albedo = vec4f(rawColor.rgb * material.baseColorFactor.rgb, 1);\n\n            ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexColors, /* wgsl */ `\n                out.albedo *= vec4f(inData.color.rgb, 1);\n            `)}\n\n            let metallicRoughness = textureSample(metallicRoughnessTexture, metallicRoughnessSampler, inData.uv);\n            out.metallicRoughness.r = saturate(metallicRoughness.b * material.metallicFactor);\n            out.metallicRoughness.g = saturate(metallicRoughness.g * material.roughnessFactor);\n\n            ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexNormals, /* wgsl */ `\n                let normalSample = textureSample(normalTexture, normalSampler, inData.uv).xyz;\n                let tangentNormal = normalize(normalSample * 2.0 - 1.0);\n                let bitangent =inData.tangent.w * cross(inData.normal, inData.tangent.xyz);\n                let tbn = mat3x3f(normalize(inData.tangent.xyz), bitangent, normalize(inData.normal));\n                var normal = normalize(tbn * tangentNormal);\n\n                ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.DoubleSided, /* wgsl */ `\n                    if (!inData.front_facing) { normal *= -1.0; }\n                `)}\n            `).else(/* wgsl */ `\n                let fdx = dpdx(inData.pos);\n                let fdy = dpdy(inData.pos);\n                let normal = normalize(cross(fdx, fdy));\n            `)}\n\n            out.normal = vec4f(normal, 1);\n\n            ${ifdef(pipeline_feature_flags/* PipelineFeatureFlags */.Ot.Emissive, /* wgsl */ `\n                let emission = textureSample(emissionTexture, emissionSampler, inData.uv).rgb;\n                out.emission = vec4f(emission, 1);\n            `)}\n\n            return out;\n        }\n    `;\n}\n\n;// CONCATENATED MODULE: ./src/rendering/default-forward-pass/descriptor-map.ts\n\n\n\nclass DescriptorMap {\n    constructor(device, gbuffer, globals) {\n        this.device = device;\n        this.gbuffer = gbuffer;\n        this.globals = globals;\n        this.pipelineLayouts = {};\n        this.primitiveStates = {};\n        this.vertexLayouts = {};\n        this.shaderModules = {};\n        this.bindgroupLayouts = {};\n        this.samplers = {};\n        this.forwardBindgroupLayout = this.device.createBindGroupLayout({\n            label: `forward material`,\n            entries: [{\n                    binding: 0,\n                    visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,\n                    buffer: { type: 'read-only-storage' },\n                }],\n        });\n    }\n    getSampler(descriptor) {\n        const key = JSON.stringify(descriptor);\n        this.samplers[key] ??= this.device.createSampler(descriptor);\n        return this.samplers[key];\n    }\n    getVertexLayout(flags) {\n        const masked = flags & pipeline_feature_flags/* VertexBufferLayoutMask */.V3;\n        if (this.vertexLayouts[masked] == null) {\n            const attributes = [\n                { shaderLocation: 0, offset: 0, format: 'float32x3' }, // position\n                { shaderLocation: 1, offset: 12, format: 'float32x2' }, // uv\n            ];\n            let arrayStride = 20;\n            let shaderLocation = 2;\n            if (masked & pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexNormals) {\n                attributes.push({ shaderLocation, offset: arrayStride, format: 'float32x4' }); // tangent\n                attributes.push({ shaderLocation: shaderLocation + 1, offset: arrayStride + 16, format: 'float32x3' }); // normal\n                shaderLocation += 2;\n                arrayStride += 28;\n            }\n            if (masked & pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexColors) {\n                attributes.push({ shaderLocation, offset: arrayStride, format: 'float32x4' }); // color\n                arrayStride += 16;\n            }\n            this.vertexLayouts[masked] = { attributes, arrayStride, stepMode: 'vertex' };\n        }\n        return this.vertexLayouts[masked];\n    }\n    getForwardPipelineLayout(flags) {\n        const masked = flags & pipeline_feature_flags/* PipelineLayoutMask */.FO;\n        this.pipelineLayouts[masked] ??= this.device.createPipelineLayout({\n            label: pipeline_feature_flags/* featureFlagsToString */.UZ(masked),\n            bindGroupLayouts: [\n                this.globals.bindGroupLayout,\n                this.getMaterialBindGroup(flags),\n                this.forwardBindgroupLayout,\n            ],\n        });\n        return this.pipelineLayouts[masked];\n    }\n    getShaderModule(flags) {\n        const masked = flags & pipeline_feature_flags/* CodeMask */.Q7;\n        this.shaderModules[masked] ??= this.device.createShaderModule({\n            label: pipeline_feature_flags/* featureFlagsToString */.UZ(masked),\n            code: include(masked),\n        });\n        return this.shaderModules[masked];\n    }\n    getPrimitiveState(flags) {\n        const masked = flags & pipeline_feature_flags/* PrimitiveStateMask */.XY;\n        this.primitiveStates[masked] ??= {\n            topology: DescriptorMap.flagToTopology[(flags & pipeline_feature_flags/* TopologyFormatMask */.Py)],\n            cullMode: masked & pipeline_feature_flags/* PipelineFeatureFlags */.Ot.DoubleSided ? 'none' : 'back',\n            frontFace: masked & pipeline_feature_flags/* PipelineFeatureFlags */.Ot.ClockwiseWinding ? 'cw' : 'ccw',\n        };\n        return this.primitiveStates[masked];\n    }\n    getMaterialBindGroup(flags) {\n        const masked = flags & pipeline_feature_flags/* MaterialBindgroupLayoutMask */.Wq;\n        this.bindgroupLayouts[masked] ??= this.device.createBindGroupLayout(getBindgroupInfo(masked));\n        return this.bindgroupLayouts[masked];\n    }\n}\nDescriptorMap.flagToTopology = {\n    [pipeline_feature_flags/* PipelineFeatureFlags */.Ot.TriangleList]: 'triangle-list',\n    [pipeline_feature_flags/* PipelineFeatureFlags */.Ot.TriangleStrip]: 'triangle-strip',\n    [pipeline_feature_flags/* PipelineFeatureFlags */.Ot.PointList]: 'point-list',\n    [pipeline_feature_flags/* PipelineFeatureFlags */.Ot.LineList]: 'line-list',\n    [pipeline_feature_flags/* PipelineFeatureFlags */.Ot.LineStrip]: 'line-strip',\n};\n/* harmony default export */ const descriptor_map = (DescriptorMap);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///291\n")},8452:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FO: () => (/* binding */ PipelineLayoutMask),\n/* harmony export */   Ot: () => (/* binding */ PipelineFeatureFlags),\n/* harmony export */   P7: () => (/* binding */ maskRedundantFeatures),\n/* harmony export */   Py: () => (/* binding */ TopologyFormatMask),\n/* harmony export */   Q7: () => (/* binding */ CodeMask),\n/* harmony export */   UZ: () => (/* binding */ featureFlagsToString),\n/* harmony export */   V3: () => (/* binding */ VertexBufferLayoutMask),\n/* harmony export */   Wq: () => (/* binding */ MaterialBindgroupLayoutMask),\n/* harmony export */   XY: () => (/* binding */ PrimitiveStateMask)\n/* harmony export */ });\n/* unused harmony exports InstanceBufferLayoutMask, MaterialBufferLayoutMask, MaterialMask, featureFlagsToNames */\nvar PipelineFeatureFlags;\n(function (PipelineFeatureFlags) {\n    PipelineFeatureFlags[PipelineFeatureFlags["Defaults"] = 0] = "Defaults";\n    /**\n     * If the meshes have vertex normals.\n     * If absent, meshes are shaded with flat normals.\n    */\n    PipelineFeatureFlags[PipelineFeatureFlags["VertexNormals"] = 1] = "VertexNormals";\n    /**\n     * If the meshes have vertex colors.\n     * If absent, mesh is shaded with a base color texture.\n    */\n    PipelineFeatureFlags[PipelineFeatureFlags["VertexColors"] = 2] = "VertexColors";\n    PipelineFeatureFlags[PipelineFeatureFlags["AlphaCutoff"] = 4] = "AlphaCutoff";\n    PipelineFeatureFlags[PipelineFeatureFlags["Emissive"] = 8] = "Emissive";\n    PipelineFeatureFlags[PipelineFeatureFlags["DoubleSided"] = 16] = "DoubleSided";\n    PipelineFeatureFlags[PipelineFeatureFlags["ClockwiseWinding"] = 32] = "ClockwiseWinding";\n    // Topology formats\n    PipelineFeatureFlags[PipelineFeatureFlags["TriangleList"] = 0] = "TriangleList";\n    PipelineFeatureFlags[PipelineFeatureFlags["TriangleStrip"] = 64] = "TriangleStrip";\n    PipelineFeatureFlags[PipelineFeatureFlags["PointList"] = 128] = "PointList";\n    PipelineFeatureFlags[PipelineFeatureFlags["LineList"] = 192] = "LineList";\n    PipelineFeatureFlags[PipelineFeatureFlags["LineStrip"] = 256] = "LineStrip";\n    PipelineFeatureFlags[PipelineFeatureFlags["Unindexed"] = 320] = "Unindexed";\n    // LINE_LOOP (currently unsupported by webgpu)\n    // TRIANGLE_FAN (currently unsupported by webgpu)\n})(PipelineFeatureFlags || (PipelineFeatureFlags = {}));\nconst TopologyFormatMask = 0x111 << 6;\nconst PrimitiveStateMask = (TopologyFormatMask\n    | PipelineFeatureFlags.DoubleSided\n    | PipelineFeatureFlags.ClockwiseWinding);\nconst CodeMask = ~(TopologyFormatMask\n    | PipelineFeatureFlags.ClockwiseWinding);\nconst InstanceBufferLayoutMask = (PipelineFeatureFlags.VertexNormals);\nconst VertexBufferLayoutMask = (PipelineFeatureFlags.VertexNormals\n    | PipelineFeatureFlags.VertexColors);\nconst MaterialBufferLayoutMask = (PipelineFeatureFlags.AlphaCutoff);\nconst MaterialBindgroupLayoutMask = (MaterialBufferLayoutMask\n    | PipelineFeatureFlags.Emissive);\nconst MaterialMask = (MaterialBindgroupLayoutMask\n    | PipelineFeatureFlags.DoubleSided);\nconst PipelineLayoutMask = (InstanceBufferLayoutMask\n    | MaterialMask);\nfunction featureFlagsToNames(val) {\n    return Object.entries(PipelineFeatureFlags)\n        .flatMap(([key, flag]) => typeof flag === \'number\' && (flag & val) ? key : []);\n}\nfunction featureFlagsToString(val) {\n    return featureFlagsToNames(val).toString();\n}\nfunction maskRedundantFeatures(flags) {\n    let masked = flags;\n    if (masked & PipelineFeatureFlags.DoubleSided)\n        masked &= ~PipelineFeatureFlags.ClockwiseWinding;\n    return masked;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODQ1Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxJQUFZLG9CQThCWDtBQTlCRCxXQUFZLG9CQUFvQjtJQUM1Qix1RUFBWTtJQUVaOzs7TUFHRTtJQUNGLGlGQUFzQjtJQUV0Qjs7O01BR0U7SUFDRiwrRUFBcUI7SUFFckIsNkVBQW9CO0lBQ3BCLHVFQUFpQjtJQUVqQiw4RUFBb0I7SUFDcEIsd0ZBQXlCO0lBRXpCLG1CQUFtQjtJQUNuQiwrRUFBcUI7SUFDckIsa0ZBQXNCO0lBQ3RCLDJFQUFrQjtJQUNsQix5RUFBaUI7SUFDakIsMkVBQWtCO0lBQ2xCLDJFQUFrQjtJQUNsQiw4Q0FBOEM7SUFDOUMsaURBQWlEO0FBQ3JELENBQUMsRUE5Qlcsb0JBQW9CLEtBQXBCLG9CQUFvQixRQThCL0I7QUFFTSxNQUFNLGtCQUFrQixHQUFHLEtBQUssSUFBSSxDQUFDLENBQUM7QUFFdEMsTUFBTSxrQkFBa0IsR0FBRyxDQUM5QixrQkFBa0I7TUFDaEIsb0JBQW9CLENBQUMsV0FBVztNQUNoQyxvQkFBb0IsQ0FBQyxnQkFBZ0IsQ0FDMUMsQ0FBQztBQUVLLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FDckIsa0JBQWtCO01BQ2hCLG9CQUFvQixDQUFDLGdCQUFnQixDQUMxQyxDQUFDO0FBRUssTUFBTSx3QkFBd0IsR0FBRyxDQUNwQyxvQkFBb0IsQ0FBQyxhQUFhLENBQ3JDLENBQUM7QUFFSyxNQUFNLHNCQUFzQixHQUFHLENBQ2xDLG9CQUFvQixDQUFDLGFBQWE7TUFDaEMsb0JBQW9CLENBQUMsWUFBWSxDQUN0QyxDQUFDO0FBRUssTUFBTSx3QkFBd0IsR0FBRyxDQUNwQyxvQkFBb0IsQ0FBQyxXQUFXLENBQ25DLENBQUM7QUFFSyxNQUFNLDJCQUEyQixHQUFHLENBQ3ZDLHdCQUF3QjtNQUN0QixvQkFBb0IsQ0FBQyxRQUFRLENBQ2xDLENBQUM7QUFFSyxNQUFNLFlBQVksR0FBRyxDQUN4QiwyQkFBMkI7TUFDekIsb0JBQW9CLENBQUMsV0FBVyxDQUNyQyxDQUFDO0FBRUssTUFBTSxrQkFBa0IsR0FBRyxDQUM5Qix3QkFBd0I7TUFDdEIsWUFBWSxDQUNqQixDQUFDO0FBRUssU0FBUyxtQkFBbUIsQ0FBQyxHQUFXO0lBQzNDLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztTQUN0QyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsT0FBTyxJQUFJLEtBQUssUUFBUSxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZGLENBQUM7QUFFTSxTQUFTLG9CQUFvQixDQUFDLEdBQVc7SUFDNUMsT0FBTyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUMvQyxDQUFDO0FBRU0sU0FBUyxxQkFBcUIsQ0FBQyxLQUEyQjtJQUM3RCxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDbkIsSUFBSSxNQUFNLEdBQUcsb0JBQW9CLENBQUMsV0FBVztRQUFFLE1BQU0sSUFBSSxDQUFDLG9CQUFvQixDQUFDLGdCQUFnQixDQUFDO0lBQ2hHLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYnVudC1wb3J0Zm9saW8vLi9zcmMvcmVuZGVyaW5nL2RlZmF1bHQtZm9yd2FyZC1wYXNzL3BpcGVsaW5lLWZlYXR1cmUtZmxhZ3MudHM/NGI5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBQaXBlbGluZUZlYXR1cmVGbGFncyB7XG4gICAgRGVmYXVsdHMgPSAwLFxuXG4gICAgLyoqXG4gICAgICogSWYgdGhlIG1lc2hlcyBoYXZlIHZlcnRleCBub3JtYWxzLlxuICAgICAqIElmIGFic2VudCwgbWVzaGVzIGFyZSBzaGFkZWQgd2l0aCBmbGF0IG5vcm1hbHMuXG4gICAgKi9cbiAgICBWZXJ0ZXhOb3JtYWxzID0gMSA8PCAwLFxuXG4gICAgLyoqXG4gICAgICogSWYgdGhlIG1lc2hlcyBoYXZlIHZlcnRleCBjb2xvcnMuXG4gICAgICogSWYgYWJzZW50LCBtZXNoIGlzIHNoYWRlZCB3aXRoIGEgYmFzZSBjb2xvciB0ZXh0dXJlLlxuICAgICovXG4gICAgVmVydGV4Q29sb3JzID0gMSA8PCAxLFxuXG4gICAgQWxwaGFDdXRvZmYgPSAxIDw8IDIsXG4gICAgRW1pc3NpdmUgPSAxIDw8IDMsXG5cbiAgICBEb3VibGVTaWRlZCA9IDEgPDwgNCxcbiAgICBDbG9ja3dpc2VXaW5kaW5nID0gMSA8PCA1LFxuXG4gICAgLy8gVG9wb2xvZ3kgZm9ybWF0c1xuICAgIFRyaWFuZ2xlTGlzdCA9IDAgPDwgNixcbiAgICBUcmlhbmdsZVN0cmlwID0gMSA8PCA2LFxuICAgIFBvaW50TGlzdCA9IDIgPDwgNixcbiAgICBMaW5lTGlzdCA9IDMgPDwgNixcbiAgICBMaW5lU3RyaXAgPSA0IDw8IDYsXG4gICAgVW5pbmRleGVkID0gNSA8PCA2LFxuICAgIC8vIExJTkVfTE9PUCAoY3VycmVudGx5IHVuc3VwcG9ydGVkIGJ5IHdlYmdwdSlcbiAgICAvLyBUUklBTkdMRV9GQU4gKGN1cnJlbnRseSB1bnN1cHBvcnRlZCBieSB3ZWJncHUpXG59XG5cbmV4cG9ydCBjb25zdCBUb3BvbG9neUZvcm1hdE1hc2sgPSAweDExMSA8PCA2O1xuXG5leHBvcnQgY29uc3QgUHJpbWl0aXZlU3RhdGVNYXNrID0gKFxuICAgIFRvcG9sb2d5Rm9ybWF0TWFza1xuICAgIHwgUGlwZWxpbmVGZWF0dXJlRmxhZ3MuRG91YmxlU2lkZWRcbiAgICB8IFBpcGVsaW5lRmVhdHVyZUZsYWdzLkNsb2Nrd2lzZVdpbmRpbmdcbik7XG5cbmV4cG9ydCBjb25zdCBDb2RlTWFzayA9IH4oXG4gICAgVG9wb2xvZ3lGb3JtYXRNYXNrXG4gICAgfCBQaXBlbGluZUZlYXR1cmVGbGFncy5DbG9ja3dpc2VXaW5kaW5nXG4pO1xuXG5leHBvcnQgY29uc3QgSW5zdGFuY2VCdWZmZXJMYXlvdXRNYXNrID0gKFxuICAgIFBpcGVsaW5lRmVhdHVyZUZsYWdzLlZlcnRleE5vcm1hbHNcbik7XG5cbmV4cG9ydCBjb25zdCBWZXJ0ZXhCdWZmZXJMYXlvdXRNYXNrID0gKFxuICAgIFBpcGVsaW5lRmVhdHVyZUZsYWdzLlZlcnRleE5vcm1hbHNcbiAgICB8IFBpcGVsaW5lRmVhdHVyZUZsYWdzLlZlcnRleENvbG9yc1xuKTtcblxuZXhwb3J0IGNvbnN0IE1hdGVyaWFsQnVmZmVyTGF5b3V0TWFzayA9IChcbiAgICBQaXBlbGluZUZlYXR1cmVGbGFncy5BbHBoYUN1dG9mZlxuKTtcblxuZXhwb3J0IGNvbnN0IE1hdGVyaWFsQmluZGdyb3VwTGF5b3V0TWFzayA9IChcbiAgICBNYXRlcmlhbEJ1ZmZlckxheW91dE1hc2tcbiAgICB8IFBpcGVsaW5lRmVhdHVyZUZsYWdzLkVtaXNzaXZlXG4pO1xuXG5leHBvcnQgY29uc3QgTWF0ZXJpYWxNYXNrID0gKFxuICAgIE1hdGVyaWFsQmluZGdyb3VwTGF5b3V0TWFza1xuICAgIHwgUGlwZWxpbmVGZWF0dXJlRmxhZ3MuRG91YmxlU2lkZWRcbik7XG5cbmV4cG9ydCBjb25zdCBQaXBlbGluZUxheW91dE1hc2sgPSAoXG4gICAgSW5zdGFuY2VCdWZmZXJMYXlvdXRNYXNrXG4gICAgfCBNYXRlcmlhbE1hc2tcbik7XG5cbmV4cG9ydCBmdW5jdGlvbiBmZWF0dXJlRmxhZ3NUb05hbWVzKHZhbDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKFBpcGVsaW5lRmVhdHVyZUZsYWdzKVxuICAgICAgICAuZmxhdE1hcCgoW2tleSwgZmxhZ10pID0+IHR5cGVvZiBmbGFnID09PSAnbnVtYmVyJyAmJiAoZmxhZyAmIHZhbCkgPyBrZXkgOiBbXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmZWF0dXJlRmxhZ3NUb1N0cmluZyh2YWw6IG51bWJlcikge1xuICAgIHJldHVybiBmZWF0dXJlRmxhZ3NUb05hbWVzKHZhbCkudG9TdHJpbmcoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hc2tSZWR1bmRhbnRGZWF0dXJlcyhmbGFnczogUGlwZWxpbmVGZWF0dXJlRmxhZ3MpIHtcbiAgICBsZXQgbWFza2VkID0gZmxhZ3M7XG4gICAgaWYgKG1hc2tlZCAmIFBpcGVsaW5lRmVhdHVyZUZsYWdzLkRvdWJsZVNpZGVkKSBtYXNrZWQgJj0gflBpcGVsaW5lRmVhdHVyZUZsYWdzLkNsb2Nrd2lzZVdpbmRpbmc7XG4gICAgcmV0dXJuIG1hc2tlZDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8452\n')},2462:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _camera_camera__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8602);\n\nconst label = 'global uniforms';\nclass GlobalUniforms {\n    constructor(device) {\n        this.deviceBuffer = device.createBuffer(GlobalUniforms.bufferDescriptor);\n        this.bindGroupLayout = device.createBindGroupLayout(GlobalUniforms.layoutDescriptor);\n        this.bindGroupDescriptor = {\n            label,\n            layout: this.bindGroupLayout,\n            entries: [\n                {\n                    binding: 0,\n                    resource: {\n                        buffer: this.deviceBuffer,\n                        offset: 0,\n                        size: GlobalUniforms.bufferSize,\n                    },\n                },\n            ],\n        };\n        this.bindgroup = device.createBindGroup(this.bindGroupDescriptor);\n    }\n    updateDeviceBuffer(queue, camera) {\n        camera.cacheView();\n        queue.writeBuffer(this.deviceBuffer, 0, camera.buffer);\n    }\n}\nGlobalUniforms.code = (group) => /* wgsl */ `\r\n        struct GlobalUniforms {\r\n            worldToView: mat4x4f,\r\n            viewToClip: mat4x4f,\r\n            worldToClip: mat4x4f,\r\n            inverseWorldToView: mat4x4f,\r\n            inverseViewToClip: mat4x4f,\r\n            inverseWorldToClip: mat4x4f,\r\n        }\r\n\r\n        @group(${group}) @binding(0) var<uniform> globals: GlobalUniforms;\r\n    `;\nGlobalUniforms.bufferSize = _camera_camera__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .A.bufferLength;\nGlobalUniforms.layoutDescriptor = {\n    label,\n    entries: [\n        {\n            binding: 0,\n            buffer: { minBindingSize: GlobalUniforms.bufferSize },\n            visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,\n        },\n    ],\n};\nGlobalUniforms.bufferDescriptor = {\n    label,\n    size: GlobalUniforms.bufferSize,\n    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GlobalUniforms);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQ2Mi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQXFDO0FBRXJDLE1BQU0sS0FBSyxHQUFHLGlCQUFpQixDQUFDO0FBRWhDLE1BQXFCLGNBQWM7SUFzQy9CLFlBQVksTUFBaUI7UUFDekIsSUFBSSxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3pFLElBQUksQ0FBQyxlQUFlLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRXJGLElBQUksQ0FBQyxtQkFBbUIsR0FBRztZQUN2QixLQUFLO1lBQ0wsTUFBTSxFQUFFLElBQUksQ0FBQyxlQUFlO1lBQzVCLE9BQU8sRUFBRTtnQkFDTDtvQkFDSSxPQUFPLEVBQUUsQ0FBQztvQkFDVixRQUFRLEVBQUU7d0JBQ04sTUFBTSxFQUFFLElBQUksQ0FBQyxZQUFZO3dCQUN6QixNQUFNLEVBQUUsQ0FBQzt3QkFDVCxJQUFJLEVBQUUsY0FBYyxDQUFDLFVBQVU7cUJBQ2xDO2lCQUNKO2FBQ0o7U0FDSixDQUFDO1FBRUYsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxLQUFlLEVBQUUsTUFBYztRQUM5QyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDbkIsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0QsQ0FBQzs7QUE5RGUsbUJBQUksR0FBRyxDQUFDLEtBQWEsRUFBRSxFQUFFLENBQUMsVUFBVTs7Ozs7Ozs7OztpQkFVdkMsS0FBSztLQUNqQixDQUFDO0FBRWMseUJBQVUsR0FBRywrREFBTSxDQUFDLFlBQVksQ0FBQztBQUVqQywrQkFBZ0IsR0FBaUM7SUFDN0QsS0FBSztJQUNMLE9BQU8sRUFBRTtRQUNMO1lBQ0ksT0FBTyxFQUFFLENBQUM7WUFDVixNQUFNLEVBQUUsRUFBRSxjQUFjLEVBQUUsY0FBYyxDQUFDLFVBQVUsRUFBRTtZQUNyRCxVQUFVLEVBQUUsY0FBYyxDQUFDLE1BQU0sR0FBRyxjQUFjLENBQUMsUUFBUTtTQUM5RDtLQUNKO0NBQ0osQ0FBQztBQUVjLCtCQUFnQixHQUF3QjtJQUNwRCxLQUFLO0lBQ0wsSUFBSSxFQUFFLGNBQWMsQ0FBQyxVQUFVO0lBQy9CLEtBQUssRUFBRSxjQUFjLENBQUMsT0FBTyxHQUFHLGNBQWMsQ0FBQyxRQUFRO0NBQzFELENBQUM7aUVBL0JlLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYnVudC1wb3J0Zm9saW8vLi9zcmMvcmVuZGVyaW5nL2dsb2JhbC11bmlmb3Jtcy50cz82ZTYxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDYW1lcmEgZnJvbSAnLi9jYW1lcmEvY2FtZXJhJztcclxuXHJcbmNvbnN0IGxhYmVsID0gJ2dsb2JhbCB1bmlmb3Jtcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHbG9iYWxVbmlmb3JtcyB7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgY29kZSA9IChncm91cDogbnVtYmVyKSA9PiAvKiB3Z3NsICovYFxyXG4gICAgICAgIHN0cnVjdCBHbG9iYWxVbmlmb3JtcyB7XHJcbiAgICAgICAgICAgIHdvcmxkVG9WaWV3OiBtYXQ0eDRmLFxyXG4gICAgICAgICAgICB2aWV3VG9DbGlwOiBtYXQ0eDRmLFxyXG4gICAgICAgICAgICB3b3JsZFRvQ2xpcDogbWF0NHg0ZixcclxuICAgICAgICAgICAgaW52ZXJzZVdvcmxkVG9WaWV3OiBtYXQ0eDRmLFxyXG4gICAgICAgICAgICBpbnZlcnNlVmlld1RvQ2xpcDogbWF0NHg0ZixcclxuICAgICAgICAgICAgaW52ZXJzZVdvcmxkVG9DbGlwOiBtYXQ0eDRmLFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgQGdyb3VwKCR7Z3JvdXB9KSBAYmluZGluZygwKSB2YXI8dW5pZm9ybT4gZ2xvYmFsczogR2xvYmFsVW5pZm9ybXM7XHJcbiAgICBgO1xyXG5cclxuICAgIHN0YXRpYyByZWFkb25seSBidWZmZXJTaXplID0gQ2FtZXJhLmJ1ZmZlckxlbmd0aDtcclxuXHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgbGF5b3V0RGVzY3JpcHRvcjogR1BVQmluZEdyb3VwTGF5b3V0RGVzY3JpcHRvciA9IHtcclxuICAgICAgICBsYWJlbCxcclxuICAgICAgICBlbnRyaWVzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJpbmRpbmc6IDAsXHJcbiAgICAgICAgICAgICAgICBidWZmZXI6IHsgbWluQmluZGluZ1NpemU6IEdsb2JhbFVuaWZvcm1zLmJ1ZmZlclNpemUgfSxcclxuICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6IEdQVVNoYWRlclN0YWdlLlZFUlRFWCB8IEdQVVNoYWRlclN0YWdlLkZSQUdNRU5ULFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF0sXHJcbiAgICB9O1xyXG5cclxuICAgIHN0YXRpYyByZWFkb25seSBidWZmZXJEZXNjcmlwdG9yOiBHUFVCdWZmZXJEZXNjcmlwdG9yID0ge1xyXG4gICAgICAgIGxhYmVsLFxyXG4gICAgICAgIHNpemU6IEdsb2JhbFVuaWZvcm1zLmJ1ZmZlclNpemUsXHJcbiAgICAgICAgdXNhZ2U6IEdQVUJ1ZmZlclVzYWdlLlVOSUZPUk0gfCBHUFVCdWZmZXJVc2FnZS5DT1BZX0RTVCxcclxuICAgIH07XHJcblxyXG4gICAgZGV2aWNlQnVmZmVyOiBHUFVCdWZmZXI7XHJcbiAgICBiaW5kR3JvdXBMYXlvdXQ6IEdQVUJpbmRHcm91cExheW91dDtcclxuICAgIGJpbmRHcm91cERlc2NyaXB0b3IhOiBHUFVCaW5kR3JvdXBEZXNjcmlwdG9yO1xyXG4gICAgYmluZGdyb3VwITogR1BVQmluZEdyb3VwO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRldmljZTogR1BVRGV2aWNlKSB7XHJcbiAgICAgICAgdGhpcy5kZXZpY2VCdWZmZXIgPSBkZXZpY2UuY3JlYXRlQnVmZmVyKEdsb2JhbFVuaWZvcm1zLmJ1ZmZlckRlc2NyaXB0b3IpO1xyXG4gICAgICAgIHRoaXMuYmluZEdyb3VwTGF5b3V0ID0gZGV2aWNlLmNyZWF0ZUJpbmRHcm91cExheW91dChHbG9iYWxVbmlmb3Jtcy5sYXlvdXREZXNjcmlwdG9yKTtcclxuXHJcbiAgICAgICAgdGhpcy5iaW5kR3JvdXBEZXNjcmlwdG9yID0ge1xyXG4gICAgICAgICAgICBsYWJlbCxcclxuICAgICAgICAgICAgbGF5b3V0OiB0aGlzLmJpbmRHcm91cExheW91dCxcclxuICAgICAgICAgICAgZW50cmllczogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGJpbmRpbmc6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2U6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiB0aGlzLmRldmljZUJ1ZmZlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiBHbG9iYWxVbmlmb3Jtcy5idWZmZXJTaXplLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuYmluZGdyb3VwID0gZGV2aWNlLmNyZWF0ZUJpbmRHcm91cCh0aGlzLmJpbmRHcm91cERlc2NyaXB0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZURldmljZUJ1ZmZlcihxdWV1ZTogR1BVUXVldWUsIGNhbWVyYTogQ2FtZXJhKSB7XHJcbiAgICAgICAgY2FtZXJhLmNhY2hlVmlldygpO1xyXG4gICAgICAgIHF1ZXVlLndyaXRlQnVmZmVyKHRoaXMuZGV2aWNlQnVmZmVyLCAwLCBjYW1lcmEuYnVmZmVyKTtcclxuICAgIH1cclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2462\n")},4164:(module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _settings_property_listener__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1058);\n/* harmony import */ var _settings_skybox_options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8545);\n/* harmony import */ var _rendering_default_forward_pass_descriptor_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(291);\n/* harmony import */ var _rendering_default_forward_pass_pipeline_feature_flags__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8452);\n/* harmony import */ var _cubemap_blur_cubemap_guassian_pyramid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(7638);\n/* harmony import */ var _loader_gltf_loader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(459);\n/* harmony import */ var _utils_general__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(80);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_settings_skybox_options__WEBPACK_IMPORTED_MODULE_1__]);\n_settings_skybox_options__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _GltfModel_settings;\n\n\n\n\n\n\n\nconst gltfIndex = await getGltfIndex();\nasync function getGltfIndex() {\n    const indexUrl = \"https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Assets/main/Models/\" + \"model-index.json\";\n    const indexRes = await fetch(indexUrl);\n    const indexStr = await indexRes.text();\n    const indexJson = JSON.parse(indexStr);\n    if (!Array.isArray(indexJson)) {\n        throw new Error('could not load gtlf model index');\n    }\n    const entries = indexJson.flatMap((gltf) => {\n        if (!(0,_utils_general__WEBPACK_IMPORTED_MODULE_6__/* .isObject */ .Gv)(gltf)\n            || !('label' in gltf)\n            || typeof gltf.label !== 'string'\n            || !('name' in gltf)\n            || typeof gltf.name !== 'string'\n            || !('variants' in gltf)\n            || !(0,_utils_general__WEBPACK_IMPORTED_MODULE_6__/* .isObject */ .Gv)(gltf.variants)\n            || typeof gltf.variants.glTF !== 'string')\n            return [];\n        const { variants: { glTF: file }, label, name } = gltf;\n        const path = `${\"https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Assets/main/Models/\"}${name}/glTF/${file}`;\n        return [[label, path]];\n    });\n    return Object.fromEntries(entries);\n}\nclass GltfModel {\n    get depthTextureView() {\n        return this.descriptorMap.gbuffer.depth.view;\n    }\n    constructor(renderer) {\n        this.renderer = renderer;\n        this.geometryPipelines = {};\n        _GltfModel_settings.set(this, (0,_settings_property_listener__WEBPACK_IMPORTED_MODULE_0__/* [\"default\"] */ .A)({\n            skybox: (0,_settings_skybox_options__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .A)(this),\n            model: {\n                [_settings_property_listener__WEBPACK_IMPORTED_MODULE_0__/* .ListenerSyms */ .t.$type]: 'file',\n                [_settings_property_listener__WEBPACK_IMPORTED_MODULE_0__/* .ListenerSyms */ .t.$callback]: (val, key) => {\n                    if (key !== 'value' || val == null)\n                        return;\n                    if (typeof val === 'string' || val instanceof File) {\n                        void this.setModel(val);\n                    }\n                },\n                accept: '.hdr',\n                selection: {\n                    value: 'Environment Test',\n                    initialValues: gltfIndex,\n                },\n                process: (file) => file,\n            },\n        }));\n        this.settings = __classPrivateFieldGet(this, _GltfModel_settings, \"f\").publicSettings;\n        this.priority = 1000;\n        this.descriptorMap = new _rendering_default_forward_pass_descriptor_map__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .A(renderer.device, renderer.gbuffer, renderer.globals);\n        this.device = renderer.device;\n        this.renderer.addForwardPass(this);\n    }\n    async setSkybox(skybox) {\n        await (0,_cubemap_blur_cubemap_guassian_pyramid__WEBPACK_IMPORTED_MODULE_4__/* [\"default\"] */ .A)({\n            texture: skybox,\n            device: this.renderer.device,\n            inPlace: true,\n            delayWork: requestAnimationFrame,\n        });\n        this.renderer.skybox = skybox;\n    }\n    async setModel(modelPath) {\n        const size = { width: 1, height: 1 };\n        const colorArray = new Float32Array([1, 1, 1, 1]);\n        const opaqueWhite = this.renderer.device.createTexture({\n            size,\n            format: 'rgba32float',\n            usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,\n        });\n        this.renderer.device.queue.writeTexture({ texture: opaqueWhite }, colorArray, {}, size);\n        const normalMap = this.renderer.device.createTexture({\n            size,\n            format: 'rgba32float',\n            usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,\n        });\n        colorArray.set([0.5, 0.5, 1, 1]);\n        this.renderer.device.queue.writeTexture({ texture: normalMap }, colorArray, {}, size);\n        const sampler = {\n            addressModeU: 'repeat',\n            addressModeV: 'repeat',\n            magFilter: 'linear',\n            minFilter: 'linear',\n            mipmapFilter: 'linear',\n        };\n        const matData = {\n            baseColorTexture: opaqueWhite,\n            baseColorFactor: [1, 1, 1, 1],\n            normalTexture: normalMap,\n            metallicRoughnessTexture: opaqueWhite,\n            metallicFactor: 1,\n            roughnessFactor: 1,\n            baseColorSampler: sampler,\n            normalSampler: sampler,\n            metallicRoughnessSampler: sampler,\n        };\n        this.geometryPipelines = await (0,_loader_gltf_loader__WEBPACK_IMPORTED_MODULE_5__/* [\"default\"] */ .A)(modelPath, this.renderer.device, this.descriptorMap, matData, GltfModel.goalLayout, {});\n    }\n    render({ encoder, gbuffer, globals }) {\n        const pass = encoder.beginRenderPass(gbuffer.passDescriptor);\n        pass.setBindGroup(0, globals.bindgroup);\n        for (const pipeline of Object.values(this.geometryPipelines)) {\n            pipeline?.draw(pass, this.renderer.device.queue);\n        }\n        pass.end();\n    }\n}\n_GltfModel_settings = new WeakMap();\nGltfModel.title = 'glTF Model Viewer';\nGltfModel.description = '';\nGltfModel.goalLayout = [\n    {\n        name: 'POSITION',\n        type: 'VEC3',\n        componentType: 5126 /* ComponentType.float32 */,\n    },\n    {\n        name: 'TEXCOORD_0',\n        type: 'VEC2',\n        componentType: 5126 /* ComponentType.float32 */,\n    },\n    {\n        name: 'TANGENT',\n        type: 'VEC4',\n        componentType: 5126 /* ComponentType.float32 */,\n        depends: ['NORMAL'],\n        fill: [1, 0, 0, 1],\n    },\n    {\n        name: 'NORMAL',\n        type: 'VEC3',\n        componentType: 5126 /* ComponentType.float32 */,\n        strip: true,\n        feature: _rendering_default_forward_pass_pipeline_feature_flags__WEBPACK_IMPORTED_MODULE_3__/* .PipelineFeatureFlags */ .Ot.VertexNormals,\n    },\n    {\n        name: 'COLOR_0',\n        type: 'VEC4',\n        componentType: 5126 /* ComponentType.float32 */,\n        strip: true,\n        feature: _rendering_default_forward_pass_pipeline_feature_flags__WEBPACK_IMPORTED_MODULE_3__/* .PipelineFeatureFlags */ .Ot.VertexColors,\n        fill: [1, 1, 1, 1],\n    },\n];\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GltfModel);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4164\n")},459:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  A: () => (/* binding */ importGltf)\n});\n\n// EXTERNAL MODULE: ./node_modules/.pnpm/wgpu-matrix@3.0.2/node_modules/wgpu-matrix/dist/3.x/wgpu-matrix.module.js\nvar wgpu_matrix_module = __webpack_require__(4523);\n// EXTERNAL MODULE: ./node_modules/.pnpm/@loaders.gl+core@4.2.2/node_modules/@loaders.gl/core/dist/lib/api/load.js + 50 modules\nvar load = __webpack_require__(4245);\n// EXTERNAL MODULE: ./node_modules/.pnpm/@loaders.gl+gltf@4.2.2_@loaders.gl+core@4.2.2/node_modules/@loaders.gl/gltf/dist/gltf-loader.js + 71 modules\nvar gltf_loader = __webpack_require__(6732);\n// EXTERNAL MODULE: ./node_modules/.pnpm/@loaders.gl+gltf@4.2.2_@loaders.gl+core@4.2.2/node_modules/@loaders.gl/gltf/dist/lib/api/post-process-gltf.js\nvar post_process_gltf = __webpack_require__(3700);\n;// CONCATENATED MODULE: ./src/samples/gltf-viewer/loader/weld.ts\n/**\n * Adapted from gltf-transform's version:\n * github.com/donmccurdy/glTF-Transform/blob/main/packages/functions/src/weld.ts\n */\nclass HashTable {\n    constructor(prim) {\n        this.attributes = [];\n        let byteStride = 0;\n        for (const attribute of Object.values(prim)) {\n            byteStride += this.initAttribute(attribute);\n        }\n        const paddedByteStride = (byteStride + 3) & ~3;\n        this.u8 = new Uint8Array(paddedByteStride);\n        this.u32 = new Uint32Array(this.u8.buffer);\n    }\n    initAttribute(attribute) {\n        const u8 = attribute.data instanceof Uint8Array\n            ? attribute.data\n            : new Uint8Array(attribute.data.buffer);\n        const byteStride = attribute.bytesPerComponent * attribute.componentsPerElement;\n        this.attributes.push({ u8, byteStride });\n        return byteStride;\n    }\n    hash(index) {\n        let byteOffset = 0;\n        for (const { u8, byteStride } of this.attributes) {\n            for (let i = 0; i < byteStride; i += 1) {\n                this.u8[byteOffset + i] = u8[index * byteStride + i];\n            }\n            byteOffset += byteStride;\n        }\n        return this.murmurHash2();\n    }\n    equal(a, b) {\n        for (const { u8, byteStride } of this.attributes) {\n            for (let j = 0; j < byteStride; j += 1) {\n                if (u8[a * byteStride + j] !== u8[b * byteStride + j]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    hashLookup(table, buckets, key, empty) {\n        const hashmod = buckets - 1;\n        const hashval = this.hash(key);\n        let bucket = hashval & hashmod;\n        for (let probe = 0; probe <= hashmod; probe += 1) {\n            const item = table[bucket];\n            if (item === empty || this.equal(item, key)) {\n                return bucket;\n            }\n            bucket = (bucket + probe + 1) & hashmod; // Hash collision.\n        }\n        throw new Error('Hash table full.');\n    }\n    /**\n     * References:\n     * - https://github.com/mikolalysenko/murmurhash-js/blob/f19136e9f9c17f8cddc216ca3d44ec7c5c502f60/murmurhash2_gc.js#L14\n     * - https://github.com/zeux/meshoptimizer/blob/e47e1be6d3d9513153188216455bdbed40a206ef/src/indexgenerator.cpp#L12\n     */\n    murmurHash2() {\n        const m = 0x5bd1e995;\n        const r = 24;\n        let h = 0;\n        for (let k of this.u32) {\n            k = Math.imul(k, m) >>> 0;\n            k = (k ^ (k >> r)) >>> 0;\n            k = Math.imul(k, m) >>> 0;\n            h = Math.imul(h, m) >>> 0;\n            h = (h ^ k) >>> 0;\n        }\n        return h;\n    }\n}\nfunction ceilPowerOfTwo(value) {\n    return 2 ** Math.ceil(Math.log(value) / Math.LN2);\n}\n/**\n * Weld and merge, combining vertices that are bitwise-equal.\n *\n * Adapted from gltf-transform's _weldPrimitiveStrict:\n * github.com/donmccurdy/glTF-Transform/blob/main/packages/functions/src/weld.ts#L193\n */\nfunction weld(prim) {\n    const srcVertexCount = prim.POSITION.count;\n    const hash = new HashTable(prim);\n    const tableSize = ceilPowerOfTwo(srcVertexCount + (srcVertexCount / 4));\n    const is16Bit = srcVertexCount < (2 ** 16 - 1);\n    const empty = 2 ** (is16Bit ? 16 : 32) - 1;\n    const indexFormat = is16Bit ? 'uint16' : 'uint32';\n    const writeMap = is16Bit ? new Uint16Array(srcVertexCount) : new Uint32Array(srcVertexCount);\n    const table = is16Bit ? new Uint16Array(tableSize) : new Uint32Array(tableSize);\n    table.fill(empty);\n    let dstVertexCount = 0;\n    for (let i = 0; i < srcVertexCount; i += 1) {\n        const hashIndex = hash.hashLookup(table, tableSize, i, empty);\n        const dstIndex = table[hashIndex];\n        if (dstIndex === empty) {\n            table[hashIndex] = i;\n            writeMap[i] = dstVertexCount;\n            dstVertexCount += 1;\n        }\n        else {\n            writeMap[i] = writeMap[dstIndex];\n        }\n    }\n    for (const attribute of Object.values(prim)) {\n        attribute.remap(writeMap, dstVertexCount);\n    }\n    // The gltf-transform version checks for degenerate triangles to remove.\n    // This is omitted here.\n    return { indexArray: writeMap, indexFormat, vertexCount: dstVertexCount };\n}\n\n// EXTERNAL MODULE: ./src/rendering/default-forward-pass/pipeline-feature-flags.ts\nvar pipeline_feature_flags = __webpack_require__(8452);\n// EXTERNAL MODULE: ./src/rendering/constants.ts\nvar constants = __webpack_require__(4176);\n// EXTERNAL MODULE: ./src/utils/data-copy.ts\nvar data_copy = __webpack_require__(6182);\n;// CONCATENATED MODULE: ./src/rendering/default-forward-pass/primitive-draw-data.ts\n\n\n\n\nclass PrimitiveDrawData {\n    constructor(primitive, device, max, descriptorMap, instances) {\n        this.instanceCount = 0;\n        this.dirty = false;\n        this.max = max;\n        this.features = primitive.features;\n        this.name = primitive.name ?? 'mesh';\n        this.vertexCount = primitive.vertexCount;\n        if (primitive.vertexArray instanceof GPUBuffer) {\n            this.vertexBuffer = primitive.vertexArray;\n        }\n        else {\n            this.vertexBuffer = (0,data_copy/* createAndCopyBuffer */.Lr)(primitive.vertexArray, GPUBufferUsage.VERTEX, device, `${this.name} vertex buffer`);\n        }\n        if (primitive.indexArray && primitive.indexFormat) {\n            const { indexArray, indexFormat } = primitive;\n            this.indexData = {\n                indexFormat,\n                indexCount: indexArray.byteLength / (indexFormat === 'uint16' ? 2 : 4),\n                indexBuffer: (0,data_copy/* createAndCopyBuffer */.Lr)(primitive.indexArray, GPUBufferUsage.INDEX, device, `${this.name} index buffer`),\n            };\n        }\n        this.instanceSize = constants/* TypeSizes */.vV.sizeofMat4x4f;\n        if (this.features & pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexNormals) {\n            this.instanceSize += 12 * 4;\n        }\n        this.instances = new ArrayBuffer(max * this.instanceSize);\n        this.modelMatrices = new Array(max);\n        for (let i = 0; i < max; i += 1) {\n            const offset = i * this.instanceSize;\n            this.modelMatrices[i] = new Float32Array(this.instances, offset, 16);\n        }\n        if (this.features & pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexNormals) {\n            this.normalMatrices = new Array(max);\n            for (let i = 0; i < max; i += 1) {\n                const offset = (i * this.instanceSize) + constants/* TypeSizes */.vV.sizeofMat4x4f;\n                this.normalMatrices[i] = new Float32Array(this.instances, offset, 12);\n            }\n        }\n        this.instanceBuffer = device.createBuffer({\n            label: `${this.name} instance buffer`,\n            size: this.instances.byteLength,\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM,\n        });\n        this.instanceBindGroup = device.createBindGroup({\n            label: `PrimitiveDrawData instance bind group`,\n            layout: descriptorMap.forwardBindgroupLayout,\n            entries: [{\n                    binding: 0,\n                    resource: { buffer: this.instanceBuffer },\n                }],\n        });\n        if (instances) {\n            for (const instance of instances) {\n                this.addInstance(instance);\n            }\n        }\n    }\n    draw(passEncoder, queue) {\n        if (this.dirty) {\n            queue.writeBuffer(this.instanceBuffer, 0, this.instances);\n            this.dirty = false;\n        }\n        passEncoder.setVertexBuffer(0, this.vertexBuffer);\n        passEncoder.setBindGroup(2, this.instanceBindGroup);\n        if (this.indexData != null) {\n            const { indexBuffer, indexCount, indexFormat } = this.indexData;\n            passEncoder.setIndexBuffer(indexBuffer, indexFormat);\n            passEncoder.drawIndexed(indexCount, this.instanceCount);\n        }\n        else {\n            passEncoder.draw(this.vertexCount, this.instanceCount);\n        }\n    }\n    addInstance(transform) {\n        if (this.instanceCount === this.max)\n            return;\n        wgpu_matrix_module/* mat4 */.pB.copy(transform, this.modelMatrices[this.instanceCount]);\n        this.calculateNormalMatrix(this.instanceCount);\n        this.instanceCount += 1;\n        this.dirty = true;\n    }\n    calculateNormalMatrix(idx) {\n        if (!(this.features & pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexNormals))\n            return;\n        const normalMatrix = this.normalMatrices[idx];\n        wgpu_matrix_module/* mat3 */.w0.fromMat4(this.modelMatrices[idx], normalMatrix);\n        wgpu_matrix_module/* mat3 */.w0.invert(normalMatrix, normalMatrix);\n        wgpu_matrix_module/* mat3 */.w0.transpose(normalMatrix, normalMatrix);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/samples/gltf-viewer/loader/type-conversions.ts\n\nconst typeToElementCount = {\n    SCALAR: 1,\n    VEC2: 2,\n    VEC3: 3,\n    VEC4: 4,\n    MAT2: 4,\n    MAT3: 12,\n    MAT4: 16,\n};\nconst componentToSize = {\n    [5120 /* ComponentType.int8 */]: 1,\n    [5121 /* ComponentType.uint8 */]: 1,\n    [5122 /* ComponentType.int16 */]: 2,\n    [5123 /* ComponentType.uint16 */]: 2,\n    [5125 /* ComponentType.uint32 */]: 4,\n    [5126 /* ComponentType.float32 */]: 4,\n};\nconst modeToTopology = {\n    [0 /* TopologyMode.Points */]: pipeline_feature_flags/* PipelineFeatureFlags */.Ot.PointList, // POINTS\n    [1 /* TopologyMode.LineList */]: pipeline_feature_flags/* PipelineFeatureFlags */.Ot.LineList, // LINES\n    // 2: LINE_LOOP (unsupported by webgpu)\n    // 3: PipelineFeatureFlags.LineStrip, // LINE_STRIP\n    [4 /* TopologyMode.TriangleList */]: pipeline_feature_flags/* PipelineFeatureFlags */.Ot.TriangleList, // TRIANGLES\n    // 5: PipelineFeatureFlags.TriangleStrip, // TRIANGLE_STRIP\n    // 6: TRIANGLE_FAN (unsupported by webgpu)\n};\n\n;// CONCATENATED MODULE: ./src/samples/gltf-viewer/loader/attribute-wrapper.ts\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nclass AttributeWrapper {\n    constructor(accessor, componentCount) {\n        this.unwelded = false;\n        if (accessor instanceof Float32Array) {\n            this.data = accessor;\n            this.componentsPerElement = componentCount;\n            this.count = accessor.length / componentCount;\n            this.processed = true;\n            this.bytesPerComponent = 4;\n            this.copyFrom = this.copyProcessed.bind(this);\n        }\n        else {\n            this.data = accessor.value;\n            this.componentsPerElement = accessor.components;\n            this.count = accessor.count;\n            this.bytesPerComponent = accessor.bytesPerComponent;\n            this.processed = false;\n            this.view = new DataView(this.data.buffer);\n            this.copyFrom = this.copyUnprocessed.bind(this);\n            switch (accessor.componentType) {\n                case 5120 /* ComponentType.int8 */: {\n                    this.at = (i, j) => this.view.getInt8(i * this.componentsPerElement + j);\n                    break;\n                }\n                case 5121 /* ComponentType.uint8 */: {\n                    this.at = (i, j) => this.view.getUint8(i * this.componentsPerElement + j);\n                    break;\n                }\n                case 5122 /* ComponentType.int16 */: {\n                    this.at = (i, j) => {\n                        const offset = 2 * (i * this.componentsPerElement + j);\n                        return this.view.getInt16(offset, true);\n                    };\n                    break;\n                }\n                case 5123 /* ComponentType.uint16 */: {\n                    this.at = (i, j) => {\n                        const offset = 2 * (i * this.componentsPerElement + j);\n                        return this.view.getUint16(offset, true);\n                    };\n                    break;\n                }\n                case 5125 /* ComponentType.uint32 */: {\n                    this.at = (i, j) => {\n                        const offset = 4 * (i * this.componentsPerElement + j);\n                        return this.view.getUint32(offset, true);\n                    };\n                    break;\n                }\n                case 5126 /* ComponentType.float32 */: {\n                    this.at = (i, j) => {\n                        const offset = 4 * (i * this.componentsPerElement + j);\n                        return this.view.getFloat32(offset, true);\n                    };\n                    break;\n                }\n                default: throw new Error(`gltf importer -- invalid componentType ${accessor.componentType}`);\n            }\n            if (accessor.normalized) {\n                let val;\n                switch (accessor.componentType) {\n                    case 5121 /* ComponentType.uint8 */:\n                        val = 255;\n                        break;\n                    case 5120 /* ComponentType.int8 */:\n                        val = 127;\n                        break;\n                    case 5123 /* ComponentType.uint16 */:\n                        val = 65535;\n                        break;\n                    case 5122 /* ComponentType.int16 */:\n                        val = 32767;\n                        break;\n                    case 5125 /* ComponentType.uint32 */:\n                        val = 4294967295;\n                        break;\n                    default: throw new Error(`gltf importer -- invalid componentType ${accessor.componentType}`);\n                }\n                this.at = (i, j) => this.at(i, j) / val;\n            }\n        }\n    }\n    get array() {\n        if (!this.processed)\n            this.process();\n        return this.data;\n    }\n    copyProcessed(srcIdx, dstIdx, dst) {\n        for (let j = 0; j < this.componentsPerElement; j += 1) {\n            dst[dstIdx + j] = this.data[(srcIdx * this.componentsPerElement) + j];\n        }\n    }\n    copyUnprocessed(srcIdx, dstIdx, dst) {\n        for (let j = 0; j < this.componentsPerElement; j += 1) {\n            dst[dstIdx + j] = this.at(srcIdx, j);\n        }\n    }\n    markProcessed() {\n        this.processed = true;\n        this.copyFrom = this.copyProcessed.bind(this);\n        delete this.view;\n        delete this.at;\n    }\n    process() {\n        if (this.processed)\n            return;\n        const newView = new Float32Array(this.count * this.componentsPerElement);\n        for (let i = 0; i < this.count; i += 1) {\n            this.copyFrom(i, i * this.componentsPerElement, newView);\n        }\n        this.data = newView;\n        this.markProcessed();\n    }\n    unweld(indexArray) {\n        if (this.unwelded)\n            return;\n        this.unwelded = true;\n        const newView = new Float32Array(indexArray.length * this.componentsPerElement);\n        for (let i = 0; i < indexArray.length; i += 1) {\n            this.copyFrom(indexArray[i], i * this.componentsPerElement, newView);\n        }\n        this.count = indexArray.length;\n        this.data = newView;\n        this.markProcessed();\n    }\n    remap(remap, dstCount) {\n        const dstArray = new Float32Array(dstCount * this.componentsPerElement);\n        const done = new Uint8Array(dstCount);\n        for (let srcIndex = 0; srcIndex < this.count; srcIndex += 1) {\n            const dstIndex = remap[srcIndex];\n            if (done[dstIndex])\n                continue;\n            this.copyFrom(srcIndex, dstIndex * this.componentsPerElement, dstArray);\n            done[dstIndex] = 1;\n        }\n        this.data = dstArray;\n        this.markProcessed();\n    }\n}\n\n;// CONCATENATED MODULE: ./src/samples/gltf-viewer/loader/interleave-vertices.ts\n\n\n// const goalLayout: AttributeDetails[] = [\n//     {\n//         name: 'POSITION',\n//         type: 'VEC3',\n//         componentType: ComponentType.float32,\n//     },\n//     {\n//         name: 'TEXCOORD_0',\n//         type: 'VEC2',\n//         componentType: ComponentType.float32,\n//     },\n//     {\n//         name: 'TANGENT',\n//         type: 'VEC4',\n//         componentType: ComponentType.float32,\n//         depends: ['NORMAL'],\n//         fill: [1, 0, 0, 1],\n//     },\n//     {\n//         name: 'NORMAL',\n//         type: 'VEC3',\n//         componentType: ComponentType.float32,\n//         strip: true,\n//         feature: PipelineFeatureFlags.VertexNormals,\n//     },\n//     {\n//         name: 'COLOR_0',\n//         type: 'VEC4',\n//         componentType: ComponentType.float32,\n//         strip: true,\n//         feature: PipelineFeatureFlags.VertexColors,\n//         fill: [1, 1, 1, 1],\n//     },\n// ];\nfunction interleaveVertices(attributes, count) {\n    let vertexFeatures = pipeline_feature_flags/* PipelineFeatureFlags */.Ot.Defaults;\n    let stride = 5;\n    if (attributes.NORMAL != null)\n        stride += 7;\n    if (attributes.COLOR_0 != null)\n        stride += 4;\n    const vertexArray = new ArrayBuffer(stride * count * 4);\n    const vertexView = new Float32Array(vertexArray);\n    for (let i = 0; i < count; i += 1) {\n        attributes.POSITION?.copyFrom(i, stride * i, vertexView);\n    }\n    const uv = attributes.TEXCOORD_0 ?? new AttributeWrapper(new Float32Array(count * 2), 2);\n    for (let i = 0; i < count; i += 1) {\n        uv.copyFrom(i, i * stride + 3, vertexView);\n    }\n    if (attributes.NORMAL != null && attributes.TANGENT != null) {\n        vertexFeatures |= pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexNormals;\n        for (let i = 0; i < count; i += 1) {\n            attributes.TANGENT.copyFrom(i, i * stride + 5, vertexView);\n        }\n        for (let i = 0; i < count; i += 1) {\n            attributes.NORMAL.copyFrom(i, i * stride + 9, vertexView);\n        }\n    }\n    if (attributes.COLOR_0 != null) {\n        vertexFeatures |= pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexColors;\n        const step = attributes.NORMAL != null ? 12 : 5;\n        for (let i = 0; i < count; i += 1) {\n            attributes.COLOR_0.copyFrom(i, i * stride + step, vertexView);\n            vertexView[i * stride + step + 3] = 1;\n        }\n    }\n    return { vertexArray, vertexFeatures };\n}\n\n// EXTERNAL MODULE: ./src/utils/general.ts\nvar general = __webpack_require__(80);\n;// CONCATENATED MODULE: ./src/samples/gltf-viewer/loader/primitive-loader.ts\n\n\n\n\n\n\n\n\nconst generateTangentsAsync = __webpack_require__.e(/* import() */ 451).then(__webpack_require__.bind(__webpack_require__, 1451)).then((module) => module.generateTangents);\nfunction wrapIndices(indices) {\n    switch (indices.bytesPerComponent) {\n        case 2: return {\n            indexArray: new Uint16Array(indices.value.buffer),\n            indexFormat: 'uint16',\n        };\n        case 4: return {\n            indexArray: new Uint32Array(indices.value.buffer),\n            indexFormat: 'uint32',\n        };\n        case 1:\n        default: return {\n            indexArray: new Uint16Array(indices.value),\n            indexFormat: 'uint16',\n        };\n    }\n}\nfunction reindex(indices, originalMode) {\n    switch (originalMode) {\n        case 2 /* TopologyMode.LineLoop */:\n        case 3 /* TopologyMode.LineStrip */:\n        case 6 /* TopologyMode.TriangleFan */:\n        case 5 /* TopologyMode.TriangleStrip */: {\n            // TODO: convert non-list topologies into lists.\n            throw new Error('Topology currently unsupported');\n        }\n        default: return { ...wrapIndices(indices), mode: 4 /* TopologyMode.TriangleList */ };\n    }\n}\n/**\n * Checks the determinant of each given matrix and returns a culling mode such that\n * a primitive will render correctly for all nodes containing it, using 'none'\n * for primitive which are rendered both inverted and normally.\n *\n * @param instanceMatrices the instance matrices to render the primitive with\n * @returns The cull mode to use on the primitive.\n *\n * @remarks\n * The glFT spec determines the winding direction of a model by the\n * determinant of the transform of the node which uses it, allowing\n * inversion through negative scale. Changing cullMode instead\n * more easily integrates with instanced rendering, although comes\n * at a performance cost.\n */\nfunction getCullMode(instanceMatrices) {\n    let overallSign;\n    for (let i = 0; i < instanceMatrices.length; i += 1) {\n        const det = wgpu_matrix_module/* mat4 */.pB.determinant(instanceMatrices[i]);\n        const sign = Math.sign(det);\n        overallSign ??= sign;\n        if (sign !== overallSign)\n            return pipeline_feature_flags/* PipelineFeatureFlags */.Ot.DoubleSided;\n    }\n    return (overallSign == null || overallSign > 0)\n        ? pipeline_feature_flags/* PipelineFeatureFlags */.Ot.Defaults\n        : pipeline_feature_flags/* PipelineFeatureFlags */.Ot.ClockwiseWinding;\n}\nasync function loadPrimitive(layout, primitive, instances, descriptorMap, device) {\n    const attributes = primitive.attributes;\n    if (attributes.POSITION == null)\n        return {};\n    const { indices } = primitive;\n    const atrs = (0,general/* mapValues */.LG)(attributes, (atr) => new AttributeWrapper(atr));\n    let { mode } = primitive;\n    let vertexCount = attributes.POSITION.count;\n    let indexArray;\n    let indexFormat;\n    if (indices != null) {\n        ({ indexArray, indexFormat } = wrapIndices(indices));\n        if (mode !== 0 /* TopologyMode.Points */\n            && mode !== 1 /* TopologyMode.LineList */\n            && mode !== 4 /* TopologyMode.TriangleList */) {\n            ({ indexArray, indexFormat, mode } = reindex(indices, mode));\n        }\n    }\n    if (atrs.NORMAL != null && atrs.TANGENT == null) {\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (atrs.TEXCOORD_0 != null) {\n            if (indexArray != null) {\n                vertexCount = indexArray.length;\n                for (const atr of Object.values(atrs)) {\n                    atr.unweld(indexArray);\n                }\n            }\n            const start = Date.now();\n            const tangent = await generateTangentsAsync.then((func) => func(\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            atrs.POSITION.array, \n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            atrs.NORMAL.array, atrs.TEXCOORD_0.array));\n            for (let i = 3; i < tangent.length; i += 4) {\n                tangent[i] *= -1;\n            }\n            console.log(`tangents generated in ${Date.now() - start}`);\n            atrs.TANGENT = new AttributeWrapper(tangent, 4);\n            ({ indexArray, indexFormat, vertexCount } = weld(atrs));\n            mode = 4 /* TopologyMode.TriangleList */;\n        }\n        else {\n            const tangent = new Float32Array(vertexCount * 4);\n            for (let i = 0; i < vertexCount; i += 1) {\n                tangent.set([1, 0, 0, 1], i * 4);\n            }\n            atrs.TANGENT = new AttributeWrapper(tangent, 4);\n        }\n    }\n    const { vertexArray, vertexFeatures } = interleaveVertices(atrs, vertexCount);\n    let features = getCullMode(instances) | vertexFeatures;\n    if (mode != null)\n        features |= modeToTopology[mode] || 0;\n    const drawData = new PrimitiveDrawData({\n        features,\n        indexArray,\n        indexFormat,\n        vertexCount,\n        vertexArray,\n    }, device, instances.length, descriptorMap, instances);\n    return { material: primitive.material, drawData };\n}\n\n// EXTERNAL MODULE: ./src/utils/texture-importing.ts\nvar texture_importing = __webpack_require__(2253);\n;// CONCATENATED MODULE: ./src/samples/gltf-viewer/loader/material-loader.ts\n\n\nconst DEFAULT_METALLIC = 0.0;\nconst DEFAULT_ROUGHNESS = 1.0;\nconst gltfToMagDescription = {\n    9728: 'nearest',\n    9729: 'linear',\n    9984: 'nearest', // NEAREST_MIPMAP_NEAREST\n    9985: 'linear', // LINEAR_MIPMAP_NEAREST\n    9986: 'nearest', // NEAREST_MIPMAP_LINEAR\n    9987: 'linear', // LINEAR_MIPMAP_LINEAR\n};\nconst gltfToMipDescription = {\n    9984: 'nearest', // NEAREST_MIPMAP_NEAREST\n    9985: 'nearest', // LINEAR_MIPMAP_NEAREST\n    9986: 'linear', // NEAREST_MIPMAP_LINEAR\n    9987: 'linear', // LINEAR_MIPMAP_LINEAR\n};\nconst gltfToAddressMode = {\n    33071: 'clamp-to-edge', // CLAMP_TO_EDGE\n    33648: 'mirror-repeat', // MIRRORED_REPEAT\n    10497: 'repeat', // REPEAT\n};\nfunction toSamplerDescription(sampler) {\n    const { magFilter, minFilter, wrapS, wrapT } = sampler;\n    return {\n        addressModeU: gltfToAddressMode[wrapS ?? 10497],\n        addressModeV: gltfToAddressMode[wrapT ?? 10497],\n        minFilter: gltfToMagDescription[minFilter ?? 9987],\n        magFilter: gltfToMagDescription[magFilter ?? 9729],\n        mipmapFilter: gltfToMipDescription[minFilter ?? 9987] ?? 'linear',\n    };\n}\nfunction getImageData(handle) {\n    const { source, sampler } = handle;\n    if (source == null)\n        return {};\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const data = source.image.data ?? source.bufferView?.data;\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (data == null)\n        return {};\n    return { data, mimeType: source.mimeType, sampler };\n}\nasync function loadMaterial(material, defaultMaterial, device) {\n    const mat = {};\n    if (material.pbrMetallicRoughness != null) {\n        const { baseColorFactor, baseColorTexture, metallicFactor, metallicRoughnessTexture, roughnessFactor, } = material.pbrMetallicRoughness;\n        if (metallicRoughnessTexture?.texture.source == null) {\n            if (metallicFactor == null)\n                mat.metallicFactor = DEFAULT_METALLIC;\n            if (roughnessFactor == null)\n                mat.roughnessFactor = DEFAULT_ROUGHNESS;\n        }\n        else {\n            const { data, mimeType, sampler } = getImageData(metallicRoughnessTexture.texture);\n            if (data != null) {\n                mat.metallicRoughnessTexture = await (0,texture_importing/* imageToTexture */.u)({\n                    label: `${material.id} mr texture`,\n                    data,\n                    mimeType,\n                    usage: GPUTextureUsage.TEXTURE_BINDING,\n                    device,\n                });\n                if (sampler)\n                    mat.metallicRoughnessSampler = toSamplerDescription(sampler);\n            }\n        }\n        if (baseColorTexture?.texture.source != null) {\n            const { data, mimeType, sampler } = getImageData(baseColorTexture.texture);\n            if (data != null) {\n                mat.baseColorTexture = await (0,texture_importing/* imageToTexture */.u)({\n                    label: `${material.id} mr texture`,\n                    data,\n                    mimeType,\n                    usage: GPUTextureUsage.TEXTURE_BINDING,\n                    device,\n                    srgbToLinear: true,\n                });\n                if (sampler)\n                    mat.baseColorSampler = toSamplerDescription(sampler);\n            }\n        }\n        if (baseColorFactor != null)\n            mat.baseColorFactor = baseColorFactor;\n        if (metallicFactor != null)\n            mat.metallicFactor = metallicFactor;\n        if (roughnessFactor != null)\n            mat.metallicFactor = roughnessFactor;\n    }\n    else {\n        mat.metallicFactor = DEFAULT_METALLIC;\n        mat.roughnessFactor = DEFAULT_ROUGHNESS;\n    }\n    if (material.normalTexture?.texture.source != null) {\n        const { data, mimeType, sampler } = getImageData(material.normalTexture.texture);\n        if (data != null) {\n            mat.normalTexture = await (0,texture_importing/* imageToTexture */.u)({\n                label: `${material.id} mr texture`,\n                data,\n                mimeType,\n                usage: GPUTextureUsage.TEXTURE_BINDING,\n                device,\n            });\n            if (sampler)\n                mat.normalSampler = toSamplerDescription(sampler);\n        }\n    }\n    const { emissiveFactor, emissiveTexture } = material;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n    const emissiveStrength = material.extensions?.KHR_materials_emissive_strength?.emissiveStrength;\n    if (emissiveTexture != null || emissiveFactor?.some((x) => x > 0)) {\n        mat.emissiveFactor = emissiveFactor ?? [1, 1, 1];\n        mat.emissiveSampler = { magFilter: 'linear', minFilter: 'linear' };\n        if (emissiveTexture?.texture.source != null) {\n            const { data, mimeType, sampler } = getImageData(emissiveTexture.texture);\n            if (data != null) {\n                mat.emissiveTexture = await (0,texture_importing/* imageToTexture */.u)({\n                    label: `${material.id} mr texture`,\n                    data,\n                    mimeType,\n                    usage: GPUTextureUsage.TEXTURE_BINDING,\n                    device,\n                    srgbToLinear: true,\n                });\n                if (sampler)\n                    mat.emissiveSampler = toSamplerDescription(sampler);\n            }\n        }\n        else {\n            mat.emissiveTexture = defaultMaterial.baseColorTexture;\n        }\n        if (emissiveStrength != null && typeof emissiveStrength === 'number') {\n            wgpu_matrix_module/* vec3 */.eR.scale(mat.emissiveFactor, emissiveStrength, mat.emissiveFactor);\n        }\n    }\n    if (material.doubleSided)\n        mat.doubleSided = true;\n    if (material.alphaMode === 'MASK')\n        mat.alphaCutoff = material.alphaCutoff ?? 0.5;\n    return { ...defaultMaterial, ...mat };\n}\n\n;// CONCATENATED MODULE: ./src/rendering/default-forward-pass/material-draw-data.ts\n\n\nclass MaterialDrawData {\n    constructor(data, device, descriptorMap, primitiveFeatures, primitives) {\n        this.primitives = [];\n        this.features = primitiveFeatures;\n        if (data.doubleSided)\n            this.features |= pipeline_feature_flags/* PipelineFeatureFlags */.Ot.DoubleSided;\n        // TODO : don't hardcode the properties features\n        const properties = new Float32Array(12);\n        properties.set(data.baseColorFactor);\n        properties[4] = data.metallicFactor;\n        properties[5] = data.roughnessFactor;\n        if (data.alphaCutoff != null) {\n            this.features |= pipeline_feature_flags/* PipelineFeatureFlags */.Ot.AlphaCutoff;\n            properties[6] = data.alphaCutoff;\n        }\n        if (data.emissiveFactor != null) {\n            properties.set(data.emissiveFactor, 8);\n        }\n        this.propertiesBuffer = (0,data_copy/* createAndCopyBuffer */.Lr)(properties, GPUBufferUsage.UNIFORM, device);\n        const entries = [\n            { binding: 0, resource: { buffer: this.propertiesBuffer } },\n            { binding: 1, resource: descriptorMap.getSampler(data.baseColorSampler) },\n            { binding: 2, resource: data.baseColorTexture.createView({ dimension: '2d' }) },\n            { binding: 3, resource: descriptorMap.getSampler(data.normalSampler) },\n            { binding: 4, resource: data.normalTexture.createView({ dimension: '2d' }) },\n            { binding: 5, resource: descriptorMap.getSampler(data.metallicRoughnessSampler) },\n            { binding: 6, resource: data.metallicRoughnessTexture.createView({ dimension: '2d' }) },\n        ];\n        if (data.emissiveTexture != null) {\n            this.features |= pipeline_feature_flags/* PipelineFeatureFlags */.Ot.Emissive;\n            entries.push({\n                binding: 7,\n                resource: descriptorMap.getSampler(data.emissiveSampler ?? {}),\n            });\n            entries.push({\n                binding: 8,\n                resource: data.emissiveTexture.createView({ dimension: '2d' }),\n            });\n        }\n        this.layout = descriptorMap.getMaterialBindGroup(this.features);\n        this.matData = data;\n        this.bindGroup = device.createBindGroup({\n            label: (0,pipeline_feature_flags/* featureFlagsToString */.UZ)(this.features),\n            layout: this.layout,\n            entries,\n        });\n        if (primitives != null) {\n            this.addPrimitives(...primitives);\n        }\n    }\n    draw(passEncoder, queue) {\n        if (this.primitives.length === 0)\n            return;\n        passEncoder.setBindGroup(1, this.bindGroup);\n        for (const primitive of this.primitives) {\n            primitive.draw(passEncoder, queue);\n        }\n    }\n    addPrimitives(...drawData) {\n        const filtered = drawData.filter((data) => {\n            if ((data.features & this.features) === data.features)\n                return true;\n            console.warn(`invalid primitive added to material: \nprimitive: ${data.name}\nprimitive features: ${(0,pipeline_feature_flags/* featureFlagsToString */.UZ)(data.features).toString()}\nmaterial: ${this.matData.name}\nmaterial features: ${(0,pipeline_feature_flags/* featureFlagsToString */.UZ)(this.features).toString()}`);\n            return false;\n        });\n        this.primitives.push(...filtered);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/rendering/default-forward-pass/geometry-pipeline.ts\n\nclass GeometryPipeline {\n    constructor(features, maps) {\n        this.materials = [];\n        this.features = (0,pipeline_feature_flags/* maskRedundantFeatures */.P7)(features);\n        const module = maps.getShaderModule(features);\n        this.pipeline = maps.device.createRenderPipeline({\n            label: (0,pipeline_feature_flags/* featureFlagsToString */.UZ)(features),\n            layout: maps.getForwardPipelineLayout(features),\n            primitive: maps.getPrimitiveState(features),\n            vertex: {\n                entryPoint: 'vs',\n                buffers: [maps.getVertexLayout(features)],\n                module,\n            },\n            fragment: {\n                entryPoint: 'fs',\n                module,\n                targets: maps.gbuffer.targets,\n            },\n            depthStencil: {\n                depthWriteEnabled: true,\n                depthCompare: 'less-equal',\n                format: maps.gbuffer.depth.format,\n            },\n        });\n    }\n    addMaterials(...materials) {\n        if (materials.some((data) => data.features !== this.features)) {\n            throw new Error('invalid primitive added to material');\n        }\n        this.materials.push(...materials);\n    }\n    draw(passEncoder, queue) {\n        passEncoder.setPipeline(this.pipeline);\n        for (const mat of this.materials) {\n            mat.draw(passEncoder, queue);\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./src/samples/gltf-viewer/loader/gltf-loader.ts\n\n\n\n\n\n\n\n\nconst defaultLayout = [\n    {\n        name: 'POSITION',\n        type: 'VEC3',\n        componentType: 5126 /* ComponentType.float32 */,\n    },\n    {\n        name: 'TEXCOORD_0',\n        type: 'VEC2',\n        componentType: 5126 /* ComponentType.float32 */,\n    },\n    {\n        name: 'TANGENT',\n        type: 'VEC4',\n        componentType: 5126 /* ComponentType.float32 */,\n        depends: ['NORMAL'],\n        fill: [1, 0, 0, 1],\n    },\n    {\n        name: 'NORMAL',\n        type: 'VEC3',\n        componentType: 5126 /* ComponentType.float32 */,\n        strip: true,\n        feature: pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexNormals,\n    },\n    {\n        name: 'COLOR_0',\n        type: 'VEC4',\n        componentType: 5126 /* ComponentType.float32 */,\n        strip: true,\n        feature: pipeline_feature_flags/* PipelineFeatureFlags */.Ot.VertexColors,\n        fill: [1, 1, 1, 1],\n    },\n];\nconst recurseNode = (parentMatrix, meshes) => (node) => {\n    const matrix = node.matrix ?? wgpu_matrix_module/* mat4 */.pB.identity();\n    if (node.matrix == null) {\n        if (node.scale)\n            wgpu_matrix_module/* mat4 */.pB.scaling(node.scale, matrix);\n        if (node.rotation) {\n            const { axis, angle } = wgpu_matrix_module/* quat */.Yu.toAxisAngle(node.rotation);\n            wgpu_matrix_module/* mat4 */.pB.rotate(matrix, axis, angle, matrix);\n        }\n        if (node.translation != null) {\n            wgpu_matrix_module/* mat4 */.pB.setTranslation(matrix, node.translation, matrix);\n        }\n    }\n    wgpu_matrix_module/* mat4 */.pB.mul(parentMatrix, matrix, matrix);\n    if (node.mesh != null) {\n        if (!meshes.has(node.mesh))\n            meshes.set(node.mesh, []);\n        meshes.get(node.mesh).push(matrix); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n    }\n    node.children?.forEach(recurseNode(matrix, meshes));\n};\nasync function importGltf(url, device, descriptorMap, defaultMaterial, layout = defaultLayout, pipelines = {}, \n// eslint-disable-next-line no-console\nlog = console.log) {\n    log('starting import');\n    const start = Date.now();\n    const gltfWithBuffers = await (0,load/* load */.H)(url, gltf_loader/* GLTFLoader */.B);\n    log(`finished loading: ${Date.now() - start}`);\n    const { scene } = (0,post_process_gltf/* postProcessGLTF */.R)(gltfWithBuffers);\n    if (scene?.nodes == null)\n        return pipelines;\n    log(`finished processing: ${Date.now() - start}`);\n    const meshes = new Map();\n    scene.nodes.forEach(recurseNode(wgpu_matrix_module/* mat4 */.pB.identity(), meshes));\n    log(`finished creating instances: ${Date.now() - start}`);\n    const meshEntries = Array.from(meshes.entries());\n    const primitivePromises = meshEntries.flatMap(([{ primitives }, instances]) => primitives.map((prim) => loadPrimitive(layout, prim, instances, descriptorMap, device)));\n    const primitiveDescriptors = await Promise.all(primitivePromises);\n    log(`finished creating primitives: ${Date.now() - start}`);\n    const materialMap = new Map();\n    const materialPromises = {};\n    for (const { material, drawData } of primitiveDescriptors) {\n        if (drawData == null)\n            continue;\n        const key = { materialId: material?.id, features: drawData.features };\n        if (!materialMap.has(key))\n            materialMap.set(key, []);\n        materialMap.get(key).push(drawData); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n        if (material != null) {\n            materialPromises[material.id] = loadMaterial(material, defaultMaterial, device);\n        }\n    }\n    const materialEntries = Object.entries(materialPromises)\n        .map(async ([id, mat]) => [id, await mat]);\n    const materialDescriptors = Object.fromEntries(await Promise.all(materialEntries));\n    log(`finished creating material descriptors: ${Date.now() - start}`);\n    const fullDefaultMat = { ...defaultMaterial, metallicFactor: 0 };\n    for (const [{ features, materialId }, drawDatas] of materialMap.entries()) {\n        const descriptor = materialId != null ? materialDescriptors[materialId] : fullDefaultMat;\n        const mat = new MaterialDrawData(descriptor, device, descriptorMap, features, drawDatas);\n        const { features: f } = mat;\n        pipelines[f] ??= new GeometryPipeline(f, descriptorMap);\n        pipelines[f].addMaterials(mat);\n    }\n    log(`finished: ${Date.now() - start}`);\n    return pipelines;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///459\n")},6182:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Lr: () => (/* binding */ createAndCopyBuffer)\n/* harmony export */ });\n/* unused harmony exports createAndCopyCubemap, ktx2ToTexture, textureToArrayBuffer, textureToKTX */\n/* harmony import */ var _rendering_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4176);\n\n\n\nfunction createAndCopyBuffer(arr, usage, device, label, alignment = 4) {\n    const pad = alignment - 1;\n    const buffer = device.createBuffer({\n        label,\n        usage,\n        size: (arr.byteLength + pad) & ~pad,\n        mappedAtCreation: true,\n    });\n    const writeArray = new Uint8Array(buffer.getMappedRange());\n    const readArray = arr instanceof ArrayBuffer\n        ? new Uint8Array(arr)\n        : new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n    writeArray.set(readArray);\n    buffer.unmap();\n    return buffer;\n}\nfunction createAndCopyCubemap(device, data, format, usage, label) {\n    const pixelSize = TextureFormatToSize[format];\n    if (pixelSize == null) {\n        throw new Error(`copy cubemap -- unsupported format: ${format}`);\n    }\n    const width = Math.sqrt(data.byteLength / (6 * pixelSize));\n    const size = { width, height: width, depthOrArrayLayers: 6 };\n    const texture = device.createTexture({\n        usage: usage | GPUTextureUsage.COPY_DST,\n        label,\n        format,\n        size,\n    });\n    device.queue.writeTexture({ texture }, data, { bytesPerRow: width * pixelSize, rowsPerImage: width }, size);\n    return texture;\n}\nfunction ktx2ToTexture(buffer, device, options) {\n    const arr = new Uint8Array(buffer);\n    const ktx = ktxparse.read(arr);\n    const format = VkFormatToWebGPU[ktx.vkFormat];\n    if (format == null) {\n        throw new Error(`ktx texture import -- unsupported format: ${ktx.vkFormat}\\n\\tCould not covert to webgpu`);\n    }\n    const pixelSize = TextureFormatToSize[format];\n    if (pixelSize == null) {\n        throw new Error(`ktx texture import -- unsupported format: ${ktx.vkFormat}\\n\\tCould not get pixel byte size`);\n    }\n    const size = {\n        width: ktx.pixelWidth,\n        height: ktx.pixelHeight,\n        depthOrArrayLayers: ktx.faceCount,\n    };\n    const maxMipCount = Math.ceil(Math.log2(Math.max(size.width, size.height))) + 1;\n    let mipLevelCount = ktx.levels.length;\n    if (options?.mipLevelCount === 'max') {\n        mipLevelCount = maxMipCount;\n    }\n    else if (typeof options?.mipLevelCount === 'number') {\n        mipLevelCount = Math.min(maxMipCount, options.mipLevelCount);\n    }\n    let usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n    if (options?.textureUsage)\n        usage |= options.textureUsage;\n    const texture = device.createTexture({\n        label: options?.label,\n        size,\n        mipLevelCount,\n        format,\n        usage,\n    });\n    const mipCopies = Math.min(ktx.levels.length, mipLevelCount) - 1;\n    for (let mipLevel = mipCopies; mipLevel >= 0; mipLevel -= 1) {\n        const width = size.width >> mipLevel;\n        const height = size.height >> mipLevel;\n        const { levelData } = ktx.levels[mipLevel];\n        const rawBytesPerRow = width * pixelSize;\n        const bytesPerRow = Math.max(rawBytesPerRow, 256);\n        const rowsPerImage = height;\n        const bytesPerImage = rowsPerImage * bytesPerRow;\n        let imageData = levelData;\n        if (bytesPerRow > rawBytesPerRow) {\n            imageData = new Uint8Array(bytesPerImage * texture.depthOrArrayLayers);\n            for (let h = 0; h < height * texture.depthOrArrayLayers; h += 1) {\n                for (let w = 0; w < rawBytesPerRow; w += 1) {\n                    imageData[w + h * bytesPerRow] = levelData[w + h * rawBytesPerRow];\n                }\n            }\n        }\n        const layerBatch = Math.min(Math.floor(device.limits.maxBufferSize / bytesPerImage), ktx.faceCount);\n        const layerCount = Math.ceil(ktx.faceCount / layerBatch);\n        for (let l = 0; l < layerCount; l += 1) {\n            const offset = l * layerBatch;\n            const count = Math.min(layerBatch, ktx.faceCount - offset);\n            const data = layerCount > 1\n                ? imageData.subarray(offset * bytesPerImage, (offset + count) * bytesPerImage)\n                : imageData;\n            device.queue.writeTexture({ mipLevel, texture, origin: [0, 0, offset] }, data, { bytesPerRow, rowsPerImage }, [width, height, count]);\n        }\n    }\n    return texture;\n}\nasync function textureToArrayBuffer({ device, texture, mipLevel = 0, returnBuffer, storageBuffer, resultBuffer, description, }) {\n    const pixelSize = TextureFormatToSize[texture.format];\n    const fullDescription = padTemplate `[textureToKTX${description ?? ''}${texture.label}] --`;\n    if (pixelSize == null) {\n        throw new Error(`${fullDescription} format ${texture.format} unsupported`);\n    }\n    const width = texture.width >> mipLevel;\n    const height = texture.height >> mipLevel;\n    const rawBytesPerRow = width * pixelSize;\n    const bytesPerRow = Math.max(rawBytesPerRow, 256);\n    const rowsPerImage = height;\n    const byteSize = rowsPerImage * bytesPerRow * texture.depthOrArrayLayers;\n    const resultSize = rawBytesPerRow * height * texture.depthOrArrayLayers;\n    if (resultBuffer != null && resultBuffer.byteLength < byteSize) {\n        throw new Error(`${fullDescription} given result array not large enough.\r\n${resultBuffer.byteLength} < ${byteSize}`);\n    }\n    if (storageBuffer != null && storageBuffer.size < byteSize) {\n        throw new Error(`${fullDescription} given storage buffer not large enough.\r\n${storageBuffer.size} < ${byteSize}`);\n    }\n    const requiredUsage = GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ;\n    if (storageBuffer != null && (storageBuffer.usage & requiredUsage) !== requiredUsage) {\n        throw new Error(`${fullDescription} given storage does not have correct usage flags.\r\nGiven: ${storageBuffer.usage}\r\nRequired: ${requiredUsage}`);\n    }\n    let imageData = resultBuffer ?? new Uint8Array(byteSize);\n    const storage = storageBuffer ?? device.createBuffer({\n        label: `${fullDescription} storage buffer`,\n        size: byteSize,\n        usage: requiredUsage,\n    });\n    const encoder = device.createCommandEncoder({ label: `${fullDescription} encoder` });\n    encoder.copyTextureToBuffer({ texture, mipLevel }, { buffer: storage, rowsPerImage, bytesPerRow }, { width, height, depthOrArrayLayers: texture.depthOrArrayLayers });\n    device.queue.submit([encoder.finish()]);\n    await Promise.all([\n        storage.mapAsync(GPUMapMode.READ, 0, byteSize),\n        device.queue.onSubmittedWorkDone(),\n    ]);\n    const mapped = storage.getMappedRange(0, byteSize);\n    imageData.set(new Uint8Array(mapped));\n    storage.unmap();\n    if (bytesPerRow > rawBytesPerRow) {\n        for (let h = 0; h < height * texture.depthOrArrayLayers; h += 1) {\n            for (let w = 0; w < rawBytesPerRow; w += 1) {\n                imageData[w + h * rawBytesPerRow] = imageData[w + h * bytesPerRow];\n            }\n        }\n        imageData = imageData.slice(0, resultSize);\n    }\n    return {\n        imageData,\n        storageBuffer: returnBuffer ? storage : undefined,\n    };\n}\nasync function textureToKTX(device, texture, cube = false) {\n    const pixelSize = TextureFormatToSize[texture.format];\n    const typeSize = TextureFormatToChannelSize[texture.format];\n    if (pixelSize == null || typeSize == null) {\n        throw new Error(`textureToKTX -- format ${texture.format} of ${texture.label} unsupported`);\n    }\n    const container = new ktxparse.KTX2Container();\n    container.pixelWidth = texture.width;\n    container.pixelHeight = texture.height;\n    container.vkFormat = WebGPUToVkFormat[texture.format];\n    container.typeSize = typeSize;\n    delete container.keyValue.KTXswizzle;\n    const dataFormat = container.dataFormatDescriptor[0];\n    dataFormat.colorModel = ktxparse.KHR_DF_MODEL_RGBSDA;\n    dataFormat.transferFunction = ktxparse.KHR_DF_TRANSFER_LINEAR;\n    dataFormat.bytesPlane[0] = pixelSize;\n    dataFormat.samples = [0, 1, 2, 3].map((i) => ({\n        channelType: [192, 193, 194, 207][i],\n        samplePosition: [0, 0, 0, 0],\n        bitLength: container.typeSize * 8 - 1,\n        bitOffset: container.typeSize * 8 * i,\n        sampleLower: -1082130432,\n        sampleUpper: 1065353216,\n    }));\n    if (texture.dimension === '3d') {\n        container.faceCount = 1;\n        container.pixelDepth = texture.depthOrArrayLayers;\n    }\n    else if (cube) {\n        const cubeLayers = texture.depthOrArrayLayers / 6;\n        container.layerCount = cubeLayers === 1 ? 0 : cubeLayers;\n        container.faceCount = 6;\n    }\n    else {\n        container.layerCount = texture.depthOrArrayLayers;\n        container.faceCount = 1;\n    }\n    let storageBuffer;\n    let imageData;\n    for (let i = 0; i < texture.mipLevelCount; i += 1) {\n        // eslint-disable-next-line no-await-in-loop\n        ({ imageData, storageBuffer } = await textureToArrayBuffer({\n            mipLevel: i,\n            returnBuffer: true,\n            device,\n            texture,\n            storageBuffer,\n        }));\n        container.levels.push({\n            levelData: imageData,\n            uncompressedByteLength: imageData.byteLength,\n        });\n    }\n    return ktxparse.write(container);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6182\n")},2253:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   u: () => (/* binding */ imageToTexture),\n/* harmony export */   y: () => (/* binding */ parseHDR)\n/* harmony export */ });\n/* harmony import */ var _data_conversion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4955);\n/* harmony import */ var _texture_processing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7335);\n\n\nasync function imageToTexture({ device, data, mimeType, usage = GPUTextureUsage.TEXTURE_BINDING, mips = true, format = 'rgba8unorm', colorSpace = 'srgb', label = '', srgbToLinear, }) {\n    const blob = new Blob([data], { type: mimeType });\n    const bitmap = await createImageBitmap(blob, { colorSpaceConversion: 'none' });\n    const size = { width: bitmap.width, height: bitmap.height };\n    const texture = device.createTexture({\n        label,\n        format,\n        size: size,\n        usage: usage | GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n        mipLevelCount: mips ? 1 + (Math.log2(Math.max(bitmap.width, bitmap.height)) | 0) : 1,\n    });\n    device.queue.copyExternalImageToTexture({ source: bitmap }, { texture, colorSpace }, size);\n    if (srgbToLinear)\n        (0,_texture_processing__WEBPACK_IMPORTED_MODULE_1__/* .srgbTextureToLinear */ .sP)(device, texture);\n    if (mips)\n        void (0,_texture_processing__WEBPACK_IMPORTED_MODULE_1__/* .generateMips */ .fF)(device, texture);\n    return texture;\n}\nfunction parseHDR(inData) {\n    const decoder = new TextDecoder();\n    const buffer = inData instanceof Uint8Array ? inData : new Uint8Array(inData);\n    let pos = 0;\n    const getLine = (lineLimit = 1024) => {\n        const limit = Math.min(buffer.length, lineLimit + pos);\n        const sub = buffer.subarray(pos, limit);\n        const end = sub.indexOf(0x0A) + 1;\n        pos += end;\n        return end === 0 ? undefined : decoder.decode(sub.subarray(0, end));\n    };\n    const importError = (msg) => new Error('HDR Import Error: ' + msg);\n    // #region Read Header\n    const magicTokenRegex = /^#\\?(\\S+)/;\n    const magicTokenLine = getLine();\n    if (magicTokenLine == null)\n        throw importError('no header found');\n    if (!magicTokenRegex.test(magicTokenLine))\n        throw importError('bad initial token');\n    const headerRegs = [\n        /FORMAT=(?<format>\\S+)/, // format\n        /-Y\\s+(?<Y>\\d+)\\s+\\+X\\s+(?<X>\\d+)/, // size\n        /EXPOSURE\\s*=\\s*(?<exposure>\\d+(\\.\\d+)?)/, // exposure\n        /GAMMA\\s*=\\s*(?<gamma>\\d+(\\.\\d+)?)/, // gamma\n    ];\n    const headerReg = new RegExp(`^\\\\s*(${headerRegs.map(({ source }) => `(${source})`).join('|')})\\\\s*$`);\n    let noFormat = true;\n    let gamma = 1; /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n    let exposure = 1; /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n    let width = undefined;\n    let height = undefined;\n    for (let line = getLine(); line != null; line = width == null ? getLine() : undefined) {\n        const groups = line.match(headerReg)?.groups;\n        if (groups == null)\n            continue;\n        if (groups.format != null) {\n            noFormat = false;\n        }\n        else if (groups.X != null && groups.Y != null) {\n            width = parseInt(groups.X);\n            height = parseInt(groups.Y);\n        }\n        else if (groups.gamma != null) {\n            gamma = parseFloat(groups.gamma);\n        }\n        else if (groups.exposure != null) {\n            exposure = parseFloat(groups.exposure);\n        }\n    }\n    if (noFormat)\n        throw importError('missing format specifier');\n    if (width == null || height == null)\n        throw importError('missing image size specifier');\n    // #endregion\n    // #region Read Scanline Data\n    let rawData;\n    const unencodable = width < 8 || width > 0x7fff;\n    const flatData = buffer[pos] !== 2 || buffer[pos + 1] !== 2 || (buffer[pos + 2] & 0x80) !== 0;\n    if (unencodable || flatData) {\n        rawData = buffer.subarray(pos);\n    }\n    else {\n        rawData = new Uint8Array(width * height * 4);\n        const end = 4 * width;\n        const scanline_buffer = new Uint8Array(end);\n        const len = buffer.byteLength;\n        for (let k = 0, offset = 0; k < height && pos < len; k++) {\n            if (pos + 4 > len)\n                throw importError('file ended durning scanline');\n            if ((2 != buffer[pos++]) || (2 != buffer[pos++]) || (((buffer[pos++] << 8) | buffer[pos++]) != width))\n                throw importError('bad rgbe scanline format');\n            let count;\n            for (let ptr = 0; ptr < end && pos < len; ptr += count) {\n                count = buffer[pos++];\n                const isEncodedRun = count > 128;\n                if (isEncodedRun)\n                    count -= 128;\n                if (count == 0 || ptr + count > end)\n                    throw importError('bad scanline data');\n                if (isEncodedRun) {\n                    scanline_buffer.fill(buffer[pos], ptr, ptr + count);\n                    pos += 1;\n                }\n                else {\n                    scanline_buffer.set(buffer.subarray(pos, pos + count), ptr);\n                    pos += count;\n                }\n            }\n            for (let i = 0; i < width; i++)\n                for (let j = 0; j < end; j += width)\n                    rawData[offset++] = scanline_buffer[i + j];\n        }\n    }\n    // #endregion\n    // #region Convert to Float16\n    const data = new Uint16Array(rawData.length);\n    const float16One = (0,_data_conversion__WEBPACK_IMPORTED_MODULE_0__/* .toFloat16Bytes */ .Q)(1);\n    for (let i = 0; i < width * height * 4; i += 4) {\n        const raw_e = rawData[i + 3];\n        const scale = Math.pow(2.0, raw_e - 128.0) / 255.0;\n        for (let j = 0; j < 3; j += 1) {\n            data[i + j] = (0,_data_conversion__WEBPACK_IMPORTED_MODULE_0__/* .toFloat16Bytes */ .Q)(Math.min(rawData[i + j] * scale, 65504));\n        }\n        data[i + 3] = float16One;\n    }\n    // #endregion\n    return { data, width, height, gamma, exposure };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2253\n")},7335:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fF: () => (/* binding */ generateMips),\n/* harmony export */   l3: () => (/* binding */ equirectangularToCubemap),\n/* harmony export */   sP: () => (/* binding */ srgbTextureToLinear)\n/* harmony export */ });\n/* harmony import */ var _shaders_blit_vert_shader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7959);\n/* harmony import */ var _shaders_cubemap_sampling_shader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(423);\n/* harmony import */ var _data_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6182);\n/* harmony import */ var _general__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(80);\n\n\n\n\nasync function equirectangularToCubemap(device, { data, width, height, gamma = 1, exposure = 1 }, outputDescriptor) {\n    const code = /* wgsl */ `\n        override EXPOSURE: f32 = 1.0;\n        override GAMMA: f32 = 1.0;\n        override FLIP_Y: bool = false;\n\n        @group(0) @binding(0) var equirectangularMap: texture_2d<f32>;\n        @group(0) @binding(1) var mapSampler: sampler;\n        @group(0) @binding(2) var<uniform> face: u32;\n\n        fn sampleSphericalMap(v: vec3f) -> vec2f {\n            const invAtan = vec2(0.1591, 0.3183);\n\n            var uv = vec2(atan2(v.z, v.x), asin(v.y));\n            uv *= invAtan;\n            uv += 0.5;\n            return uv;\n        }\n \n        ${_shaders_blit_vert_shader__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .A}\n        ${_shaders_cubemap_sampling_shader__WEBPACK_IMPORTED_MODULE_2__/* .toWorldDir */ .V}\n\n        @fragment\n        fn fs(@location(0) uv: vec2f) -> @location(0) vec4f {\n            var dir = toWorldDirF32(uv, face);\n            dir = vec3(dir.z, dir.y, -dir.x);\n            var coord = sampleSphericalMap(dir);\n            if (FLIP_Y) { coord.y = 1 - coord.y; }\n\n            var color = textureSample(equirectangularMap, mapSampler, coord).rgb;\n            if (GAMMA != 1.0) { color = pow(color, vec3(1.0 / GAMMA)); }\n            if (EXPOSURE != 1.0) { color /= EXPOSURE; }\n            return vec4(color, 1.0);\n        }\n    `;\n    let FLIP_Y = 0;\n    let equirectangular;\n    if (data instanceof GPUTexture) {\n        equirectangular = data;\n    }\n    else {\n        FLIP_Y = 1;\n        equirectangular = device.createTexture({\n            label: `${outputDescriptor.label} equirectangular`,\n            dimension: '2d',\n            format: 'rgba16float',\n            size: { width, height },\n            usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n        });\n        device.queue.writeTexture({ texture: equirectangular, mipLevel: 0 }, data, { bytesPerRow: width * 2 * 4 }, { width, height, depthOrArrayLayers: 1 });\n        await device.queue.onSubmittedWorkDone();\n    }\n    const faceSize = equirectangular.height >> 1;\n    const cubemapDescriptor = outputDescriptor;\n    cubemapDescriptor.mipLevelCount ??= Math.log2(faceSize) | 0;\n    cubemapDescriptor.size = { width: faceSize, height: faceSize, depthOrArrayLayers: 6 };\n    cubemapDescriptor.dimension = '2d';\n    cubemapDescriptor.usage |= GPUTextureUsage.RENDER_ATTACHMENT;\n    const cubemap = device.createTexture(cubemapDescriptor);\n    const label = (0,_general__WEBPACK_IMPORTED_MODULE_3__/* .padTemplate */ .OY) `hdr copy${outputDescriptor.label}`;\n    const bindgroupLayout = device.createBindGroupLayout({\n        label,\n        entries: [\n            {\n                binding: 0,\n                texture: {},\n                visibility: GPUShaderStage.FRAGMENT,\n            },\n            {\n                binding: 1,\n                sampler: {},\n                visibility: GPUShaderStage.FRAGMENT,\n            },\n            {\n                binding: 2,\n                buffer: {},\n                visibility: GPUShaderStage.FRAGMENT,\n            },\n        ],\n    });\n    const module = device.createShaderModule({ label, code });\n    const sampler = device.createSampler({ label, minFilter: 'linear', magFilter: 'linear' });\n    const params = new Uint32Array(1);\n    const paramBuffer = (0,_data_copy__WEBPACK_IMPORTED_MODULE_0__/* .createAndCopyBuffer */ .Lr)(params, GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM, device, label);\n    const bindgroup = device.createBindGroup({\n        label,\n        layout: bindgroupLayout,\n        entries: [\n            { binding: 0, resource: equirectangular.createView() },\n            { binding: 1, resource: sampler },\n            { binding: 2, resource: { buffer: paramBuffer } },\n        ],\n    });\n    const pipelineLayout = device.createPipelineLayout({\n        label,\n        bindGroupLayouts: [bindgroupLayout],\n    });\n    const pipeline = device.createRenderPipeline({\n        label,\n        layout: pipelineLayout,\n        vertex: { module },\n        fragment: {\n            module,\n            targets: [{ format: cubemap.format }],\n            constants: {\n                GAMMA: gamma,\n                EXPOSURE: exposure,\n                FLIP_Y,\n            },\n        },\n    });\n    for (let i = 0; i < 6; i += 1) {\n        params[0] = i;\n        device.queue.writeBuffer(paramBuffer, 0, params, 0, 1);\n        const view = cubemap.createView({\n            dimension: '2d',\n            arrayLayerCount: 1,\n            baseArrayLayer: i,\n            mipLevelCount: 1,\n        });\n        const encoder = device.createCommandEncoder();\n        const pass = encoder.beginRenderPass({\n            label,\n            colorAttachments: [{\n                    view,\n                    loadOp: 'clear',\n                    storeOp: 'store',\n                }],\n        });\n        pass.setPipeline(pipeline);\n        pass.setBindGroup(0, bindgroup);\n        pass.draw(3);\n        pass.end();\n        device.queue.submit([encoder.finish()]);\n    }\n    return cubemap;\n}\nasync function generateMips(device, texture) {\n    const code = /* wgsl */ `\n        @group(0) @binding(0) var image: texture_2d<f32>;\n        @group(0) @binding(1) var mipSampler: sampler;\n\n        ${_shaders_blit_vert_shader__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .A}\n\n        @fragment\n        fn fs(@location(0) uv: vec2f) -> @location(0) vec4f {\n            return textureSample(image, mipSampler, uv);\n        }\n    `;\n    const label = (0,_general__WEBPACK_IMPORTED_MODULE_3__/* .padTemplate */ .OY) `mip generation${texture.label}`;\n    const bindgroupLayout = device.createBindGroupLayout({\n        label,\n        entries: [\n            {\n                binding: 0,\n                texture: { viewDimension: '2d', sampleType: 'float' },\n                visibility: GPUShaderStage.FRAGMENT,\n            },\n            {\n                binding: 1,\n                sampler: {},\n                visibility: GPUShaderStage.FRAGMENT,\n            },\n        ],\n    });\n    const colorAttachment = {\n        view: undefined,\n        loadOp: 'clear',\n        storeOp: 'store',\n    };\n    const sampler = device.createSampler({\n        minFilter: 'linear',\n        magFilter: 'linear',\n    });\n    const module = device.createShaderModule({ label, code });\n    const pipelineLayout = device.createPipelineLayout({ label, bindGroupLayouts: [bindgroupLayout] });\n    const pipeline = device.createRenderPipeline({\n        label,\n        layout: pipelineLayout,\n        vertex: {\n            entryPoint: 'vs',\n            module,\n        },\n        fragment: {\n            entryPoint: 'fs',\n            targets: [{ format: texture.format }],\n            module,\n        },\n    });\n    colorAttachment.view = texture.createView({ mipLevelCount: 1, baseMipLevel: 0 });\n    await device.queue.onSubmittedWorkDone();\n    for (let i = 1; i < texture.mipLevelCount; i += 1) {\n        const bindgroup = device.createBindGroup({\n            label,\n            layout: bindgroupLayout,\n            entries: [\n                {\n                    binding: 0,\n                    resource: colorAttachment.view,\n                },\n                {\n                    binding: 1,\n                    resource: sampler,\n                },\n            ],\n        });\n        colorAttachment.view = texture.createView({ mipLevelCount: 1, baseMipLevel: i });\n        const encoder = device.createCommandEncoder();\n        const pass = encoder.beginRenderPass({\n            label,\n            colorAttachments: [colorAttachment],\n        });\n        pass.setPipeline(pipeline);\n        pass.setBindGroup(0, bindgroup);\n        pass.draw(3);\n        pass.end();\n        device.queue.submit([encoder.finish()]);\n        await device.queue.onSubmittedWorkDone();\n    }\n}\nfunction srgbTextureToLinear(device, texture) {\n    const code = /* wgsl */ `\n        @group(0) @binding(0) var image: texture_2d<f32>;\n        @group(0) @binding(1) var imageSampler: sampler;\n\n        ${_shaders_blit_vert_shader__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .A}\n\n        fn sRGBToLinear(color: vec3f) -> vec3f {\n            return select( \n                pow(color * 0.9478672986 + 0.0521327014, vec3(2.4)), \n                color * 0.0773993808, \n                color <= vec3(0.04045), \n            );\n        }  \n\n        @fragment\n        fn fs(@location(0) uv: vec2f) -> @location(0) vec4f  {\n            let sample = textureSample(image, imageSampler, uv);\n            let color = sRGBToLinear(sample.rgb);\n            return vec4(color, sample.a);\n        }\n    `;\n    const label = (0,_general__WEBPACK_IMPORTED_MODULE_3__/* .padTemplate */ .OY) `srgb to linear${texture.label}`;\n    const size = { width: texture.width, height: texture.height };\n    const tempTexture = device.createTexture({\n        format: texture.format,\n        usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n        size,\n    });\n    const bindgroupLayout = device.createBindGroupLayout({\n        label,\n        entries: [\n            {\n                binding: 0,\n                texture: {},\n                visibility: GPUShaderStage.FRAGMENT,\n            },\n            {\n                binding: 1,\n                sampler: {},\n                visibility: GPUShaderStage.FRAGMENT,\n            },\n        ],\n    });\n    const sampler = device.createSampler({\n        minFilter: 'linear',\n        magFilter: 'linear',\n    });\n    const module = device.createShaderModule({ label, code: code });\n    const pipelineLayout = device.createPipelineLayout({ label, bindGroupLayouts: [bindgroupLayout] });\n    const pipeline = device.createRenderPipeline({\n        label,\n        layout: pipelineLayout,\n        vertex: {\n            entryPoint: 'vs',\n            module,\n        },\n        fragment: {\n            entryPoint: 'fs',\n            targets: [{ format: texture.format }],\n            module,\n        },\n    });\n    const bindgroup = device.createBindGroup({\n        label,\n        layout: bindgroupLayout,\n        entries: [\n            {\n                binding: 0,\n                resource: tempTexture.createView(),\n            },\n            {\n                binding: 1,\n                resource: sampler,\n            },\n        ],\n    });\n    const encoder = device.createCommandEncoder();\n    encoder.copyTextureToTexture({ texture }, { texture: tempTexture }, size);\n    const pass = encoder.beginRenderPass({\n        label,\n        colorAttachments: [{\n                view: texture.createView({ mipLevelCount: 1, baseMipLevel: 0 }),\n                loadOp: 'clear',\n                storeOp: 'store',\n            }],\n    });\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindgroup);\n    pass.draw(3);\n    pass.end();\n    device.queue.submit([encoder.finish()]);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7335\n")}}]);