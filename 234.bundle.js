"use strict";(self.webpackChunkcbunt_portfolio=self.webpackChunkcbunt_portfolio||[]).push([[234],{5234:(module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var native_file_system_adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8777);\n/* harmony import */ var _settings_skybox_options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5427);\n/* harmony import */ var _settings_property_listener__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9528);\n/* harmony import */ var _utils_data_copy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5752);\n/* harmony import */ var _cubemap_guassian_pyramid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(3156);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_settings_skybox_options__WEBPACK_IMPORTED_MODULE_1__]);\n_settings_skybox_options__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CubemapBlurModel_settings;\n\n\n\n\n\nvar BlurState;\n(function (BlurState) {\n    BlurState[BlurState[\"IDLE\"] = 0] = \"IDLE\";\n    BlurState[BlurState[\"BLUR\"] = 1] = \"BLUR\";\n    BlurState[BlurState[\"WAIT\"] = 2] = \"WAIT\";\n})(BlurState || (BlurState = {}));\nclass CubemapBlurModel {\n    constructor(renderer) {\n        this.renderer = renderer;\n        this.state = BlurState.IDLE;\n        _CubemapBlurModel_settings.set(this, (0,_settings_property_listener__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .A)({\n            nearestSample: {\n                [_settings_property_listener__WEBPACK_IMPORTED_MODULE_2__/* .ListenerSyms */ .t.$type]: 'checkbox',\n                [_settings_property_listener__WEBPACK_IMPORTED_MODULE_2__/* .ListenerSyms */ .t.$callback]: (val) => {\n                    if (typeof val === 'boolean')\n                        this.renderer.skyboxPass.useNearestSample = val;\n                },\n                value: false,\n                description: 'Disables linear sampling in the viewer.',\n            },\n            mipLevel: {\n                [_settings_property_listener__WEBPACK_IMPORTED_MODULE_2__/* .ListenerSyms */ .t.$type]: 'slider',\n                [_settings_property_listener__WEBPACK_IMPORTED_MODULE_2__/* .ListenerSyms */ .t.$callback]: (value) => {\n                    if (typeof value === 'number')\n                        this.renderer.skyboxPass.mipLevel = value;\n                },\n                value: 0,\n                min: 0,\n                max: 1,\n                step: 0.1,\n                description: 'The mip level to display in the viewer. 0 is the original image, max is completely blurred with 1 pixel faces.',\n            },\n            filterDistance: {\n                [_settings_property_listener__WEBPACK_IMPORTED_MODULE_2__/* .ListenerSyms */ .t.$type]: 'slider',\n                [_settings_property_listener__WEBPACK_IMPORTED_MODULE_2__/* .ListenerSyms */ .t.$callback]: this.reblur.bind(this),\n                value: 2,\n                max: 64,\n                min: 0,\n                step: 0.1,\n                description: 'The number of pixels to blur from.',\n            },\n            skybox: (0,_settings_skybox_options__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .A)(this),\n            'Download Result': {\n                [_settings_property_listener__WEBPACK_IMPORTED_MODULE_2__/* .ListenerSyms */ .t.$type]: 'button',\n                onClick: () => { void this.saveFile(); },\n            },\n        }));\n        this.settings = __classPrivateFieldGet(this, _CubemapBlurModel_settings, \"f\").publicSettings;\n        this.priority = 0;\n        renderer.addForwardPass(this);\n        this.device = renderer.device;\n    }\n    setSkybox(skybox) {\n        this.skybox = skybox;\n        __classPrivateFieldGet(this, _CubemapBlurModel_settings, \"f\").privateSettings.mipLevel.max = this.skybox.mipLevelCount - 1;\n        __classPrivateFieldGet(this, _CubemapBlurModel_settings, \"f\").privateSettings.mipLevel.value = 1;\n        this.renderer.skyboxPass.mipLevel = 1;\n        this.refresh();\n        void this.reblur();\n    }\n    resolve() {\n        this.refresh();\n        const lastState = this.state;\n        this.state = BlurState.IDLE;\n        if (lastState === BlurState.WAIT)\n            void this.reblur();\n    }\n    async reblur() {\n        if (this.skybox == null || this.state === BlurState.WAIT)\n            return;\n        if (this.state === BlurState.BLUR) {\n            this.state = BlurState.WAIT;\n            return;\n        }\n        this.state = BlurState.BLUR;\n        await (0,_cubemap_guassian_pyramid__WEBPACK_IMPORTED_MODULE_4__/* [\"default\"] */ .A)({\n            device: this.renderer.device,\n            texture: this.skybox,\n            steps: this.settings.filterDistance.value,\n            inPlace: true,\n            delayWork: requestAnimationFrame,\n        });\n        this.resolve();\n    }\n    refresh() {\n        if (this.skybox == null)\n            return;\n        this.renderer.skyboxPass.skyTexture = this.skybox.createView({ dimension: 'cube' });\n    }\n    async saveFile() {\n        if (this.skybox == null)\n            return;\n        try {\n            const proms = Promise.all([\n                (0,_utils_data_copy__WEBPACK_IMPORTED_MODULE_3__/* .textureToKTX */ .gU)(this.renderer.device, this.skybox, true)\n                    .then((ktx2) => new Blob([ktx2], { type: 'image/ktx2' })),\n                (0,native_file_system_adapter__WEBPACK_IMPORTED_MODULE_0__/* .showSaveFilePicker */ .H1)({\n                    types: [{ accept: { 'image/ktx2': ['.ktx2'] } }],\n                    suggestedName: 'blurred-skybox.ktx2',\n                }).then((handle) => handle.createWritable({ keepExistingData: false })),\n            ]);\n            const [blob, stream] = await proms;\n            await blob.stream().pipeTo(stream);\n        }\n        catch (e) {\n            console.warn(e);\n        }\n    }\n    render({ encoder, gbuffer }) {\n        encoder.beginRenderPass({\n            colorAttachments: [],\n            depthStencilAttachment: {\n                depthClearValue: 1,\n                depthLoadOp: 'clear',\n                depthStoreOp: 'store',\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                view: gbuffer.depth.view,\n            },\n        }).end();\n    }\n}\n_CubemapBlurModel_settings = new WeakMap();\nCubemapBlurModel.title = '';\nCubemapBlurModel.description = '';\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CubemapBlurModel);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5234\n")},3156:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ cubemapGuassianPyramid)\n/* harmony export */ });\n/* harmony import */ var _shaders_cubemap_sampling_shader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6097);\n/* harmony import */ var _utils_data_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5752);\n/* harmony import */ var _utils_general__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4742);\n/* eslint @stylistic/max-len: \"error\" */\n\n\n\nconst createMipBlurCode = (groups, format) => /* wgsl */ `\r\n    ${_shaders_cubemap_sampling_shader__WEBPACK_IMPORTED_MODULE_1__/* .cubemapSampleConversions */ .X}\r\n    ${_shaders_cubemap_sampling_shader__WEBPACK_IMPORTED_MODULE_1__/* .toWorldDir */ .V}\r\n\r\n    override STEPS: i32 = 4;\r\n\r\n    struct Params {\r\n        offset: u32,\r\n        sigmas: array<f32>,\r\n    }\r\n\r\n    @group(0) @binding(0) var previousMip: texture_2d_array<f32>;\r\n\r\n    @group(0) @binding(1) \r\n    var outputTexture: texture_storage_2d_array<${format}, write>;\r\n\r\n    // sigma[0] reserved for work offset\r\n    @group(0) @binding(2) var<storage> params: Params;\r\n    \r\n    @compute @workgroup_size(${groups}, 1, 1)\r\n    fn main(@builtin(global_invocation_id) gid: vec3u) {\r\n        let mipSize = textureDimensions(outputTexture).x;\r\n\r\n        let idx = gid.x + params.offset;\r\n        let faceSize = mipSize * mipSize;\r\n        let faceIdx = idx % faceSize;\r\n        let coord = vec3u(\r\n            faceIdx % mipSize, \r\n            faceIdx / mipSize, \r\n            idx / faceSize,\r\n        ); \r\n\r\n        if (coord.x >= mipSize || coord.y >= mipSize || coord.z >= 6) { \r\n            return; \r\n        }\r\n\r\n        let previousSize = textureDimensions(previousMip).x;\r\n        let baseCoord = vec3i(vec3u(coord.x * 2, coord.y * 2, coord.z));\r\n        let pos = toWorldDir(vec3u(coord), mipSize);\r\n\r\n        let size = arrayLength(&params.sigmas);\r\n        let level = size - u32(ceil(log2(f32(previousSize))));\r\n        let sigma = params.sigmas[level];\r\n        let guassian_factor = -0.5 / (sigma * sigma);\r\n\r\n        var weight = 0.0;\r\n        var res = vec3(0.0);\r\n\r\n        for (var u = -STEPS; u <= STEPS + 1; u += 1) {\r\n            for (var v = -STEPS; v <= STEPS + 1; v += 1) {\r\n                let offsetCoord = baseCoord + vec3i(u, v, 0);\r\n                let sample = cubeSampleCoord(offsetCoord, previousSize);\r\n                if (sample.z == INVALID_FACE) { continue; }\r\n\r\n                let samplePos = toWorldDir(sample, previousSize);\r\n                let x = max(0.0, acos(dot(samplePos, pos)));\r\n                let w = exp(x * x * guassian_factor);\r\n                let color = textureLoad(previousMip, sample.xy, sample.z, 0);\r\n\r\n                res += color.rgb * w;\r\n                weight += w;\r\n            }\r\n        }\r\n\r\n        textureStore(outputTexture, coord.xy, coord.z, vec4(res / weight, 1));\r\n    }\r\n`;\n/**\n *  the minimum angular distance between any pixel on a cubemap\n *  of the given face width and any pixel lying on a perimeter\n *  the given number of steps away\n */\nfunction minStepDistance(steps, width) {\n    // the angular distance\n    // from the uvf: face = 0, u = 0, and v = width - Math.floor(steps / 2) - 1\n    // to the uvf: face = 3, u = 2 * width - baseV - steps - 2, and v = 0 or 1\n    // It's likely possible to programmatically determine whether the\n    // destination pixel should be v = 0 or v = 1, but checking both works fine\n    const nextMipWidth = width >> 1;\n    const baseV = nextMipWidth - Math.floor(steps / 4) - 1;\n    const baseVN = (2 / nextMipWidth) * (baseV + 0.5) - 1;\n    const baseUN = (1 / nextMipWidth) - 1;\n    const baseMag2 = 1 + baseVN * baseVN + baseUN * baseUN;\n    const sampU = 2 * width - (baseV * 2) - steps - 2;\n    const sampUN = (2 / width) * (sampU + 0.5) - 1;\n    const samp0VN = (1 / width) - 1;\n    const samp0Mag2 = 1 + sampUN * sampUN + samp0VN * samp0VN;\n    const samp1VN = (3 / width) - 1;\n    const samp1Mag2 = 1 + sampUN * sampUN + samp1VN * samp1VN;\n    const dot0 = (sampUN + baseVN + samp0VN * baseUN)\n        / Math.sqrt(samp0Mag2 * baseMag2);\n    const dot1 = (sampUN + baseVN + samp1VN * baseUN)\n        / Math.sqrt(samp1Mag2 * baseMag2);\n    return Math.min(1 - dot0, 1 - dot1);\n}\nasync function cubemapGuassianPyramid({ device, texture, outputTextureLabel, inPlace = false, minWidth = 8, steps = 4, maxOpsPerPass = 6 * ((17 * 256) ** 2), label = cubemapGuassianPyramid.name, delayWork, }) {\n    const { width, format } = texture;\n    const mipLevelCount = inPlace\n        ? texture.mipLevelCount\n        : (Math.log2(width) - Math.log2(minWidth) + 1);\n    if (mipLevelCount <= 1)\n        return texture;\n    const groups = Math.min(device.limits.maxComputeWorkgroupSizeX, device.limits.maxComputeInvocationsPerWorkgroup);\n    const shader = device.createShaderModule({\n        label,\n        code: createMipBlurCode(groups, format),\n    });\n    const bindgroupLayout = device.createBindGroupLayout({\n        label,\n        entries: [\n            {\n                binding: 0,\n                texture: { viewDimension: '2d-array' },\n                visibility: GPUShaderStage.COMPUTE,\n            },\n            {\n                binding: 1,\n                storageTexture: {\n                    access: 'write-only',\n                    viewDimension: '2d-array',\n                    format,\n                },\n                visibility: GPUShaderStage.COMPUTE,\n            },\n            {\n                binding: 2,\n                buffer: { type: 'read-only-storage' },\n                visibility: GPUShaderStage.COMPUTE,\n            },\n        ],\n    });\n    const pipeline = device.createComputePipeline({\n        label,\n        layout: device.createPipelineLayout({\n            label,\n            bindGroupLayouts: [bindgroupLayout],\n        }),\n        compute: {\n            module: shader,\n            entryPoint: 'main',\n            constants: { STEPS: Math.ceil(steps) },\n        },\n    });\n    let gaussianPyramid = texture;\n    if (!inPlace) {\n        const size = { width, height: width, depthOrArrayLayers: 6 };\n        gaussianPyramid = device.createTexture({\n            label: outputTextureLabel,\n            usage: GPUTextureUsage.STORAGE_BINDING\n                | GPUTextureUsage.TEXTURE_BINDING\n                | GPUTextureUsage.COPY_SRC\n                | GPUTextureUsage.COPY_DST,\n            dimension: '2d',\n            format,\n            mipLevelCount,\n            size,\n        });\n        const copyEncoder = device.createCommandEncoder({\n            label: `${label} copy encoder`,\n        });\n        copyEncoder.copyTextureToTexture({ texture, mipLevel: 0 }, { texture: gaussianPyramid, mipLevel: 0 }, size);\n        device.queue.submit([copyEncoder.finish()]);\n        await device.queue.onSubmittedWorkDone();\n    }\n    const mipViews = (0,_utils_general__WEBPACK_IMPORTED_MODULE_2__/* .mapRange */ ._b)(mipLevelCount, (i) => gaussianPyramid.createView({\n        label: `${label} mip view ${i}`,\n        dimension: '2d-array',\n        baseMipLevel: i,\n        mipLevelCount: 1,\n    }));\n    const maxWorkgroups = device.limits.maxComputeWorkgroupsPerDimension;\n    const maxLayers = Math.ceil(Math.log2(width));\n    const maxDispatches = Math.max((maxOpsPerPass / (((1 + (steps * 2)) ** 2) * groups)) | 0, 1);\n    const propertyArray = new ArrayBuffer((maxLayers + 1) * 4);\n    const offset = new Uint32Array(propertyArray, 0, 1);\n    const simgas = new Float32Array(propertyArray, 4, maxLayers);\n    simgas.set((0,_utils_general__WEBPACK_IMPORTED_MODULE_2__/* .mapRange */ ._b)(maxLayers, (i) => {\n        const w = width >> i;\n        return Math.acos(1 - minStepDistance(Math.min(w, steps), w)) / 3;\n    }));\n    const propertyBuffer = (0,_utils_data_copy__WEBPACK_IMPORTED_MODULE_0__/* .createAndCopyBuffer */ .Lr)(propertyArray, GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST, device);\n    await new Promise((resolve) => {\n        let mipLevel = 0;\n        let mipPasses = 0;\n        let requiredMipDispatches = 0;\n        let currentMipDispatches = 0;\n        let batchDispatches = 0;\n        let bindgroup;\n        async function runPass() {\n            if (currentMipDispatches >= requiredMipDispatches) {\n                mipLevel += 1;\n                currentMipDispatches = 0;\n                mipPasses = 0;\n                if (mipLevel >= mipLevelCount) {\n                    resolve();\n                    return;\n                }\n                const mipPixels = 6 * ((width >> mipLevel) ** 2);\n                requiredMipDispatches = Math.ceil(mipPixels / groups);\n                bindgroup = device.createBindGroup({\n                    layout: bindgroupLayout,\n                    entries: [\n                        {\n                            binding: 0,\n                            resource: mipViews[mipLevel - 1],\n                        },\n                        {\n                            binding: 1,\n                            resource: mipViews[mipLevel],\n                        },\n                        {\n                            binding: 2,\n                            resource: { buffer: propertyBuffer },\n                        },\n                    ],\n                });\n            }\n            offset[0] = currentMipDispatches * groups;\n            device.queue.writeBuffer(propertyBuffer, 0, offset);\n            const passDispatches = Math.min(requiredMipDispatches - currentMipDispatches, maxDispatches - batchDispatches, maxWorkgroups);\n            const passLabel = `${label} mip ${mipLevel}, pass ${mipPasses}`;\n            const encoder = device.createCommandEncoder({ label: passLabel });\n            const pass = encoder.beginComputePass({ label: passLabel });\n            pass.setPipeline(pipeline);\n            pass.setBindGroup(0, bindgroup);\n            pass.dispatchWorkgroups(passDispatches, 1, 1);\n            pass.end();\n            device.queue.submit([encoder.finish()]);\n            currentMipDispatches += passDispatches;\n            batchDispatches += passDispatches;\n            mipPasses += 1;\n            if (delayWork != null && batchDispatches >= maxDispatches) {\n                batchDispatches = 0;\n                await device.queue.onSubmittedWorkDone();\n                delayWork(runPass);\n            }\n            else {\n                void runPass();\n            }\n        }\n        void runPass();\n    });\n    return gaussianPyramid;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3156\n")},5427:(module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ getSkyboxOptions)\n/* harmony export */ });\n/* unused harmony export hdrs */\n/* harmony import */ var _utils_texture_importing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8862);\n/* harmony import */ var _utils_texture_processing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9629);\n/* harmony import */ var _property_listener__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9528);\n\n\n\nconst hdrPromises = await fetch(\"https://api.github.com/repos/KhronosGroup/glTF-Sample-Environments/contents?ref=low_resolution_hdrs\", { headers: { 'Content-Type': 'application/vnd.github.object+json' } })\n    .then((res) => res.json());\nconst hdrs = Object.fromEntries(hdrPromises.flatMap(({ name, download_url }) => typeof name === 'string' && typeof download_url === 'string' && download_url.endsWith('.hdr') ? [[name, download_url]] : []));\nasync function processSkybox(device, file) {\n    let buffer;\n    if (file instanceof ArrayBuffer) {\n        buffer = file;\n    }\n    else if (file instanceof File) {\n        buffer = await file.arrayBuffer();\n    }\n    else {\n        const res = await fetch(file);\n        buffer = await res.arrayBuffer();\n    }\n    const hdr = (0,_utils_texture_importing__WEBPACK_IMPORTED_MODULE_0__/* .parseHDR */ .y)(buffer);\n    return (0,_utils_texture_processing__WEBPACK_IMPORTED_MODULE_1__/* .equirectangularToCubemap */ .l3)(device, hdr, {\n        format: 'rgba16float',\n        usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.COPY_SRC,\n    });\n}\nfunction getSkyboxOptions(target) {\n    return {\n        [_property_listener__WEBPACK_IMPORTED_MODULE_2__/* .ListenerSyms */ .t.$type]: 'file',\n        [_property_listener__WEBPACK_IMPORTED_MODULE_2__/* .ListenerSyms */ .t.$callback]: async (val, key) => {\n            if (key !== 'value' || val == null)\n                return;\n            if (typeof val === 'string' || val instanceof File) {\n                const texture = await processSkybox(target.device, val);\n                const res = target.setSkybox(texture);\n                if (res instanceof Promise)\n                    await res;\n            }\n        },\n        accept: '.hdr',\n        selection: {\n            value: Object.keys(hdrs)[0],\n            initialValues: hdrs,\n        },\n        process: (file) => file,\n    };\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQyNy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUF5RDtBQUNpQjtBQUN2QjtBQUVuRCxNQUFNLFdBQVcsR0FBRyxNQUFNLEtBQUssQ0FBQyxxR0FBYyxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsY0FBYyxFQUFFLG9DQUFvQyxFQUFFLEVBQUUsQ0FBQztLQUNqSCxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBOEIsQ0FBQztBQUVyRCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLENBQUMsT0FBTyxJQUFJLEtBQUssUUFBUSxJQUFJLE9BQU8sWUFBWSxLQUFLLFFBQVEsSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFFck4sS0FBSyxVQUFVLGFBQWEsQ0FBQyxNQUFpQixFQUFFLElBQXVDO0lBQ25GLElBQUksTUFBbUIsQ0FBQztJQUN4QixJQUFJLElBQUksWUFBWSxXQUFXLEVBQUUsQ0FBQztRQUM5QixNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ2xCLENBQUM7U0FBTSxJQUFJLElBQUksWUFBWSxJQUFJLEVBQUUsQ0FBQztRQUM5QixNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdEMsQ0FBQztTQUFNLENBQUM7UUFDSixNQUFNLEdBQUcsR0FBRyxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QixNQUFNLEdBQUcsTUFBTSxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckMsQ0FBQztJQUVELE1BQU0sR0FBRyxHQUFHLDJFQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFN0IsT0FBTyw2RkFBd0IsQ0FDM0IsTUFBTSxFQUNOLEdBQUcsRUFDSDtRQUNJLE1BQU0sRUFBRSxhQUFhO1FBQ3JCLEtBQUssRUFBRSxlQUFlLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDLFFBQVE7S0FDdEcsQ0FDSixDQUFDO0FBQ04sQ0FBQztBQUljLFNBQVMsZ0JBQWdCLENBQUMsTUFBb0I7SUFDekQsT0FBTztRQUNILENBQUMscUVBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxNQUFlO1FBQ3JDLENBQUMscUVBQVksQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBWSxFQUFFLEdBQWdCLEVBQUUsRUFBRTtZQUMvRCxJQUFJLEdBQUcsS0FBSyxPQUFPLElBQUksR0FBRyxJQUFJLElBQUk7Z0JBQUUsT0FBTztZQUMzQyxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsSUFBSSxHQUFHLFlBQVksSUFBSSxFQUFFLENBQUM7Z0JBQ2pELE1BQU0sT0FBTyxHQUFHLE1BQU0sYUFBYSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQ3hELE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ3RDLElBQUksR0FBRyxZQUFZLE9BQU87b0JBQUUsTUFBTSxHQUFHLENBQUM7WUFDMUMsQ0FBQztRQUNMLENBQUM7UUFDRCxNQUFNLEVBQUUsTUFBTTtRQUNkLFNBQVMsRUFBRTtZQUNQLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzQixhQUFhLEVBQUUsSUFBSTtTQUN0QjtRQUNELE9BQU8sRUFBRSxDQUFDLElBQVUsRUFBRSxFQUFFLENBQUMsSUFBSTtLQUNoQyxDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NidW50LXBvcnRmb2xpby8uL3NyYy9zYW1wbGVzL3NldHRpbmdzL3NreWJveC1vcHRpb25zLnRzP2UxMDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VIRFIgfSBmcm9tICcuLi8uLi91dGlscy90ZXh0dXJlLWltcG9ydGluZyc7XG5pbXBvcnQgeyBlcXVpcmVjdGFuZ3VsYXJUb0N1YmVtYXAgfSBmcm9tICcuLi8uLi91dGlscy90ZXh0dXJlLXByb2Nlc3NpbmcnO1xuaW1wb3J0IHsgTGlzdGVuZXJTeW1zIH0gZnJvbSAnLi9wcm9wZXJ0eS1saXN0ZW5lcic7XG5cbmNvbnN0IGhkclByb21pc2VzID0gYXdhaXQgZmV0Y2goSERSX0JBU0VfVVJMX18sIHsgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3ZuZC5naXRodWIub2JqZWN0K2pzb24nIH0gfSlcbiAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKSBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPltdO1xuXG5leHBvcnQgY29uc3QgaGRycyA9IE9iamVjdC5mcm9tRW50cmllcyhoZHJQcm9taXNlcy5mbGF0TWFwKCh7IG5hbWUsIGRvd25sb2FkX3VybCB9KSA9PiB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIGRvd25sb2FkX3VybCA9PT0gJ3N0cmluZycgJiYgZG93bmxvYWRfdXJsLmVuZHNXaXRoKCcuaGRyJykgPyBbW25hbWUsIGRvd25sb2FkX3VybF1dIDogW10pKTtcblxuYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc1NreWJveChkZXZpY2U6IEdQVURldmljZSwgZmlsZTogc3RyaW5nIHwgVVJMIHwgRmlsZSB8IEFycmF5QnVmZmVyKSB7XG4gICAgbGV0IGJ1ZmZlcjogQXJyYXlCdWZmZXI7XG4gICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgICBidWZmZXIgPSBmaWxlO1xuICAgIH0gZWxzZSBpZiAoZmlsZSBpbnN0YW5jZW9mIEZpbGUpIHtcbiAgICAgICAgYnVmZmVyID0gYXdhaXQgZmlsZS5hcnJheUJ1ZmZlcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGZpbGUpO1xuICAgICAgICBidWZmZXIgPSBhd2FpdCByZXMuYXJyYXlCdWZmZXIoKTtcbiAgICB9XG5cbiAgICBjb25zdCBoZHIgPSBwYXJzZUhEUihidWZmZXIpO1xuXG4gICAgcmV0dXJuIGVxdWlyZWN0YW5ndWxhclRvQ3ViZW1hcChcbiAgICAgICAgZGV2aWNlLFxuICAgICAgICBoZHIsXG4gICAgICAgIHtcbiAgICAgICAgICAgIGZvcm1hdDogJ3JnYmExNmZsb2F0JyxcbiAgICAgICAgICAgIHVzYWdlOiBHUFVUZXh0dXJlVXNhZ2UuVEVYVFVSRV9CSU5ESU5HIHwgR1BVVGV4dHVyZVVzYWdlLlNUT1JBR0VfQklORElORyB8IEdQVVRleHR1cmVVc2FnZS5DT1BZX1NSQyxcbiAgICAgICAgfSxcbiAgICApO1xufVxuXG5leHBvcnQgdHlwZSBTa3lib3hUYXJnZXQgPSB7IGRldmljZTogR1BVRGV2aWNlLCBzZXRTa3lib3g6IChyZXNvdXJjZTogR1BVVGV4dHVyZSkgPT4gdW5rbm93biB9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTa3lib3hPcHRpb25zKHRhcmdldDogU2t5Ym94VGFyZ2V0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgW0xpc3RlbmVyU3ltcy4kdHlwZV06ICdmaWxlJyBhcyBjb25zdCxcbiAgICAgICAgW0xpc3RlbmVyU3ltcy4kY2FsbGJhY2tdOiBhc3luYyAodmFsOiB1bmtub3duLCBrZXk6IFByb3BlcnR5S2V5KSA9PiB7XG4gICAgICAgICAgICBpZiAoa2V5ICE9PSAndmFsdWUnIHx8IHZhbCA9PSBudWxsKSByZXR1cm47XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgfHwgdmFsIGluc3RhbmNlb2YgRmlsZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRleHR1cmUgPSBhd2FpdCBwcm9jZXNzU2t5Ym94KHRhcmdldC5kZXZpY2UsIHZhbCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gdGFyZ2V0LnNldFNreWJveCh0ZXh0dXJlKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzIGluc3RhbmNlb2YgUHJvbWlzZSkgYXdhaXQgcmVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhY2NlcHQ6ICcuaGRyJyxcbiAgICAgICAgc2VsZWN0aW9uOiB7XG4gICAgICAgICAgICB2YWx1ZTogT2JqZWN0LmtleXMoaGRycylbMF0sXG4gICAgICAgICAgICBpbml0aWFsVmFsdWVzOiBoZHJzLFxuICAgICAgICB9LFxuICAgICAgICBwcm9jZXNzOiAoZmlsZTogRmlsZSkgPT4gZmlsZSxcbiAgICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5427\n")},157:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/* wgsl */`\r\n    struct VertOut {\r\n        @builtin(position) pos: vec4f,\r\n        @location(0) uv: vec2f,\r\n    }\r\n\r\n    @vertex\r\n    fn vs(@builtin(vertex_index) idx: u32) -> VertOut {\r\n        const pos = array(\r\n            vec2f(-1,  3),\r\n            vec2f(3, -1),\r\n            vec2f(-1, -1),\r\n        );\r\n        var res: VertOut;\r\n        res.pos = vec4f(pos[idx], 0.0, 1.0);\r\n        res.uv = pos[idx] * vec2f(0.5, -0.5) + 0.5;\r\n        return res;\r\n    }\r\n`);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU3LmpzIiwibWFwcGluZ3MiOiI7OztBQUFBLDJFQUF5Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBa0J4QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2J1bnQtcG9ydGZvbGlvLy4vc3JjL3NoYWRlcnMvYmxpdC12ZXJ0LnNoYWRlci50cz9hNTE4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IC8qIHdnc2wgKi9gXHJcbiAgICBzdHJ1Y3QgVmVydE91dCB7XHJcbiAgICAgICAgQGJ1aWx0aW4ocG9zaXRpb24pIHBvczogdmVjNGYsXHJcbiAgICAgICAgQGxvY2F0aW9uKDApIHV2OiB2ZWMyZixcclxuICAgIH1cclxuXHJcbiAgICBAdmVydGV4XHJcbiAgICBmbiB2cyhAYnVpbHRpbih2ZXJ0ZXhfaW5kZXgpIGlkeDogdTMyKSAtPiBWZXJ0T3V0IHtcclxuICAgICAgICBjb25zdCBwb3MgPSBhcnJheShcclxuICAgICAgICAgICAgdmVjMmYoLTEsICAzKSxcclxuICAgICAgICAgICAgdmVjMmYoMywgLTEpLFxyXG4gICAgICAgICAgICB2ZWMyZigtMSwgLTEpLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdmFyIHJlczogVmVydE91dDtcclxuICAgICAgICByZXMucG9zID0gdmVjNGYocG9zW2lkeF0sIDAuMCwgMS4wKTtcclxuICAgICAgICByZXMudXYgPSBwb3NbaWR4XSAqIHZlYzJmKDAuNSwgLTAuNSkgKyAwLjU7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuYDtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///157\n")},6097:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   V: () => (/* binding */ toWorldDir),\n/* harmony export */   X: () => (/* binding */ cubemapSampleConversions)\n/* harmony export */ });\nconst toWorldDir = /* wgsl */ `\n    fn toWorldDir(coord: vec3u, size: u32) -> vec3f {\n        let uv = (2.0 / f32(size)) * (vec2f(coord.xy) + 0.5) - 1.0;\n\n        var pos: vec3f;\n        switch (coord.z) {\n            case 0  { pos = vec3(  1.0, -uv.y, -uv.x); }\n            case 1  { pos = vec3( -1.0, -uv.y,  uv.x); }\n            case 2  { pos = vec3( uv.x,   1.0,  uv.y); }\n            case 3  { pos = vec3( uv.x,  -1.0, -uv.y); }\n            case 4  { pos = vec3( uv.x, -uv.y,   1.0); }\n            default { pos = vec3(-uv.x, -uv.y,  -1.0); }\n        }\n\n        return normalize(pos);\n    }\n\n    fn toWorldDirF32(coord: vec2f, face: u32) -> vec3f {\n        let uv = 2.0 * coord - 1.0;\n\n        var pos: vec3f;\n        switch (face) {\n            case 0  { pos = vec3(  1.0, -uv.y, -uv.x); }\n            case 1  { pos = vec3( -1.0, -uv.y,  uv.x); }\n            case 2  { pos = vec3( uv.x,   1.0,  uv.y); }\n            case 3  { pos = vec3( uv.x,  -1.0, -uv.y); }\n            case 4  { pos = vec3( uv.x, -uv.y,   1.0); }\n            default { pos = vec3(-uv.x, -uv.y,  -1.0); }\n        }\n\n        return normalize(pos);\n    }\n`;\n/**\n *  WGSL functions for sampling across adjacent faces of a cubemap\n */\nconst cubemapSampleConversions = /* wgsl */ `\n    const INVALID_FACE = 6;\n    const INVALID_IDX = 4294967295u; // max u32\n\n    fn cubeSampleCoord(coord: vec3i, w: u32) -> vec3u {\n        // a flattened matrix of destination faces based on\n        // starting face and direction\n        const dfaces = array(\n            //                               I  Up Down Left Right Invalid\n            0, 2, 3, 4, 5, INVALID_FACE, // +X  +Y   -Y   +Z   -Z   \n            1, 2, 3, 5, 4, INVALID_FACE, // -X  +Y   -Y   -Z   +Z \n            2, 5, 4, 1, 0, INVALID_FACE, // +Y  -Z   +Z   -X   +X \n            3, 4, 5, 1, 0, INVALID_FACE, // -Y  +Z   -Z   -X   +X \n            4, 2, 3, 1, 0, INVALID_FACE, // +Z  +Y   -Y   -X   +X \n            5, 2, 3, 0, 1, INVALID_FACE, // -Z  +Y   -Y   +X   -X \n        );\n\n        // a flattened matrix in the same form as dfaces\n        // giving the index of the dmat array containing \n        // the transformation from the starting face to \n        // the destination face\n        const dindices = array(\n            0, 1,  2,  3,  4,  0,\n            0, 5,  6,  3,  4,  0,\n            0, 7,  8,  9,  10, 0,\n            0, 11, 12, 13, 14, 0,\n            0, 11, 8,  3,  4,  0,\n            0, 7,  12, 3,  4,  0,\n        );\n\n        // 2x4 matrices transforming a coordinate vector <u, v, w, 1>\n        // from one face to another\n        const dmats = array(\n            array(// 0\n                vec4(1, 0, 0, 0),   // u = u\n                vec4(0, 1, 0, 0),   // v = v\n            ),\n            array(// 1\n                vec4(0, 1, 1, 0),   // u = v + w\n                vec4(-1, 0, 1, -1), // v = w - u - 1\n            ),\n            array(// 2\n                vec4(0, -1, 2, -1), // u = 2w - v - 1\n                vec4(1, 0, 0, 0),   // v = u\n            ),\n            array(// 3\n                vec4(1, 0, 1, 0),   // u = u + w\n                vec4(0, 1, 0, 0),   // v = v\n            ),\n            array(// 4\n                vec4(1, 0, -1, 0),  // u = u - w\n                vec4(0, 1, 0, 0),   // v = v\n            ),\n            array(// 5\n                vec4(0, -1, 0, -1), // u = -v - 1\n                vec4(1, 0, 0, 0),   // v = u\n            ),\n            array(// 6\n                vec4(0, 1, -1, 0),  // u = v - w\n                vec4(-1, 0, 1, -1), // v = w - u - 1\n            ),\n            array(// 7\n                vec4(-1, 0, 1, -1), // u = w - u - 1\n                vec4(0, -1, 0, -1), // v = -v - 1\n            ),\n            array(// 8\n                vec4(1, 0, 0, 0),   // u = u\n                vec4(0, 1, -1, 0),  // v = v - w\n            ),\n            array(// 9\n                vec4(0, 1, 0, 0),   // u = v\n                vec4(-1, 0, 0, -1), // v = -u - 1\n            ),\n            array(// 10\n                vec4(0, -1, 1, -1), // u = w - v - 1\n                vec4(1, 0, -1, 0),  // v = u - w\n            ),\n            array(// 11\n                vec4(1, 0, 0, 0),   // u = u\n                vec4(0, 1, 1, 0),   // v = v + w\n            ),\n            array(// 12\n                vec4(-1, 0, 1, -1), // u = w - u - 1\n                vec4(0, -1, 2, -1), // v = 2w - v - 1\n            ),\n            array(// 13\n                vec4(0, -1, 1, -1), // u = w - v - 1\n                vec4(1, 0, 1, 0),   // v = u + w\n            ),\n            array(// 14\n                vec4(0, 1, 0, 0),   // u = v\n                vec4(-1, 0, 2, -1), // v = 2w - u - 1\n            ),\n        );\n\n        let iw = i32(w);\n\n        var dir = 0;\n        if (\n            coord.y >= iw * 2 - 1 \n            || coord.y <= -iw \n            || coord.x >= iw * 2 - 1 \n            || coord.x <= -iw\n        ) {\n            dir = 5;\n        } else {\n            if (coord.y < 0) {\n                dir = 1;\n            } else if (coord.y >= iw) {\n                dir = 2;\n            }\n            if (coord.x < 0) {\n                dir = select(5, 3, dir == 0);\n            } else if (coord.x >= iw) {\n                dir = select(5, 4, dir == 0);\n            }\n        }\n\n        let idx = coord.z * 6 + dir;\n        let samp = vec4(coord.xy, iw, 1);\n        let dmat = dmats[dindices[idx]];\n        return vec3u(vec3(dot(dmat[0], samp), dot(dmat[1], samp), dfaces[idx]));\n    }\n\n    fn cubeCoordToIdx(coord: vec3u, w: u32) -> u32 {\n        return coord.x + coord.y * w + coord.z * w * w;\n    }\n\n    fn cubeIdxToCoord(idx: u32, w: u32) -> vec3u {\n        let w2 = w * w;\n        let fidx = idx % w2;\n        return vec3u(fidx % w, fidx / w, idx / w2);\n    }\n\n    fn cubeSampleIdx(uvf: vec3i, w: u32) -> u32 {\n        let coord = cubeSampleCoord(uvf, w);\n        return select(\n            cubeCoordToIdx(coord, w), \n            INVALID_IDX, \n            coord.z == INVALID_FACE,\n        );\n    }\n`;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6097\n")},5752:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Lr: () => (/* binding */ createAndCopyBuffer),\n/* harmony export */   gU: () => (/* binding */ textureToKTX)\n/* harmony export */ });\n/* unused harmony exports createAndCopyCubemap, ktx2ToTexture, textureToArrayBuffer */\n/* harmony import */ var ktx_parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9253);\n/* harmony import */ var _rendering_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3970);\n/* harmony import */ var _general__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4742);\n\n\n\nfunction createAndCopyBuffer(arr, usage, device, label, alignment = 4) {\n    const pad = alignment - 1;\n    const buffer = device.createBuffer({\n        label,\n        usage,\n        size: (arr.byteLength + pad) & ~pad,\n        mappedAtCreation: true,\n    });\n    const writeArray = new Uint8Array(buffer.getMappedRange());\n    const readArray = arr instanceof ArrayBuffer\n        ? new Uint8Array(arr)\n        : new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n    writeArray.set(readArray);\n    buffer.unmap();\n    return buffer;\n}\nfunction createAndCopyCubemap(device, data, format, usage, label) {\n    const pixelSize = TextureFormatToSize[format];\n    if (pixelSize == null) {\n        throw new Error(`copy cubemap -- unsupported format: ${format}`);\n    }\n    const width = Math.sqrt(data.byteLength / (6 * pixelSize));\n    const size = { width, height: width, depthOrArrayLayers: 6 };\n    const texture = device.createTexture({\n        usage: usage | GPUTextureUsage.COPY_DST,\n        label,\n        format,\n        size,\n    });\n    device.queue.writeTexture({ texture }, data, { bytesPerRow: width * pixelSize, rowsPerImage: width }, size);\n    return texture;\n}\nfunction ktx2ToTexture(buffer, device, options) {\n    const arr = new Uint8Array(buffer);\n    const ktx = ktxparse.read(arr);\n    const format = VkFormatToWebGPU[ktx.vkFormat];\n    if (format == null) {\n        throw new Error(`ktx texture import -- unsupported format: ${ktx.vkFormat}\\n\\tCould not covert to webgpu`);\n    }\n    const pixelSize = TextureFormatToSize[format];\n    if (pixelSize == null) {\n        throw new Error(`ktx texture import -- unsupported format: ${ktx.vkFormat}\\n\\tCould not get pixel byte size`);\n    }\n    const size = {\n        width: ktx.pixelWidth,\n        height: ktx.pixelHeight,\n        depthOrArrayLayers: ktx.faceCount,\n    };\n    const maxMipCount = Math.ceil(Math.log2(Math.max(size.width, size.height))) + 1;\n    let mipLevelCount = ktx.levels.length;\n    if (options?.mipLevelCount === 'max') {\n        mipLevelCount = maxMipCount;\n    }\n    else if (typeof options?.mipLevelCount === 'number') {\n        mipLevelCount = Math.min(maxMipCount, options.mipLevelCount);\n    }\n    let usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n    if (options?.textureUsage)\n        usage |= options.textureUsage;\n    const texture = device.createTexture({\n        label: options?.label,\n        size,\n        mipLevelCount,\n        format,\n        usage,\n    });\n    const mipCopies = Math.min(ktx.levels.length, mipLevelCount) - 1;\n    for (let mipLevel = mipCopies; mipLevel >= 0; mipLevel -= 1) {\n        const width = size.width >> mipLevel;\n        const height = size.height >> mipLevel;\n        const { levelData } = ktx.levels[mipLevel];\n        const rawBytesPerRow = width * pixelSize;\n        const bytesPerRow = Math.max(rawBytesPerRow, 256);\n        const rowsPerImage = height;\n        const bytesPerImage = rowsPerImage * bytesPerRow;\n        let imageData = levelData;\n        if (bytesPerRow > rawBytesPerRow) {\n            imageData = new Uint8Array(bytesPerImage * texture.depthOrArrayLayers);\n            for (let h = 0; h < height * texture.depthOrArrayLayers; h += 1) {\n                for (let w = 0; w < rawBytesPerRow; w += 1) {\n                    imageData[w + h * bytesPerRow] = levelData[w + h * rawBytesPerRow];\n                }\n            }\n        }\n        const layerBatch = Math.min(Math.floor(device.limits.maxBufferSize / bytesPerImage), ktx.faceCount);\n        const layerCount = Math.ceil(ktx.faceCount / layerBatch);\n        for (let l = 0; l < layerCount; l += 1) {\n            const offset = l * layerBatch;\n            const count = Math.min(layerBatch, ktx.faceCount - offset);\n            const data = layerCount > 1\n                ? imageData.subarray(offset * bytesPerImage, (offset + count) * bytesPerImage)\n                : imageData;\n            device.queue.writeTexture({ mipLevel, texture, origin: [0, 0, offset] }, data, { bytesPerRow, rowsPerImage }, [width, height, count]);\n        }\n    }\n    return texture;\n}\nasync function textureToArrayBuffer({ device, texture, mipLevel = 0, returnBuffer, storageBuffer, resultBuffer, description, }) {\n    const pixelSize = _rendering_constants__WEBPACK_IMPORTED_MODULE_0__/* .TextureFormatToSize */ .T2[texture.format];\n    const fullDescription = (0,_general__WEBPACK_IMPORTED_MODULE_1__/* .padTemplate */ .OY) `[textureToKTX${description ?? ''}${texture.label}] --`;\n    if (pixelSize == null) {\n        throw new Error(`${fullDescription} format ${texture.format} unsupported`);\n    }\n    const width = texture.width >> mipLevel;\n    const height = texture.height >> mipLevel;\n    const rawBytesPerRow = width * pixelSize;\n    const bytesPerRow = Math.max(rawBytesPerRow, 256);\n    const rowsPerImage = height;\n    const byteSize = rowsPerImage * bytesPerRow * texture.depthOrArrayLayers;\n    const resultSize = rawBytesPerRow * height * texture.depthOrArrayLayers;\n    if (resultBuffer != null && resultBuffer.byteLength < byteSize) {\n        throw new Error(`${fullDescription} given result array not large enough.\r\n${resultBuffer.byteLength} < ${byteSize}`);\n    }\n    if (storageBuffer != null && storageBuffer.size < byteSize) {\n        throw new Error(`${fullDescription} given storage buffer not large enough.\r\n${storageBuffer.size} < ${byteSize}`);\n    }\n    const requiredUsage = GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ;\n    if (storageBuffer != null && (storageBuffer.usage & requiredUsage) !== requiredUsage) {\n        throw new Error(`${fullDescription} given storage does not have correct usage flags.\r\nGiven: ${storageBuffer.usage}\r\nRequired: ${requiredUsage}`);\n    }\n    let imageData = resultBuffer ?? new Uint8Array(byteSize);\n    const storage = storageBuffer ?? device.createBuffer({\n        label: `${fullDescription} storage buffer`,\n        size: byteSize,\n        usage: requiredUsage,\n    });\n    const encoder = device.createCommandEncoder({ label: `${fullDescription} encoder` });\n    encoder.copyTextureToBuffer({ texture, mipLevel }, { buffer: storage, rowsPerImage, bytesPerRow }, { width, height, depthOrArrayLayers: texture.depthOrArrayLayers });\n    device.queue.submit([encoder.finish()]);\n    await Promise.all([\n        storage.mapAsync(GPUMapMode.READ, 0, byteSize),\n        device.queue.onSubmittedWorkDone(),\n    ]);\n    const mapped = storage.getMappedRange(0, byteSize);\n    imageData.set(new Uint8Array(mapped));\n    storage.unmap();\n    if (bytesPerRow > rawBytesPerRow) {\n        for (let h = 0; h < height * texture.depthOrArrayLayers; h += 1) {\n            for (let w = 0; w < rawBytesPerRow; w += 1) {\n                imageData[w + h * rawBytesPerRow] = imageData[w + h * bytesPerRow];\n            }\n        }\n        imageData = imageData.slice(0, resultSize);\n    }\n    return {\n        imageData,\n        storageBuffer: returnBuffer ? storage : undefined,\n    };\n}\nasync function textureToKTX(device, texture, cube = false) {\n    const pixelSize = _rendering_constants__WEBPACK_IMPORTED_MODULE_0__/* .TextureFormatToSize */ .T2[texture.format];\n    const typeSize = _rendering_constants__WEBPACK_IMPORTED_MODULE_0__/* .TextureFormatToChannelSize */ .GE[texture.format];\n    if (pixelSize == null || typeSize == null) {\n        throw new Error(`textureToKTX -- format ${texture.format} of ${texture.label} unsupported`);\n    }\n    const container = new ktx_parse__WEBPACK_IMPORTED_MODULE_2__/* .KTX2Container */ .nYd();\n    container.pixelWidth = texture.width;\n    container.pixelHeight = texture.height;\n    container.vkFormat = _rendering_constants__WEBPACK_IMPORTED_MODULE_0__/* .WebGPUToVkFormat */ .KO[texture.format];\n    container.typeSize = typeSize;\n    delete container.keyValue.KTXswizzle;\n    const dataFormat = container.dataFormatDescriptor[0];\n    dataFormat.colorModel = ktx_parse__WEBPACK_IMPORTED_MODULE_2__/* .KHR_DF_MODEL_RGBSDA */ .Tre;\n    dataFormat.transferFunction = ktx_parse__WEBPACK_IMPORTED_MODULE_2__/* .KHR_DF_TRANSFER_LINEAR */ .T5j;\n    dataFormat.bytesPlane[0] = pixelSize;\n    dataFormat.samples = [0, 1, 2, 3].map((i) => ({\n        channelType: [192, 193, 194, 207][i],\n        samplePosition: [0, 0, 0, 0],\n        bitLength: container.typeSize * 8 - 1,\n        bitOffset: container.typeSize * 8 * i,\n        sampleLower: -1082130432,\n        sampleUpper: 1065353216,\n    }));\n    if (texture.dimension === '3d') {\n        container.faceCount = 1;\n        container.pixelDepth = texture.depthOrArrayLayers;\n    }\n    else if (cube) {\n        const cubeLayers = texture.depthOrArrayLayers / 6;\n        container.layerCount = cubeLayers === 1 ? 0 : cubeLayers;\n        container.faceCount = 6;\n    }\n    else {\n        container.layerCount = texture.depthOrArrayLayers;\n        container.faceCount = 1;\n    }\n    let storageBuffer;\n    let imageData;\n    for (let i = 0; i < texture.mipLevelCount; i += 1) {\n        // eslint-disable-next-line no-await-in-loop\n        ({ imageData, storageBuffer } = await textureToArrayBuffer({\n            mipLevel: i,\n            returnBuffer: true,\n            device,\n            texture,\n            storageBuffer,\n        }));\n        container.levels.push({\n            levelData: imageData,\n            uncompressedByteLength: imageData.byteLength,\n        });\n    }\n    return ktx_parse__WEBPACK_IMPORTED_MODULE_2__/* .write */ .M98(container);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5752\n")},8862:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  y: () => (/* binding */ parseHDR)\n});\n\n// UNUSED EXPORTS: imageToTexture\n\n;// ./src/utils/data-conversion.ts\nconst { baseTable, shiftTable } = (() => {\n    const baseTable = new Uint32Array(256);\n    const shiftTable = new Uint32Array(256);\n    for (let i = 0; i < 255; ++i) {\n        const e = i - 127;\n        if (e < -27) { // very small number (0, -0)\n            baseTable[i] = 0x0000;\n            shiftTable[i] = 24;\n        }\n        else if (e < -14) { // small number (denorm)\n            baseTable[i] = 0x0400 >> (-e - 14);\n            shiftTable[i] = -e - 1;\n        }\n        else if (e <= 15) { // normal number\n            baseTable[i] = (e + 15) << 10;\n            shiftTable[i] = 13;\n        }\n        else { // e < 128, large number (Infinity, -Infinity)\n            baseTable[i] = 0x7c00;\n            shiftTable[i] = 24;\n        }\n    }\n    // e == 128, stay (NaN, Infinity, -Infinity)\n    baseTable[255] = 0x7c00;\n    shiftTable[255] = 13;\n    return { baseTable, shiftTable };\n})();\nconst conversionBuffer = new ArrayBuffer(4);\nconst floatView = new Float32Array(conversionBuffer);\nconst uintView = new Uint32Array(conversionBuffer);\nfunction toFloat16Bytes(val) {\n    floatView[0] = val;\n    const f = uintView[0];\n    const e = (f >> 23) & 0x1ff;\n    const idx = e & 0xff;\n    return baseTable[idx] + ((f & 0x007fffff) >> shiftTable[idx]) + ((e & 0x100) << 7);\n}\n\n// EXTERNAL MODULE: ./src/utils/texture-processing.ts\nvar texture_processing = __webpack_require__(9629);\n;// ./src/utils/texture-importing.ts\n\n\nasync function imageToTexture({ device, data, mimeType, usage = GPUTextureUsage.TEXTURE_BINDING, mips = true, format = 'rgba8unorm', colorSpace = 'srgb', label = '', srgbToLinear, }) {\n    let bitmap;\n    if (data instanceof ImageBitmap) {\n        bitmap = data;\n    }\n    else {\n        const blob = (data instanceof Blob || data instanceof File)\n            ? data\n            : new Blob([data], { type: mimeType });\n        bitmap = await createImageBitmap(blob, { colorSpaceConversion: 'none' });\n    }\n    const size = { width: bitmap.width, height: bitmap.height };\n    const texture = device.createTexture({\n        label,\n        format,\n        size: size,\n        usage: usage | GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n        mipLevelCount: mips ? 1 + (Math.log2(Math.max(bitmap.width, bitmap.height)) | 0) : 1,\n    });\n    device.queue.copyExternalImageToTexture({ source: bitmap }, { texture, colorSpace }, size);\n    if (srgbToLinear)\n        srgbTextureToLinear(device, texture);\n    if (mips)\n        void generateMips(device, texture);\n    return texture;\n}\nfunction parseHDR(inData) {\n    const decoder = new TextDecoder();\n    const buffer = inData instanceof Uint8Array ? inData : new Uint8Array(inData);\n    let pos = 0;\n    const getLine = (lineLimit = 1024) => {\n        const limit = Math.min(buffer.length, lineLimit + pos);\n        const sub = buffer.subarray(pos, limit);\n        const end = sub.indexOf(0x0A) + 1;\n        pos += end;\n        return end === 0 ? undefined : decoder.decode(sub.subarray(0, end));\n    };\n    const importError = (msg) => new Error('HDR Import Error: ' + msg);\n    // #region Read Header\n    const magicTokenRegex = /^#\\?(\\S+)/;\n    const magicTokenLine = getLine();\n    if (magicTokenLine == null)\n        throw importError('no header found');\n    if (!magicTokenRegex.test(magicTokenLine))\n        throw importError('bad initial token');\n    const headerRegs = [\n        /FORMAT=(?<format>\\S+)/, // format\n        /-Y\\s+(?<Y>\\d+)\\s+\\+X\\s+(?<X>\\d+)/, // size\n        /EXPOSURE\\s*=\\s*(?<exposure>\\d+(\\.\\d+)?)/, // exposure\n        /GAMMA\\s*=\\s*(?<gamma>\\d+(\\.\\d+)?)/, // gamma\n    ];\n    const headerReg = new RegExp(`^\\\\s*(${headerRegs.map(({ source }) => `(${source})`).join('|')})\\\\s*$`);\n    let noFormat = true;\n    let gamma = 1; /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n    let exposure = 1; /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n    let width = undefined;\n    let height = undefined;\n    for (let line = getLine(); line != null; line = width == null ? getLine() : undefined) {\n        const groups = line.match(headerReg)?.groups;\n        if (groups == null)\n            continue;\n        if (groups.format != null) {\n            noFormat = false;\n        }\n        else if (groups.X != null && groups.Y != null) {\n            width = parseInt(groups.X);\n            height = parseInt(groups.Y);\n        }\n        else if (groups.gamma != null) {\n            gamma = parseFloat(groups.gamma);\n        }\n        else if (groups.exposure != null) {\n            exposure = parseFloat(groups.exposure);\n        }\n    }\n    if (noFormat)\n        throw importError('missing format specifier');\n    if (width == null || height == null)\n        throw importError('missing image size specifier');\n    // #endregion\n    // #region Read Scanline Data\n    let rawData;\n    const unencodable = width < 8 || width > 0x7fff;\n    const flatData = buffer[pos] !== 2 || buffer[pos + 1] !== 2 || (buffer[pos + 2] & 0x80) !== 0;\n    if (unencodable || flatData) {\n        rawData = buffer.subarray(pos);\n    }\n    else {\n        rawData = new Uint8Array(width * height * 4);\n        const end = 4 * width;\n        const scanline_buffer = new Uint8Array(end);\n        const len = buffer.byteLength;\n        for (let k = 0, offset = 0; k < height && pos < len; k++) {\n            if (pos + 4 > len)\n                throw importError('file ended durning scanline');\n            if ((2 != buffer[pos++]) || (2 != buffer[pos++]) || (((buffer[pos++] << 8) | buffer[pos++]) != width))\n                throw importError('bad rgbe scanline format');\n            let count;\n            for (let ptr = 0; ptr < end && pos < len; ptr += count) {\n                count = buffer[pos++];\n                const isEncodedRun = count > 128;\n                if (isEncodedRun)\n                    count -= 128;\n                if (count == 0 || ptr + count > end)\n                    throw importError('bad scanline data');\n                if (isEncodedRun) {\n                    scanline_buffer.fill(buffer[pos], ptr, ptr + count);\n                    pos += 1;\n                }\n                else {\n                    scanline_buffer.set(buffer.subarray(pos, pos + count), ptr);\n                    pos += count;\n                }\n            }\n            for (let i = 0; i < width; i++)\n                for (let j = 0; j < end; j += width)\n                    rawData[offset++] = scanline_buffer[i + j];\n        }\n    }\n    // #endregion\n    // #region Convert to Float16\n    const data = new Uint16Array(rawData.length);\n    const float16One = toFloat16Bytes(1);\n    for (let i = 0; i < width * height * 4; i += 4) {\n        const raw_e = rawData[i + 3];\n        const scale = Math.pow(2.0, raw_e - 128.0) / 255.0;\n        for (let j = 0; j < 3; j += 1) {\n            data[i + j] = toFloat16Bytes(Math.min(rawData[i + j] * scale, 65504));\n        }\n        data[i + 3] = float16One;\n    }\n    // #endregion\n    return { data, width, height, gamma, exposure };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8862\n")},9629:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   l3: () => (/* binding */ equirectangularToCubemap)\n/* harmony export */ });\n/* unused harmony exports generateMips, srgbTextureToLinear */\n/* harmony import */ var _shaders_blit_vert_shader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(157);\n/* harmony import */ var _shaders_cubemap_sampling_shader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6097);\n/* harmony import */ var _data_copy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5752);\n/* harmony import */ var _general__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4742);\n\n\n\n\nasync function equirectangularToCubemap(device, { data, width, height, gamma = 1, exposure = 1 }, outputDescriptor) {\n    const code = /* wgsl */ `\n        override EXPOSURE: f32 = 1.0;\n        override GAMMA: f32 = 1.0;\n        override FLIP_Y: bool = false;\n\n        @group(0) @binding(0) var equirectangularMap: texture_2d<f32>;\n        @group(0) @binding(1) var mapSampler: sampler;\n        @group(0) @binding(2) var<uniform> face: u32;\n\n        fn sampleSphericalMap(v: vec3f) -> vec2f {\n            const invAtan = vec2(0.1591, 0.3183);\n\n            var uv = vec2(atan2(v.z, v.x), asin(v.y));\n            uv *= invAtan;\n            uv += 0.5;\n            return uv;\n        }\n \n        ${_shaders_blit_vert_shader__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .A}\n        ${_shaders_cubemap_sampling_shader__WEBPACK_IMPORTED_MODULE_2__/* .toWorldDir */ .V}\n\n        @fragment\n        fn fs(@location(0) uv: vec2f) -> @location(0) vec4f {\n            var dir = toWorldDirF32(uv, face);\n            dir = vec3(dir.z, dir.y, -dir.x);\n            var coord = sampleSphericalMap(dir);\n            if (FLIP_Y) { coord.y = 1 - coord.y; }\n\n            var color = textureSample(equirectangularMap, mapSampler, coord).rgb;\n            if (GAMMA != 1.0) { color = pow(color, vec3(1.0 / GAMMA)); }\n            if (EXPOSURE != 1.0) { color /= EXPOSURE; }\n            return vec4(color, 1.0);\n        }\n    `;\n    let FLIP_Y = 0;\n    let equirectangular;\n    if (data instanceof GPUTexture) {\n        equirectangular = data;\n    }\n    else {\n        FLIP_Y = 1;\n        equirectangular = device.createTexture({\n            label: `${outputDescriptor.label} equirectangular`,\n            dimension: '2d',\n            format: 'rgba16float',\n            size: { width, height },\n            usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n        });\n        device.queue.writeTexture({ texture: equirectangular, mipLevel: 0 }, data, { bytesPerRow: width * 2 * 4 }, { width, height, depthOrArrayLayers: 1 });\n        await device.queue.onSubmittedWorkDone();\n    }\n    const faceSize = equirectangular.height >> 1;\n    const cubemapDescriptor = outputDescriptor;\n    cubemapDescriptor.mipLevelCount ??= Math.log2(faceSize) | 0;\n    cubemapDescriptor.size = { width: faceSize, height: faceSize, depthOrArrayLayers: 6 };\n    cubemapDescriptor.dimension = '2d';\n    cubemapDescriptor.usage |= GPUTextureUsage.RENDER_ATTACHMENT;\n    const cubemap = device.createTexture(cubemapDescriptor);\n    const label = (0,_general__WEBPACK_IMPORTED_MODULE_3__/* .padTemplate */ .OY) `hdr copy${outputDescriptor.label}`;\n    const bindgroupLayout = device.createBindGroupLayout({\n        label,\n        entries: [\n            {\n                binding: 0,\n                texture: {},\n                visibility: GPUShaderStage.FRAGMENT,\n            },\n            {\n                binding: 1,\n                sampler: {},\n                visibility: GPUShaderStage.FRAGMENT,\n            },\n            {\n                binding: 2,\n                buffer: {},\n                visibility: GPUShaderStage.FRAGMENT,\n            },\n        ],\n    });\n    const module = device.createShaderModule({ label, code });\n    const sampler = device.createSampler({ label, minFilter: 'linear', magFilter: 'linear' });\n    const params = new Uint32Array(1);\n    const paramBuffer = (0,_data_copy__WEBPACK_IMPORTED_MODULE_0__/* .createAndCopyBuffer */ .Lr)(params, GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM, device, label);\n    const bindgroup = device.createBindGroup({\n        label,\n        layout: bindgroupLayout,\n        entries: [\n            { binding: 0, resource: equirectangular.createView() },\n            { binding: 1, resource: sampler },\n            { binding: 2, resource: { buffer: paramBuffer } },\n        ],\n    });\n    const pipelineLayout = device.createPipelineLayout({\n        label,\n        bindGroupLayouts: [bindgroupLayout],\n    });\n    const pipeline = device.createRenderPipeline({\n        label,\n        layout: pipelineLayout,\n        vertex: { module },\n        fragment: {\n            module,\n            targets: [{ format: cubemap.format }],\n            constants: {\n                GAMMA: gamma,\n                EXPOSURE: exposure,\n                FLIP_Y,\n            },\n        },\n    });\n    for (let i = 0; i < 6; i += 1) {\n        params[0] = i;\n        device.queue.writeBuffer(paramBuffer, 0, params, 0, 1);\n        const view = cubemap.createView({\n            dimension: '2d',\n            arrayLayerCount: 1,\n            baseArrayLayer: i,\n            mipLevelCount: 1,\n        });\n        const encoder = device.createCommandEncoder();\n        const pass = encoder.beginRenderPass({\n            label,\n            colorAttachments: [{\n                    view,\n                    loadOp: 'clear',\n                    storeOp: 'store',\n                }],\n        });\n        pass.setPipeline(pipeline);\n        pass.setBindGroup(0, bindgroup);\n        pass.draw(3);\n        pass.end();\n        device.queue.submit([encoder.finish()]);\n    }\n    return cubemap;\n}\nasync function generateMips(device, texture) {\n    const code = /* wgsl */ `\n        @group(0) @binding(0) var image: texture_2d<f32>;\n        @group(0) @binding(1) var mipSampler: sampler;\n\n        ${blit}\n\n        @fragment\n        fn fs(@location(0) uv: vec2f) -> @location(0) vec4f {\n            return textureSample(image, mipSampler, uv);\n        }\n    `;\n    const label = padTemplate `mip generation${texture.label}`;\n    const bindgroupLayout = device.createBindGroupLayout({\n        label,\n        entries: [\n            {\n                binding: 0,\n                texture: { viewDimension: '2d', sampleType: 'float' },\n                visibility: GPUShaderStage.FRAGMENT,\n            },\n            {\n                binding: 1,\n                sampler: {},\n                visibility: GPUShaderStage.FRAGMENT,\n            },\n        ],\n    });\n    const colorAttachment = {\n        view: undefined,\n        loadOp: 'clear',\n        storeOp: 'store',\n    };\n    const sampler = device.createSampler({\n        minFilter: 'linear',\n        magFilter: 'linear',\n    });\n    const module = device.createShaderModule({ label, code });\n    const pipelineLayout = device.createPipelineLayout({ label, bindGroupLayouts: [bindgroupLayout] });\n    const pipeline = device.createRenderPipeline({\n        label,\n        layout: pipelineLayout,\n        vertex: {\n            entryPoint: 'vs',\n            module,\n        },\n        fragment: {\n            entryPoint: 'fs',\n            targets: [{ format: texture.format }],\n            module,\n        },\n    });\n    colorAttachment.view = texture.createView({ mipLevelCount: 1, baseMipLevel: 0 });\n    await device.queue.onSubmittedWorkDone();\n    for (let i = 1; i < texture.mipLevelCount; i += 1) {\n        const bindgroup = device.createBindGroup({\n            label,\n            layout: bindgroupLayout,\n            entries: [\n                {\n                    binding: 0,\n                    resource: colorAttachment.view,\n                },\n                {\n                    binding: 1,\n                    resource: sampler,\n                },\n            ],\n        });\n        colorAttachment.view = texture.createView({ mipLevelCount: 1, baseMipLevel: i });\n        const encoder = device.createCommandEncoder();\n        const pass = encoder.beginRenderPass({\n            label,\n            colorAttachments: [colorAttachment],\n        });\n        pass.setPipeline(pipeline);\n        pass.setBindGroup(0, bindgroup);\n        pass.draw(3);\n        pass.end();\n        device.queue.submit([encoder.finish()]);\n        await device.queue.onSubmittedWorkDone();\n    }\n}\nfunction srgbTextureToLinear(device, texture) {\n    const code = /* wgsl */ `\n        @group(0) @binding(0) var image: texture_2d<f32>;\n        @group(0) @binding(1) var imageSampler: sampler;\n\n        ${blit}\n\n        fn sRGBToLinear(color: vec3f) -> vec3f {\n            return select( \n                pow(color * 0.9478672986 + 0.0521327014, vec3(2.4)), \n                color * 0.0773993808, \n                color <= vec3(0.04045), \n            );\n        }  \n\n        @fragment\n        fn fs(@location(0) uv: vec2f) -> @location(0) vec4f  {\n            let sample = textureSample(image, imageSampler, uv);\n            let color = sRGBToLinear(sample.rgb);\n            return vec4(color, sample.a);\n        }\n    `;\n    const label = padTemplate `srgb to linear${texture.label}`;\n    const size = { width: texture.width, height: texture.height };\n    const tempTexture = device.createTexture({\n        format: texture.format,\n        usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n        size,\n    });\n    const bindgroupLayout = device.createBindGroupLayout({\n        label,\n        entries: [\n            {\n                binding: 0,\n                texture: {},\n                visibility: GPUShaderStage.FRAGMENT,\n            },\n            {\n                binding: 1,\n                sampler: {},\n                visibility: GPUShaderStage.FRAGMENT,\n            },\n        ],\n    });\n    const sampler = device.createSampler({\n        minFilter: 'linear',\n        magFilter: 'linear',\n    });\n    const module = device.createShaderModule({ label, code: code });\n    const pipelineLayout = device.createPipelineLayout({ label, bindGroupLayouts: [bindgroupLayout] });\n    const pipeline = device.createRenderPipeline({\n        label,\n        layout: pipelineLayout,\n        vertex: {\n            entryPoint: 'vs',\n            module,\n        },\n        fragment: {\n            entryPoint: 'fs',\n            targets: [{ format: texture.format }],\n            module,\n        },\n    });\n    const bindgroup = device.createBindGroup({\n        label,\n        layout: bindgroupLayout,\n        entries: [\n            {\n                binding: 0,\n                resource: tempTexture.createView(),\n            },\n            {\n                binding: 1,\n                resource: sampler,\n            },\n        ],\n    });\n    const encoder = device.createCommandEncoder();\n    encoder.copyTextureToTexture({ texture }, { texture: tempTexture }, size);\n    const pass = encoder.beginRenderPass({\n        label,\n        colorAttachments: [{\n                view: texture.createView({ mipLevelCount: 1, baseMipLevel: 0 }),\n                loadOp: 'clear',\n                storeOp: 'store',\n            }],\n    });\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindgroup);\n    pass.draw(3);\n    pass.end();\n    device.queue.submit([encoder.finish()]);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9629\n")}}]);