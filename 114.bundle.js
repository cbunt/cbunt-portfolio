"use strict";(self.webpackChunkcbunt_portfolio=self.webpackChunkcbunt_portfolio||[]).push([[114],{838:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GE: () => (/* binding */ TextureFormatToChannelSize),\n/* harmony export */   KO: () => (/* binding */ WebGPUToVkFormat),\n/* harmony export */   Oi: () => (/* binding */ VkFormatToWebGPU),\n/* harmony export */   T2: () => (/* binding */ TextureFormatToSize),\n/* harmony export */   vV: () => (/* binding */ TypeSizes)\n/* harmony export */ });\n/* unused harmony export textureTypeToDimension */\n/* harmony import */ var ktx_parse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(380);\n\nconst TypeSizes = {\n    mat4x4Count: 16,\n    sizeofMat4x4f: 16 * Float32Array.BYTES_PER_ELEMENT,\n};\nconst VkFormatToWebGPU = {\n    // 8-bit formats\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8_UNORM */ .VIE]: 'r8unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8_SNORM */ .B7n]: 'r8snorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8_UINT */ .W_U]: 'r8uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8_SINT */ .YeG]: 'r8sint',\n    // 16-bit formats\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R16_UINT */ .HYY]: 'r16uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R16_SINT */ .brc]: 'r16sint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R16_SFLOAT */ .eLQ]: 'r16float',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8G8_UNORM */ .sk6]: 'rg8unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8G8_SNORM */ .aiL]: 'rg8snorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8G8_UINT */ .xWH]: 'rg8uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8G8_SINT */ .$Kq]: 'rg8sint',\n    // 32-bit formats\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R32_UINT */ .nR0]: 'r32uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R32_SINT */ .rwM]: 'r32sint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R32_SFLOAT */ .e4n]: 'r32float',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R16G16_UINT */ .P1c]: 'rg16uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R16G16_SINT */ .bc6]: 'rg16sint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R16G16_SFLOAT */ .cps]: 'rg16float',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8G8B8A8_UNORM */ .tsP]: 'rgba8unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8G8B8A8_SRGB */ .Wm_]: 'rgba8unorm-srgb',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8G8B8A8_SNORM */ .zqn]: 'rgba8snorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8G8B8A8_UINT */ .MZV]: 'rgba8uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R8G8B8A8_SINT */ ._Je]: 'rgba8sint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_B8G8R8A8_UNORM */ .J6Z]: 'bgra8unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_B8G8R8A8_SRGB */ .mIY]: 'bgra8unorm-srgb',\n    // Packed 32-bit formats\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 */ .KIZ]: 'rgb9e5ufloat',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_A2R10G10B10_UINT_PACK32 */ .eAA]: 'rgb10a2uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_A2R10G10B10_UNORM_PACK32 */ .fJh]: 'rgb10a2unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_B10G11R11_UFLOAT_PACK32 */ .kot]: 'rg11b10ufloat',\n    // 64-bit formats\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R32G32_UINT */ .nlo]: 'rg32uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R32G32_SINT */ .x9e]: 'rg32sint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R32G32_SFLOAT */ .yAK]: 'rg32float',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R16G16B16A16_UINT */ .CSc]: 'rgba16uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R16G16B16A16_SINT */ .GF$]: 'rgba16sint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R16G16B16A16_SFLOAT */ .l2T]: 'rgba16float',\n    // 128-bit formats\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R32G32B32A32_UINT */ .KMX]: 'rgba32uint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R32G32B32A32_SINT */ .KBq]: 'rgba32sint',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_R32G32B32A32_SFLOAT */ .Ze1]: 'rgba32float',\n    // BC compressed formats usable if \"texture-compression-bc\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC1_RGBA_UNORM_BLOCK */ .QFs]: 'bc1-rgba-unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC1_RGBA_SRGB_BLOCK */ .bOE]: 'bc1-rgba-unorm-srgb',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC2_UNORM_BLOCK */ .wt4]: 'bc2-rgba-unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC2_SRGB_BLOCK */ .ZBp]: 'bc2-rgba-unorm-srgb',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC3_UNORM_BLOCK */ .D_t]: 'bc3-rgba-unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC3_SRGB_BLOCK */ .elk]: 'bc3-rgba-unorm-srgb',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC4_UNORM_BLOCK */ .ydS]: 'bc4-r-unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC4_SNORM_BLOCK */ .iIv]: 'bc4-r-snorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC5_UNORM_BLOCK */ .LHP]: 'bc5-rg-unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC5_SNORM_BLOCK */ .xXb]: 'bc5-rg-snorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC6H_UFLOAT_BLOCK */ .mQu]: 'bc6h-rgb-ufloat',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC6H_SFLOAT_BLOCK */ .CpY]: 'bc6h-rgb-float',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC7_UNORM_BLOCK */ .FD_]: 'bc7-rgba-unorm',\n    [ktx_parse__WEBPACK_IMPORTED_MODULE_0__/* .VK_FORMAT_BC7_SRGB_BLOCK */ .GJu]: 'bc7-rgba-unorm-srgb',\n    // Currently unsupported extension formats:\n    // ETC2 compressed formats usable if \"texture-compression-etc2\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    // \"etc2-rgb8unorm\",\n    // \"etc2-rgb8unorm-srgb\",\n    // \"etc2-rgb8a1unorm\",\n    // \"etc2-rgb8a1unorm-srgb\",\n    // \"etc2-rgba8unorm\",\n    // \"etc2-rgba8unorm-srgb\",\n    // \"eac-r11unorm\",\n    // \"eac-r11snorm\",\n    // \"eac-rg11unorm\",\n    // \"eac-rg11snorm\",\n    // ASTC compressed formats usable if \"texture-compression-astc\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    // \"astc-4x4-unorm\",\n    // \"astc-4x4-unorm-srgb\",\n    // \"astc-5x4-unorm\",\n    // \"astc-5x4-unorm-srgb\",\n    // \"astc-5x5-unorm\",\n    // \"astc-5x5-unorm-srgb\",\n    // \"astc-6x5-unorm\",\n    // \"astc-6x5-unorm-srgb\",\n    // \"astc-6x6-unorm\",\n    // \"astc-6x6-unorm-srgb\",\n    // \"astc-8x5-unorm\",\n    // \"astc-8x5-unorm-srgb\",\n    // \"astc-8x6-unorm\",\n    // \"astc-8x6-unorm-srgb\",\n    // \"astc-8x8-unorm\",\n    // \"astc-8x8-unorm-srgb\",\n    // \"astc-10x5-unorm\",\n    // \"astc-10x5-unorm-srgb\",\n    // \"astc-10x6-unorm\",\n    // \"astc-10x6-unorm-srgb\",\n    // \"astc-10x8-unorm\",\n    // \"astc-10x8-unorm-srgb\",\n    // \"astc-10x10-unorm\",\n    // \"astc-10x10-unorm-srgb\",\n    // \"astc-12x10-unorm\",\n    // \"astc-12x10-unorm-srgb\",\n    // \"astc-12x12-unorm\",\n};\nconst TextureFormatToSize = {\n    // 8-bit formats\n    r8unorm: 1,\n    r8snorm: 1,\n    r8uint: 1,\n    r8sint: 1,\n    // 16-bit formats\n    r16uint: 2,\n    r16sint: 2,\n    r16float: 2,\n    rg8unorm: 2,\n    rg8snorm: 2,\n    rg8uint: 2,\n    rg8sint: 2,\n    // 32-bit formats\n    r32uint: 4,\n    r32sint: 4,\n    r32float: 4,\n    rg16uint: 4,\n    rg16sint: 4,\n    rg16float: 4,\n    rgba8unorm: 4,\n    'rgba8unorm-srgb': 4,\n    rgba8snorm: 4,\n    rgba8uint: 4,\n    rgba8sint: 4,\n    bgra8unorm: 4,\n    'bgra8unorm-srgb': 4,\n    // Packed 32-bit formats\n    rgb9e5ufloat: 4,\n    rgb10a2uint: 4,\n    rgb10a2unorm: 4,\n    rg11b10ufloat: 4,\n    // 64-bit formats\n    rg32uint: 8,\n    rg32sint: 8,\n    rg32float: 8,\n    rgba16uint: 8,\n    rgba16sint: 8,\n    rgba16float: 8,\n    // 128-bit formats\n    rgba32uint: 16,\n    rgba32sint: 16,\n    rgba32float: 16,\n};\nconst TextureFormatToChannelSize = {\n    // 8-bit formats\n    r8unorm: 1,\n    r8snorm: 1,\n    r8uint: 1,\n    r8sint: 1,\n    // 16-bit formats\n    r16uint: 2,\n    r16sint: 2,\n    r16float: 2,\n    rg8unorm: 1,\n    rg8snorm: 1,\n    rg8uint: 1,\n    rg8sint: 1,\n    // 32-bit formats\n    r32uint: 4,\n    r32sint: 4,\n    r32float: 4,\n    rg16uint: 2,\n    rg16sint: 2,\n    rg16float: 2,\n    rgba8unorm: 1,\n    'rgba8unorm-srgb': 1,\n    rgba8snorm: 1,\n    rgba8uint: 1,\n    rgba8sint: 1,\n    bgra8unorm: 1,\n    'bgra8unorm-srgb': 1,\n    // Packed 32-bit formats\n    rgb9e5ufloat: 4,\n    rgb10a2uint: 4,\n    rgb10a2unorm: 4,\n    rg11b10ufloat: 4,\n    // 64-bit formats\n    rg32uint: 4,\n    rg32sint: 4,\n    rg32float: 4,\n    rgba16uint: 2,\n    rgba16sint: 2,\n    rgba16float: 2,\n    // 128-bit formats\n    rgba32uint: 4,\n    rgba32sint: 4,\n    rgba32float: 4,\n};\nconst WebGPUToVkFormat = Object.fromEntries(Object.entries(VkFormatToWebGPU).map(([vk, wgpu]) => [wgpu, parseInt(vk, 10)]));\nconst textureTypeToDimension = {\n    texture_cube: 'cube',\n    texture_3d: '3d',\n    texture_2d: '2d',\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///838\n")},114:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ renderer)\n});\n\n// EXTERNAL MODULE: ./node_modules/.pnpm/wgpu-matrix@3.0.1/node_modules/wgpu-matrix/dist/3.x/wgpu-matrix.module.js\nvar wgpu_matrix_module = __webpack_require__(836);\n// EXTERNAL MODULE: ./src/rendering/constants.ts\nvar constants = __webpack_require__(838);\n;// CONCATENATED MODULE: ./src/rendering/camera.ts\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Camera_instances, _a, _Camera_cacheProjection;\n\n\nclass Camera {\n    constructor(viewParams = {}) {\n        _Camera_instances.add(this);\n        /**\n       *  An ArrayBuffer containing the camera's worldToView, viewToClip, worldToClip,\n       *  viewToWorld, clipToView, and clipToWorld matrices as Float32Arrays for\n       *  easier transfer. Ordered as listed above.\n       */\n        this.buffer = new ArrayBuffer(_a.bufferLength);\n        this.worldToView = new Float32Array(this.buffer, _a.worldToViewOffset, constants/* TypeSizes */.vV.mat4x4Count);\n        this.viewToClip = new Float32Array(this.buffer, _a.viewToClipOffset, constants/* TypeSizes */.vV.mat4x4Count);\n        this.worldToClip = new Float32Array(this.buffer, _a.worldToClipOffset, constants/* TypeSizes */.vV.mat4x4Count);\n        this.viewToWorld = new Float32Array(this.buffer, _a.viewToWorldOffset, constants/* TypeSizes */.vV.mat4x4Count);\n        this.clipToView = new Float32Array(this.buffer, _a.clipToViewOffset, constants/* TypeSizes */.vV.mat4x4Count);\n        this.clipToWorld = new Float32Array(this.buffer, _a.clipToWorldOffset, constants/* TypeSizes */.vV.mat4x4Count);\n        this.location = new Float32Array([0, 0, 0]);\n        this.rotation = new Float32Array([0, 0, 0, 1]);\n        this.params = {\n            nearPlane: 0.3,\n            farPlane: 500.0,\n            fov: 60,\n            width: 1920,\n            height: 1080,\n            projection: 'perspective',\n        };\n        this.updateParams(viewParams);\n    }\n    updateParams(val) {\n        this.params = Object.assign(Object.assign({}, this.params), val);\n        __classPrivateFieldGet(this, _Camera_instances, \"m\", _Camera_cacheProjection).call(this);\n    }\n    cacheView() {\n        wgpu_matrix_module/* mat4 */.pB.fromQuat(this.rotation, this.viewToWorld);\n        wgpu_matrix_module/* mat4 */.pB.setTranslation(this.viewToWorld, this.location, this.viewToWorld);\n        // mat4.mul(this.viewToWorld, Camera.orientation, this.viewToWorld);\n        wgpu_matrix_module/* mat4 */.pB.invert(this.viewToWorld, this.worldToView);\n        wgpu_matrix_module/* mat4 */.pB.mul(this.viewToClip, this.worldToView, this.worldToClip);\n        wgpu_matrix_module/* mat4 */.pB.mul(this.viewToWorld, this.clipToView, this.clipToWorld);\n    }\n}\n_a = Camera, _Camera_instances = new WeakSet(), _Camera_cacheProjection = function _Camera_cacheProjection() {\n    if (this.params.projection === 'perspective') {\n        wgpu_matrix_module/* mat4 */.pB.perspective(this.params.fov * (Math.PI / 180), this.params.width / this.params.height, this.params.nearPlane, this.params.farPlane, this.viewToClip);\n    }\n    else {\n        const x = this.params.width / 2;\n        const y = this.params.height / 2;\n        wgpu_matrix_module/* mat4 */.pB.ortho(-x, x, -y, y, this.params.nearPlane, this.params.farPlane, this.viewToClip);\n    }\n    wgpu_matrix_module/* mat4 */.pB.invert(this.viewToClip, this.clipToView);\n};\nCamera.orientation = new Float32Array([\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, -1, 0,\n    0, 0, 0, 1,\n]);\nCamera.worldToViewOffset = 0;\nCamera.viewToClipOffset = _a.worldToViewOffset + constants/* TypeSizes */.vV.sizeofMat4x4f;\nCamera.worldToClipOffset = _a.viewToClipOffset + constants/* TypeSizes */.vV.sizeofMat4x4f;\nCamera.viewToWorldOffset = _a.worldToClipOffset + constants/* TypeSizes */.vV.sizeofMat4x4f;\nCamera.clipToViewOffset = _a.viewToWorldOffset + constants/* TypeSizes */.vV.sizeofMat4x4f;\nCamera.clipToWorldOffset = _a.clipToViewOffset + constants/* TypeSizes */.vV.sizeofMat4x4f;\nCamera.bufferLength = _a.clipToWorldOffset + constants/* TypeSizes */.vV.sizeofMat4x4f;\n/* harmony default export */ const camera = (Camera);\n\n;// CONCATENATED MODULE: ./src/rendering/forward-uniforms.ts\n\nclass ForwardUniforms {\n    constructor(device) {\n        this.deviceBuffer = device.createBuffer(ForwardUniforms.bufferDescriptor);\n        this.bindGroupLayout = device.createBindGroupLayout(ForwardUniforms.layoutDescriptor);\n        this.bindGroupDescriptor = {\n            label: 'forward pass uniforms bind group',\n            layout: this.bindGroupLayout,\n            entries: [\n                {\n                    binding: 0,\n                    resource: {\n                        buffer: this.deviceBuffer,\n                        offset: 0,\n                        size: ForwardUniforms.bufferSize,\n                    },\n                },\n            ],\n        };\n        this.bindgroup = device.createBindGroup(this.bindGroupDescriptor);\n    }\n    updateDeviceBuffer(queue, camera) {\n        camera.cacheView();\n        queue.writeBuffer(this.deviceBuffer, 0, camera.buffer);\n    }\n}\nForwardUniforms.code = (group) => /* wgsl */ `\r\n        struct ForwardUniforms {\r\n            worldToView: mat4x4f,\r\n            viewToClip: mat4x4f,\r\n            worldToClip: mat4x4f,\r\n            inverseWorldToView: mat4x4f,\r\n            inverseViewToClip: mat4x4f,\r\n            inverseWorldToClip: mat4x4f,\r\n        }\r\n\r\n        @group(${group}) @binding(0) var<uniform> globals: ForwardUniforms;\r\n    `;\nForwardUniforms.bufferSize = camera.bufferLength;\nForwardUniforms.layoutDescriptor = {\n    label: 'Forward uniforms layout',\n    entries: [\n        {\n            binding: 0,\n            buffer: { minBindingSize: ForwardUniforms.bufferSize },\n            visibility: GPUShaderStage.VERTEX,\n        },\n    ],\n};\nForwardUniforms.bufferDescriptor = {\n    label: 'Forward uniforms buffer',\n    size: ForwardUniforms.bufferSize,\n    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n};\n/* harmony default export */ const forward_uniforms = (ForwardUniforms);\n\n;// CONCATENATED MODULE: ./src/shaders/blit-vert.shader.ts\n/* harmony default export */ const blit_vert_shader = (/* wgsl */`\r\n    struct VertOut {\r\n        @builtin(position) pos: vec4f,\r\n        @location(0) uv: vec2f,\r\n    }\r\n\r\n    @vertex\r\n    fn vs(@builtin(vertex_index) idx: u32) -> VertOut {\r\n        const pos = array(\r\n            vec2f(-1,  3),\r\n            vec2f(3, -1),\r\n            vec2f(-1, -1),\r\n        );\r\n        var res: VertOut;\r\n        res.pos = vec4f(pos[idx], 0.0, 1.0);\r\n        res.uv = pos[idx];\r\n        return res;\r\n    }\r\n`);\n\n;// CONCATENATED MODULE: ./src/rendering/tonemap-pass.ts\n\nclass TonemapPass {\n    constructor(device, format) {\n        this.device = device;\n        this.colorAttachment = {\n            loadOp: 'load',\n            storeOp: 'store',\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            view: undefined,\n        };\n        this.passDescriptor = {\n            label: 'tonepass -- pass encoder',\n            colorAttachments: [this.colorAttachment],\n        };\n        this.renderTarget = { format };\n        this.bindgroupLayout = device.createBindGroupLayout(TonemapPass.bindGroupLayoutDescriptor);\n        const module = device.createShaderModule({ label: 'tonemap shader', code: TonemapPass.code });\n        this.pipelineDescriptor = {\n            label: 'tonemap pipeline',\n            layout: device.createPipelineLayout({\n                label: 'tone map pipeline layout',\n                bindGroupLayouts: [this.bindgroupLayout],\n            }),\n            vertex: {\n                module,\n                entryPoint: 'vs',\n            },\n            fragment: {\n                module,\n                entryPoint: 'fs',\n                targets: [this.renderTarget],\n            },\n        };\n        this.pipeline = device.createRenderPipeline(this.pipelineDescriptor);\n    }\n    updateInput(input) {\n        this.bindgroup = this.device.createBindGroup({\n            label: 'tonemap bindgroup',\n            layout: this.bindgroupLayout,\n            entries: [{\n                    binding: 0,\n                    resource: input,\n                }],\n        });\n    }\n    pass(encoder, output) {\n        if (this.bindgroup == null)\n            return;\n        if (this.renderTarget.format !== output.format) {\n            this.renderTarget.format = output.format;\n            this.pipeline = this.device.createRenderPipeline(this.pipelineDescriptor);\n        }\n        this.colorAttachment.view = output.createView({ dimension: '2d' });\n        const pass = encoder.beginRenderPass(this.passDescriptor);\n        pass.setPipeline(this.pipeline);\n        pass.setBindGroup(0, this.bindgroup);\n        pass.draw(3);\n        pass.end();\n    }\n}\nTonemapPass.code = `\r\n        @group(0) @binding(0) var colorTexture: texture_2d<f32>;\r\n\r\n        ${blit_vert_shader}\r\n\r\n        fn aces_tone_map(hdr: vec3f) -> vec3f {\r\n            const m1 = mat3x3(\r\n                0.59719, 0.07600, 0.02840,\r\n                0.35458, 0.90834, 0.13383,\r\n                0.04823, 0.01566, 0.83777,\r\n            );\r\n            const m2 = mat3x3(\r\n                1.60475, -0.10208, -0.00327,\r\n                -0.53108, 1.10813, -0.07276,\r\n                -0.07367, -0.00605, 1.07602,\r\n            );\r\n            const boost = 1.0 / 0.6;\r\n            let v = m1 * (hdr);\r\n            let a = v * (v + 0.0245786) - 0.000090537;\r\n            let b = v * (0.983729 * v + 0.4329510) + 0.238081;\r\n            return saturate(m2 * (a / b));\r\n        }\r\n\r\n        fn gamma_correct(color: vec3f) -> vec3f {\r\n            return linear_to_srgb(color / (color + vec3(1.0)));\r\n        }\r\n\r\n        fn linear_to_srgb(color: vec3f) -> vec3f {\r\n            return pow(color, vec3(1.0/2.2));\r\n        }\r\n\r\n        @fragment\r\n        fn fs(@builtin(position) pos: vec4f) -> @location(0) vec4f {\r\n            let uv = vec2<i32>(floor(pos.xy));\r\n            let color = textureLoad(colorTexture, uv, 0);\r\n            return vec4f(linear_to_srgb(aces_tone_map(color.rgb)), 1.0);\r\n        }\r\n    `;\nTonemapPass.bindGroupLayoutDescriptor = {\n    label: 'tonemap bindgroup layout',\n    entries: [{\n            binding: 0,\n            texture: { sampleType: 'float', viewDimension: '2d' },\n            visibility: GPUShaderStage.FRAGMENT,\n        }],\n};\n/* harmony default export */ const tonemap_pass = (TonemapPass);\n\n;// CONCATENATED MODULE: ./src/rendering/skybox-pass.ts\nvar skybox_pass_classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _SkyboxPass_instances, _SkyboxPass_skyTexture, _SkyboxPass_depthTexture, _SkyboxPass_targetFormat, _SkyboxPass_useNearestSample, _SkyboxPass_updateBindgroup;\n\nclass SkyboxPass {\n    get mipLevel() { return this.uniformArray[0]; }\n    set mipLevel(val) {\n        if (val === this.uniformArray[0])\n            return;\n        this.uniformArray[0] = val;\n        this.device.queue.writeBuffer(this.uniformBuffer, 0, this.uniformArray, 0, 1);\n    }\n    get useNearestSample() { return skybox_pass_classPrivateFieldGet(this, _SkyboxPass_useNearestSample, \"f\"); }\n    set useNearestSample(val) {\n        if (val === skybox_pass_classPrivateFieldGet(this, _SkyboxPass_useNearestSample, \"f\"))\n            return;\n        __classPrivateFieldSet(this, _SkyboxPass_useNearestSample, val, \"f\");\n        skybox_pass_classPrivateFieldGet(this, _SkyboxPass_instances, \"m\", _SkyboxPass_updateBindgroup).call(this);\n    }\n    get targetFormat() { return skybox_pass_classPrivateFieldGet(this, _SkyboxPass_targetFormat, \"f\"); }\n    set targetFormat(format) {\n        if (format === skybox_pass_classPrivateFieldGet(this, _SkyboxPass_targetFormat, \"f\"))\n            return;\n        __classPrivateFieldSet(this, _SkyboxPass_targetFormat, format, \"f\");\n        this.pipeline = this.device.createRenderPipeline({\n            label: 'skybox pass -- pipeline',\n            layout: this.pipelineLayout,\n            vertex: {\n                entryPoint: 'vs',\n                module: this.shader,\n            },\n            fragment: {\n                entryPoint: 'fs',\n                targets: [{ format }],\n                module: this.shader,\n            },\n        });\n    }\n    set skyTexture(skybox) {\n        if (skybox === skybox_pass_classPrivateFieldGet(this, _SkyboxPass_skyTexture, \"f\"))\n            return;\n        __classPrivateFieldSet(this, _SkyboxPass_skyTexture, skybox, \"f\");\n        skybox_pass_classPrivateFieldGet(this, _SkyboxPass_instances, \"m\", _SkyboxPass_updateBindgroup).call(this);\n    }\n    set depthTexture(depthTexture) {\n        if (depthTexture === skybox_pass_classPrivateFieldGet(this, _SkyboxPass_depthTexture, \"f\"))\n            return;\n        __classPrivateFieldSet(this, _SkyboxPass_depthTexture, depthTexture, \"f\");\n        skybox_pass_classPrivateFieldGet(this, _SkyboxPass_instances, \"m\", _SkyboxPass_updateBindgroup).call(this);\n    }\n    constructor(device, cameraUniforms, targetFormat, skybox) {\n        _SkyboxPass_instances.add(this);\n        this.device = device;\n        this.cameraUniforms = cameraUniforms;\n        this.uniformArray = new Float32Array(8);\n        _SkyboxPass_skyTexture.set(this, void 0);\n        _SkyboxPass_depthTexture.set(this, void 0);\n        _SkyboxPass_targetFormat.set(this, void 0);\n        _SkyboxPass_useNearestSample.set(this, false);\n        this.target = {\n            clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            view: undefined,\n        };\n        this.passDescriptor = { colorAttachments: [this.target] };\n        this.bindgroupLayout = device.createBindGroupLayout({\n            label: 'skybox pass -- bindgroup layout',\n            entries: [\n                {\n                    binding: 0,\n                    texture: { viewDimension: 'cube' },\n                    visibility: GPUShaderStage.FRAGMENT | GPUShaderStage.VERTEX,\n                },\n                {\n                    binding: 1,\n                    texture: {\n                        viewDimension: '2d',\n                        sampleType: 'depth',\n                    },\n                    visibility: GPUShaderStage.FRAGMENT,\n                },\n                {\n                    binding: 2,\n                    visibility: GPUShaderStage.FRAGMENT,\n                    sampler: {},\n                },\n                {\n                    binding: 3,\n                    visibility: GPUShaderStage.VERTEX,\n                    buffer: { type: 'uniform' },\n                },\n            ],\n        });\n        this.linearSampler = device.createSampler({\n            minFilter: 'linear',\n            magFilter: 'linear',\n            mipmapFilter: 'linear',\n        });\n        this.nearestSampler = device.createSampler({\n            minFilter: 'nearest',\n            magFilter: 'nearest',\n            mipmapFilter: 'nearest',\n        });\n        this.shader = device.createShaderModule({\n            code: SkyboxPass.code,\n            label: 'skybox pass -- shader',\n        });\n        this.pipelineLayout = device.createPipelineLayout({\n            label: 'skybox pass -- pipeline layout',\n            bindGroupLayouts: [\n                cameraUniforms.bindGroupLayout,\n                this.bindgroupLayout,\n            ],\n        });\n        this.uniformBuffer = device.createBuffer({\n            label: 'skybox pass -- uniform buffer',\n            size: 32,\n            usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM,\n        });\n        this.targetFormat = targetFormat;\n        if (skybox != null)\n            this.skyTexture = skybox;\n    }\n    pass(pass) {\n        if (this.textureBindgroup == null || this.pipeline == null)\n            return false;\n        pass.setPipeline(this.pipeline);\n        pass.setBindGroup(0, this.cameraUniforms.bindgroup);\n        pass.setBindGroup(1, this.textureBindgroup);\n        pass.draw(3);\n        return true;\n    }\n}\n_SkyboxPass_skyTexture = new WeakMap(), _SkyboxPass_depthTexture = new WeakMap(), _SkyboxPass_targetFormat = new WeakMap(), _SkyboxPass_useNearestSample = new WeakMap(), _SkyboxPass_instances = new WeakSet(), _SkyboxPass_updateBindgroup = function _SkyboxPass_updateBindgroup() {\n    if (skybox_pass_classPrivateFieldGet(this, _SkyboxPass_skyTexture, \"f\") == null || skybox_pass_classPrivateFieldGet(this, _SkyboxPass_depthTexture, \"f\") == null)\n        return;\n    this.textureBindgroup = this.device.createBindGroup({\n        label: 'skybox pass -- bindgroup',\n        layout: this.bindgroupLayout,\n        entries: [\n            {\n                binding: 0,\n                resource: skybox_pass_classPrivateFieldGet(this, _SkyboxPass_skyTexture, \"f\"),\n            },\n            {\n                binding: 1,\n                resource: skybox_pass_classPrivateFieldGet(this, _SkyboxPass_depthTexture, \"f\"),\n            },\n            {\n                binding: 2,\n                resource: this.useNearestSample\n                    ? this.nearestSampler\n                    : this.linearSampler,\n            },\n            {\n                binding: 3,\n                resource: { buffer: this.uniformBuffer },\n            },\n        ],\n    });\n};\nSkyboxPass.code = `\r\n        ${forward_uniforms.code(0)}\r\n\r\n        struct SkyboxUniforms {\r\n            mipBias: f32,\r\n        };\r\n\r\n        @group(1) @binding(0) var environmentTexture: texture_cube<f32>;\r\n        @group(1) @binding(1) var depthTexture: texture_depth_2d;\r\n        @group(1) @binding(2) var environmentSampler: sampler;\r\n        @group(1) @binding(3) var<uniform> skyboxUniforms: SkyboxUniforms;\r\n\r\n        struct Varyings {\r\n            @builtin(position) position: vec4f,\r\n            @location(0) pos: vec4f,\r\n            @location(1) mipBias: f32,\r\n        };\r\n    \r\n        @vertex \r\n        fn vs(@builtin(vertex_index) vNdx: u32) -> Varyings {\r\n            const pos = array(\r\n                vec2(-1.0,  3.0),\r\n                vec2(-1.0, -1.0),\r\n                vec2( 3.0, -1.0),\r\n            );\r\n    \r\n            var vsOut: Varyings;\r\n            vsOut.position = vec4(pos[vNdx], 0.0, 1.0);\r\n    \r\n            // Ignores the camera's translation without needing a separate rotation matrix.\r\n            vsOut.pos = globals.inverseViewToClip * vsOut.position;\r\n            let w = vsOut.pos.w;\r\n            vsOut.pos.w = 0.0;\r\n            vsOut.pos = globals.inverseWorldToView * vsOut.pos;\r\n            vsOut.pos.w = w;\r\n\r\n            vsOut.mipBias = clamp(skyboxUniforms.mipBias, 0, f32(textureNumLevels(environmentTexture)));\r\n            return vsOut;\r\n        }\r\n\r\n        @fragment\r\n        fn fs(in: Varyings) -> @location(0) vec4f {\r\n            let dimensions = textureDimensions(depthTexture);\r\n            let uv = min(vec2<u32>(floor(in.position.xy)), dimensions - 1);\r\n            let depth = textureLoad(depthTexture, uv, 0);\r\n            if (depth < 1.0) { discard; }\r\n\r\n            let t = normalize(in.pos.xyz / in.pos.w) * vec3(-1.0, 1.0, 1.0);\r\n            let color = textureSampleLevel(environmentTexture, environmentSampler, t, in.mipBias).rgb;\r\n            return vec4(color, 1.0);\r\n        }\r\n    `;\n/* harmony default export */ const skybox_pass = (SkyboxPass);\n\n// EXTERNAL MODULE: ./src/utils/general.ts\nvar general = __webpack_require__(986);\n;// CONCATENATED MODULE: ./src/rendering/renderer.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar renderer_classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Renderer_instances, _Renderer_createResizeObserver;\n\n\n\n\n\nclass Renderer {\n    setModel(ModelCtor) {\n        this.model = new ModelCtor(this.device, this.skyboxPass, {\n            view: this.colorAttachment.view,\n            format: Renderer.postProcessFormat,\n            size: { width: this.canvas.width, height: this.canvas.height },\n        });\n        return this.model;\n    }\n    constructor(canvas, device) {\n        _Renderer_instances.add(this);\n        this.canvas = canvas;\n        this.device = device;\n        this.colorAttachment = {\n            clearValue: { r: 0, g: 0, b: 0, a: 1 },\n            loadOp: 'clear',\n            storeOp: 'store',\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            view: undefined,\n        };\n        this.passDescriptor = { colorAttachments: [this.colorAttachment] };\n        this.render = () => {\n            var _a, _b;\n            requestAnimationFrame(this.render);\n            this.forwardUniforms.updateDeviceBuffer(this.device.queue, this.camera);\n            const encoder = this.device.createCommandEncoder({ label: 'main render encoder' });\n            const pass = (_b = (_a = this.model) === null || _a === void 0 ? void 0 : _a.render(encoder)) !== null && _b !== void 0 ? _b : encoder.beginRenderPass(this.passDescriptor);\n            this.skyboxPass.pass(pass);\n            pass.end();\n            this.tonemapPass.pass(encoder, this.context.getCurrentTexture());\n            this.device.queue.submit([encoder.finish()]);\n        };\n        const size = { width: this.canvas.width, height: this.canvas.height };\n        this.camera = new camera(size);\n        this.forwardUniforms = new forward_uniforms(this.device);\n        this.tonemapPass = new tonemap_pass(this.device, Renderer.outputFormat);\n        this.skyboxPass = new skybox_pass(this.device, this.forwardUniforms, Renderer.postProcessFormat);\n        const context = this.canvas.getContext('webgpu');\n        if (context == null)\n            throw new Error('renderer -- given canvas already initialized to non-webgpu context');\n        this.context = context;\n        this.context.configure({\n            device: this.device,\n            format: Renderer.outputFormat,\n            usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n            alphaMode: 'opaque',\n            colorSpace: 'srgb',\n        });\n        this.updateBackings(size);\n        renderer_classPrivateFieldGet(this, _Renderer_instances, \"m\", _Renderer_createResizeObserver).call(this);\n    }\n    static CreateInitialized(canvas) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const adapter = yield navigator.gpu.requestAdapter();\n            if (adapter == null) {\n                throw new Error('Could not initialize GPU.');\n            }\n            const { maxComputeWorkgroupSizeX, maxComputeWorkgroupsPerDimension, maxComputeInvocationsPerWorkgroup, } = adapter.limits;\n            const device = yield adapter.requestDevice({\n                label: 'main logical device',\n                requiredFeatures: Renderer.requiredFeatures,\n                requiredLimits: {\n                    maxComputeWorkgroupSizeX,\n                    maxComputeWorkgroupsPerDimension,\n                    maxComputeInvocationsPerWorkgroup,\n                },\n            });\n            return new Renderer(canvas, device);\n        });\n    }\n    updateBackings(size) {\n        var _a;\n        this.camera.updateParams(size);\n        this.postprocessTarget = this.device.createTexture({\n            dimension: '2d',\n            format: Renderer.postProcessFormat,\n            usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,\n            size,\n        });\n        this.colorAttachment.view = this.postprocessTarget.createView();\n        this.tonemapPass.updateInput(this.colorAttachment.view);\n        (_a = this.model) === null || _a === void 0 ? void 0 : _a.setTarget({\n            view: this.colorAttachment.view,\n            format: Renderer.postProcessFormat,\n            size,\n        });\n        if (this.model != null)\n            this.skyboxPass.depthTexture = this.model.depthTextureView;\n    }\n}\n_Renderer_instances = new WeakSet(), _Renderer_createResizeObserver = function _Renderer_createResizeObserver() {\n    const resizeCanvas = (0,general/* debounce */.sg)((rawWidth, rawHeight) => {\n        const width = Math.max(1, Math.min(rawWidth | 0, this.device.limits.maxTextureDimension2D));\n        const height = Math.max(1, Math.min(rawHeight | 0, this.device.limits.maxTextureDimension2D));\n        const dimensions = { width, height };\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.updateBackings(dimensions);\n    }, 20);\n    try {\n        const observer = new ResizeObserver((entries) => {\n            const [{ inlineSize, blockSize }] = entries[entries.length - 1].devicePixelContentBoxSize;\n            resizeCanvas(inlineSize, blockSize);\n        });\n        observer.observe(this.canvas, { box: 'device-pixel-content-box' });\n    }\n    catch (_a) {\n        // Safari doesn't support device-pixel-content-box, so it would fail into this.\n        const observer = new ResizeObserver((entries) => {\n            const [{ inlineSize, blockSize }] = entries[entries.length - 1].contentBoxSize;\n            resizeCanvas(inlineSize * devicePixelRatio, blockSize * devicePixelRatio);\n        });\n        observer.observe(this.canvas, { box: 'content-box' });\n    }\n};\nRenderer.requiredFeatures = ['float32-filterable'];\nRenderer.outputFormat = navigator.gpu.getPreferredCanvasFormat();\nRenderer.postProcessFormat = 'rgba32float';\n/* harmony default export */ const renderer = (Renderer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///114\n")}}]);