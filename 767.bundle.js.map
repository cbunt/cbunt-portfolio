{"version":3,"file":"767.bundle.js","mappings":"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","sources":["webpack://cbunt-portfolio/./node_modules/.pnpm/native-file-system-adapter@3.0.1/node_modules/native-file-system-adapter/src/adapters/sandbox.js"],"sourcesContent":["/* global Blob, DOMException */\n\nimport { errors } from '../util.js'\n\nconst { DISALLOWED } = errors\n\nclass Sink {\n  /**\n   * @param {FileWriter} writer\n   * @param {FileEntry} fileEntry\n   */\n  constructor (writer, fileEntry) {\n    this.writer = writer\n    this.fileEntry = fileEntry\n  }\n\n  /**\n   * @param {BlobPart | Object} chunk\n   */\n  async write (chunk) {\n    if (typeof chunk === 'object') {\n      if (chunk.type === 'write') {\n        if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n          this.writer.seek(chunk.position)\n          if (this.writer.position !== chunk.position) {\n            await new Promise((resolve, reject) => {\n              this.writer.onwriteend = resolve\n              this.writer.onerror = reject\n              this.writer.truncate(chunk.position)\n            })\n            this.writer.seek(chunk.position)\n          }\n        }\n        if (!('data' in chunk)) {\n          throw new DOMException('Failed to execute \\'write\\' on \\'UnderlyingSinkBase\\': Invalid params passed. write requires a data argument', 'SyntaxError')\n        }\n        chunk = chunk.data\n      } else if (chunk.type === 'seek') {\n        if (Number.isInteger(chunk.position) && chunk.position >= 0) {\n          this.writer.seek(chunk.position)\n          if (this.writer.position !== chunk.position) {\n            throw new DOMException('seeking position failed', 'InvalidStateError')\n          }\n          return\n        } else {\n          throw new DOMException('Failed to execute \\'write\\' on \\'UnderlyingSinkBase\\': Invalid params passed. seek requires a position argument', 'SyntaxError')\n        }\n      } else if (chunk.type === 'truncate') {\n        return new Promise(resolve => {\n          if (Number.isInteger(chunk.size) && chunk.size >= 0) {\n            this.writer.onwriteend = evt => resolve()\n            this.writer.truncate(chunk.size)\n          } else {\n            throw new DOMException('Failed to execute \\'write\\' on \\'UnderlyingSinkBase\\': Invalid params passed. truncate requires a size argument', 'SyntaxError')\n          }\n        })\n      }\n    }\n    await new Promise((resolve, reject) => {\n      this.writer.onwriteend = resolve\n      this.writer.onerror = reject\n      this.writer.write(new Blob([chunk]))\n    })\n  }\n\n  close () {\n    return new Promise(this.fileEntry.file.bind(this.fileEntry))\n  }\n}\n\nexport class FileHandle {\n  /** @param {FileEntry} file */\n  constructor (file, writable = true) {\n    this.file = file\n    this.kind = 'file'\n    this.writable = writable\n    this.readable = true\n  }\n\n  get name () {\n    return this.file.name\n  }\n\n  /**\n   * @param {{ file: { toURL: () => string; }; }} other\n   */\n  isSameEntry (other) {\n    return this.file.toURL() === other.file.toURL()\n  }\n\n  /** @return {Promise<File>} */\n  getFile () {\n    return new Promise(this.file.file.bind(this.file))\n  }\n\n  /** @return {Promise<Sink>} */\n  createWritable (opts) {\n    if (!this.writable) throw new DOMException(...DISALLOWED)\n\n    return new Promise((resolve, reject) =>\n      this.file.createWriter(fileWriter => {\n        if (opts.keepExistingData === false) {\n          fileWriter.onwriteend = evt => resolve(new Sink(fileWriter, this.file))\n          fileWriter.truncate(0)\n        } else {\n          resolve(new Sink(fileWriter, this.file))\n        }\n      }, reject)\n    )\n  }\n}\n\nexport class FolderHandle {\n  /** @param {DirectoryEntry} dir */\n  constructor (dir, writable = true) {\n    this.dir = dir\n    this.writable = writable\n    this.readable = true\n    this.kind = 'directory'\n    this.name = dir.name\n  }\n\n  /** @param {FolderHandle} other */\n  isSameEntry (other) {\n    return this.dir.fullPath === other.dir.fullPath\n  }\n\n  /** @returns {AsyncGenerator<[string, FileHandle | FolderHandle]>} */\n  async * entries () {\n    const reader = this.dir.createReader()\n    const entries = await new Promise(reader.readEntries.bind(reader))\n    for (const x of entries) {\n      yield [x.name, x.isFile ? new FileHandle(x, this.writable) : new FolderHandle(x, this.writable)]\n    }\n  }\n\n  /**\n   * @param {string} name\n   * @param {{ create: boolean; }} opts\n   * @returns {Promise<FolderHandle>}\n   */\n  getDirectoryHandle (name, opts) {\n    return new Promise((resolve, reject) => {\n      this.dir.getDirectory(name, opts, dir => {\n        resolve(new FolderHandle(dir))\n      }, reject)\n    })\n  }\n\n  /**\n   * @param {string} name\n   * @param {{ create: boolean; }} opts\n   * @returns {Promise<FileHandle>}\n   */\n  getFileHandle (name, opts) {\n    return new Promise((resolve, reject) =>\n      this.dir.getFile(name, opts, file => resolve(new FileHandle(file)), reject)\n    )\n  }\n\n  /**\n   * @param {string} name\n   * @param {{ recursive: boolean; }} opts\n   */\n  async removeEntry (name, opts) {\n    /** @type {Error|FolderHandle|FileHandle} */\n    const entry = await this.getDirectoryHandle(name, { create: false }).catch(err =>\n      err.name === 'TypeMismatchError' ? this.getFileHandle(name, { create: false }) : err\n    )\n\n    if (entry instanceof Error) throw entry\n\n    return new Promise((resolve, reject) => {\n      if (entry instanceof FolderHandle) {\n        opts.recursive\n          ? entry.dir.removeRecursively(() => resolve(), reject)\n          : entry.dir.remove(() => resolve(), reject)\n      } else if (entry.file) {\n        entry.file.remove(() => resolve(), reject)\n      }\n    })\n  }\n}\n\nexport default (opts = {}) => new Promise((resolve, reject) =>\n  window.webkitRequestFileSystem(\n    opts._persistent, 0,\n    e => resolve(new FolderHandle(e.root)),\n    reject\n  )\n)\n"],"names":["DISALLOWED","errors","Sink","constructor","writer","fileEntry","this","write","chunk","type","Number","isInteger","position","seek","Promise","resolve","reject","onwriteend","onerror","truncate","DOMException","data","size","evt","Blob","close","file","bind","FileHandle","writable","kind","readable","name","isSameEntry","other","toURL","getFile","createWritable","opts","createWriter","fileWriter","keepExistingData","FolderHandle","dir","fullPath","entries","reader","createReader","readEntries","x","isFile","getDirectoryHandle","getDirectory","getFileHandle","removeEntry","entry","create","catch","err","Error","recursive","removeRecursively","remove","window","webkitRequestFileSystem","_persistent","e","root"],"sourceRoot":""}