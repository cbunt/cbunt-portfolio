{"version":3,"file":"832.bundle.js","mappings":";iTAIA,IAAIA,EAAoB,IAFoB,oBAAhBC,aAA8B,EAAIC,EAAOC,SAAS,QAAQF,YAAcA,aAE3D,QAAS,CAAEG,WAAW,EAAMC,OAAO,IAE5EL,EAAkBM,SAElB,IAAIC,EAAuB,KAQ3B,SAASC,EAAmBC,EAAKC,GAC7B,OAAOV,EAAkBM,QAPI,OAAzBC,GAAiCA,EAAqBI,SAAW,SAAYA,SAC7EJ,EAAuB,IAAIK,WAAW,SAAYD,SAE/CJ,GAI2CM,SAASJ,EAAKA,EAAMC,GAC1E,CAEA,MAAMI,EAAO,IAAIC,MAAM,IAAIC,UAAKC,GAEhCH,EAAKI,UAAKD,EAAW,MAAM,GAAM,GAEjC,IAAIE,EAAYL,EAAKM,OAmBrB,SAASC,EAAWC,GAChB,MAAMC,EATV,SAAmBD,GAAO,OAAOR,EAAKQ,EAAM,CAS5BE,CAAUF,GAEtB,OATJ,SAAoBA,GACZA,EAAM,KACVR,EAAKQ,GAAOH,EACZA,EAAYG,EAChB,CAIIG,CAAWH,GACJC,CACX,CAEA,IAAIG,EAAyB,KAC7B,SAASC,IAIL,OAH+B,OAA3BD,GAAmCA,EAAuBf,SAAW,SAAYA,SACjFe,EAAyB,IAAIE,aAAa,SAAYjB,SAEnDe,CACX,CAEA,IAAIG,EAAkB,EAEtB,SAASC,EAAoBC,EAAKC,GAC9B,MAAMvB,EAAMuB,EAAoB,EAAbD,EAAIX,QAGvB,OAFAO,IAAoBM,IAAIF,EAAKtB,EAAM,GACnCoB,EAAkBE,EAAIX,OACfX,CACX,CAEA,IAAIyB,EAAuB,KAC3B,SAASC,IAIL,OAH6B,OAAzBD,GAAiCA,EAAqBvB,SAAW,SAAYA,SAC7EuB,EAAuB,IAAIE,WAAW,SAAYzB,SAE/CuB,CACX,CAYO,SAASG,EAAiBC,EAAUC,EAAQC,GAC/C,IACI,MAAMC,EAAS,mCAAsC,IACrD,IAAIC,EAAOZ,EAAoBQ,EAAU,qBACrCK,EAAOd,EACPe,EAAOd,EAAoBS,EAAQ,qBACnCM,EAAOhB,EACPiB,EAAOhB,EAAoBU,EAAU,qBACrCO,EAAOlB,EACX,mBAAsBY,EAAQC,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,GAC5D,IAAIC,EAAKb,IAAkBM,EAAS,EAAI,GACpCQ,EAAKd,IAAkBM,EAAS,EAAI,GACpCS,GAtBkBzC,EAsBQuC,EAtBHtC,EAsBOuC,EArB/BtB,IAAoBd,SAASJ,EAAM,EAAGA,EAAM,EAAIC,IAqBbyC,QAEtC,OADA,kBAAqBH,EAAS,EAALC,GAClBC,CACX,CAAE,QACE,kCAAqC,GACzC,CA3BJ,IAA8BzC,EAAKC,CA4BnC,CAEO,MAAM0C,EAAwB,SAASC,EAAMC,GAEhD,OAhFJ,SAAuBC,GACfpC,IAAcL,EAAKM,QAAQN,EAAKI,KAAKJ,EAAKM,OAAS,GACvD,MAAME,EAAMH,EAIZ,OAHAA,EAAYL,EAAKQ,GAEjBR,EAAKQ,GAAOiC,EACLjC,CACX,CAyEWkC,CADGhD,EAAmB6C,EAAMC,GAEvC,EAEaG,EAAqB,SAASJ,GACvC,MAAMhC,EAAWgC,EACrB","sources":["webpack://cbunt-portfolio/./node_modules/.pnpm/mikktspace@1.1.1/node_modules/mikktspace/dist/module/mikktspace_module_bg.js"],"sourcesContent":["import * as wasm from './mikktspace_module_bg.wasm';\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet cachegetFloat32Memory0 = null;\nfunction getFloat32Memory0() {\n    if (cachegetFloat32Memory0 === null || cachegetFloat32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetFloat32Memory0 = new Float32Array(wasm.memory.buffer);\n    }\n    return cachegetFloat32Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArrayF32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4);\n    getFloat32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction getArrayF32FromWasm0(ptr, len) {\n    return getFloat32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n/**\n* Generates vertex tangents for the given position/normal/texcoord attributes.\n* @param {Float32Array} position\n* @param {Float32Array} normal\n* @param {Float32Array} texcoord\n* @returns {Float32Array}\n*/\nexport function generateTangents(position, normal, texcoord) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passArrayF32ToWasm0(position, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArrayF32ToWasm0(normal, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = passArrayF32ToWasm0(texcoord, wasm.__wbindgen_malloc);\n        var len2 = WASM_VECTOR_LEN;\n        wasm.generateTangents(retptr, ptr0, len0, ptr1, len1, ptr2, len2);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v3 = getArrayF32FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 4);\n        return v3;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nexport const __wbindgen_string_new = function(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport const __wbindgen_rethrow = function(arg0) {\n    throw takeObject(arg0);\n};\n\n"],"names":["cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachegetUint8Memory0","getStringFromWasm0","ptr","len","buffer","Uint8Array","subarray","heap","Array","fill","undefined","push","heap_next","length","takeObject","idx","ret","getObject","dropObject","cachegetFloat32Memory0","getFloat32Memory0","Float32Array","WASM_VECTOR_LEN","passArrayF32ToWasm0","arg","malloc","set","cachegetInt32Memory0","getInt32Memory0","Int32Array","generateTangents","position","normal","texcoord","retptr","ptr0","len0","ptr1","len1","ptr2","len2","r0","r1","v3","slice","__wbindgen_string_new","arg0","arg1","obj","addHeapObject","__wbindgen_rethrow"],"sourceRoot":""}